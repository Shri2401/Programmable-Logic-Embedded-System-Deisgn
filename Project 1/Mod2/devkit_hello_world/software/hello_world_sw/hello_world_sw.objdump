
hello_world_sw.elf:     file format elf32-littlenios2
hello_world_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000002d0 memsz 0x000002d0 flags r-x
    LOAD off    0x000012f0 vaddr 0x000042f0 paddr 0x000042f4 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000012f8 vaddr 0x000042f8 paddr 0x000042f8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000012f4  2**0
                  CONTENTS
  2 .text         00000290  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  000042b0  000042b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000042f0  000042f4  000012f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000042f8  000042f8  000012f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00004304  00004304  000012f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001318  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b94  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000673  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000764  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000198  00000000  00000000  00002dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000064f  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000132  00000000  00000000  000035d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003708  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  00003718  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000453a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000006  00000000  00000000  0000453d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004543  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004544  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00004545  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00004549  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000454d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000d  00000000  00000000  00004551  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001f  00000000  00000000  0000455e  2**0
                  CONTENTS, READONLY
 26 .jdi          00004c8f  00000000  00000000  0000457d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00044c47  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
000042b0 l    d  .rodata	00000000 .rodata
000042f0 l    d  .rwdata	00000000 .rwdata
000042f8 l    d  .bss	00000000 .bss
00004304 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_sw_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000041c8 g     F .text	0000002c alt_main
000042f4 g       *ABS*	00000000 __flash_rwdata_start
000041f4 g     F .text	00000038 alt_putstr
0000428c g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000042fc g     O .bss	00000004 alt_argv
0000c2f0 g       *ABS*	00000000 _gp
00004304 g       *ABS*	00000000 __bss_end
00004284 g     F .text	00000004 alt_dcache_flush_all
000042f4 g       *ABS*	00000000 __ram_rwdata_end
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory
000042f0 g       *ABS*	00000000 __ram_rodata_end
00004304 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004250 g     F .text	00000034 altera_avalon_jtag_uart_write
00004020 g     F .text	0000003c _start
0000424c g     F .text	00000004 alt_sys_init
000042f0 g       *ABS*	00000000 __ram_rwdata_start
000042b0 g       *ABS*	00000000 __ram_rodata_start
00004304 g       *ABS*	00000000 __alt_stack_base
000042f8 g       *ABS*	00000000 __bss_start
0000405c g     F .text	0000008c main
000042f8 g     O .bss	00000004 alt_envp
000042b0 g       *ABS*	00000000 __flash_rodata_start
0000422c g     F .text	00000020 alt_irq_init
00004300 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
000042f4 g       *ABS*	00000000 _edata
00004304 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00008000 g       *ABS*	00000000 __alt_data_end
000042f0 g     O .rwdata	00000004 uart
0000400c g       .entry	00000000 _exit
00004294 g     F .text	0000001c strlen
00004288 g     F .text	00000004 alt_icache_flush_all
000040e8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b0bc14 	ori	gp,gp,49904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1090be14 	ori	r2,r2,17144

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d0c114 	ori	r3,r3,17156

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff7d54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00040e80 	call	40e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00041c80 	call	41c8 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff7d68>

0000405c <main>:
int main()
{
int switch_datain;
int key_0_datain;
int key_1_datain;
alt_putstr("Hello from Nios II!\n");
    405c:	01000034 	movhi	r4,0
#include "sys/alt_stdio.h"
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
int main()
{
    4060:	defffa04 	addi	sp,sp,-24
int switch_datain;
int key_0_datain;
int key_1_datain;
alt_putstr("Hello from Nios II!\n");
    4064:	2110ac04 	addi	r4,r4,17072
#include "sys/alt_stdio.h"
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
int main()
{
    4068:	dc400115 	stw	r17,4(sp)
    406c:	dc000015 	stw	r16,0(sp)
    4070:	dfc00515 	stw	ra,20(sp)
    4074:	dd000415 	stw	r20,16(sp)
    4078:	dcc00315 	stw	r19,12(sp)
    407c:	dc800215 	stw	r18,8(sp)
alt_putstr("Hello from Nios II!\n");
/* Event loop never exits. Read the PB, display on the LED */
while (1)
{
//LED toggles according to switch 1 state
switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    4080:	04240c14 	movui	r16,36912
int main()
{
int switch_datain;
int key_0_datain;
int key_1_datain;
alt_putstr("Hello from Nios II!\n");
    4084:	00041f40 	call	41f4 <alt_putstr>
/* Event loop never exits. Read the PB, display on the LED */
while (1)
{
//LED toggles according to switch 1 state
switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
    4088:	04640814 	movui	r17,36896
//Names are displayed according to key0 and key1 state
key_0_datain = IORD_ALTERA_AVALON_PIO_DATA(KEY_0_BASE);
    408c:	04e40414 	movui	r19,36880
alt_putstr("Hello from Nios II!\n");
/* Event loop never exits. Read the PB, display on the LED */
while (1)
{
//LED toggles according to switch 1 state
switch_datain = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE);
    4090:	80800037 	ldwio	r2,0(r16)
IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
    4094:	88800035 	stwio	r2,0(r17)
//Names are displayed according to key0 and key1 state
key_0_datain = IORD_ALTERA_AVALON_PIO_DATA(KEY_0_BASE);
    4098:	98800037 	ldwio	r2,0(r19)
key_1_datain = IORD_ALTERA_AVALON_PIO_DATA(KEY_1_BASE);
    409c:	00e40014 	movui	r3,36864
    40a0:	1c800037 	ldwio	r18,0(r3)
    40a4:	05240414 	movui	r20,36880

if(key_0_datain == 0)
    40a8:	10000626 	beq	r2,zero,40c4 <main+0x68>
	alt_putstr("Ruthvik Chanda\n");
	/*Two methods to perform Debouncing: 1.  Waiting in a loop until the button's state remains stable for a period (Implemented).
	                                     2. Setting delay for the print function */
    while(IORD_ALTERA_AVALON_PIO_DATA(KEY_0_BASE) == 0);
}
if(key_1_datain == 0)
    40ac:	903ff81e 	bne	r18,zero,4090 <_gp+0xffff7da0>
{
	alt_putstr("Shrinithi Venkatesan\n");
    40b0:	01000034 	movhi	r4,0
    40b4:	2110b604 	addi	r4,r4,17112
    40b8:	00041f40 	call	41f4 <alt_putstr>
    while(IORD_ALTERA_AVALON_PIO_DATA(KEY_1_BASE) == 0);
    40bc:	00e40014 	movui	r3,36864
    40c0:	00000606 	br	40dc <main+0x80>
key_0_datain = IORD_ALTERA_AVALON_PIO_DATA(KEY_0_BASE);
key_1_datain = IORD_ALTERA_AVALON_PIO_DATA(KEY_1_BASE);

if(key_0_datain == 0)
{
	alt_putstr("Ruthvik Chanda\n");
    40c4:	01000034 	movhi	r4,0
    40c8:	2110b204 	addi	r4,r4,17096
    40cc:	00041f40 	call	41f4 <alt_putstr>
	/*Two methods to perform Debouncing: 1.  Waiting in a loop until the button's state remains stable for a period (Implemented).
	                                     2. Setting delay for the print function */
    while(IORD_ALTERA_AVALON_PIO_DATA(KEY_0_BASE) == 0);
    40d0:	a0800037 	ldwio	r2,0(r20)
    40d4:	103ffe26 	beq	r2,zero,40d0 <_gp+0xffff7de0>
    40d8:	003ff406 	br	40ac <_gp+0xffff7dbc>
}
if(key_1_datain == 0)
{
	alt_putstr("Shrinithi Venkatesan\n");
    while(IORD_ALTERA_AVALON_PIO_DATA(KEY_1_BASE) == 0);
    40dc:	18800037 	ldwio	r2,0(r3)
    40e0:	103ffe26 	beq	r2,zero,40dc <_gp+0xffff7dec>
    40e4:	003fe906 	br	408c <_gp+0xffff7d9c>

000040e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    40e8:	deffff04 	addi	sp,sp,-4
    40ec:	01000034 	movhi	r4,0
    40f0:	01400034 	movhi	r5,0
    40f4:	dfc00015 	stw	ra,0(sp)
    40f8:	2110bc04 	addi	r4,r4,17136
    40fc:	2950bd04 	addi	r5,r5,17140

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4100:	2140061e 	bne	r4,r5,411c <alt_load+0x34>
    4104:	01000034 	movhi	r4,0
    4108:	01400034 	movhi	r5,0
    410c:	21100804 	addi	r4,r4,16416
    4110:	29500804 	addi	r5,r5,16416
    4114:	2140121e 	bne	r4,r5,4160 <alt_load+0x78>
    4118:	00000b06 	br	4148 <alt_load+0x60>
    411c:	00c00034 	movhi	r3,0
    4120:	18d0bd04 	addi	r3,r3,17140
    4124:	1907c83a 	sub	r3,r3,r4
    4128:	0005883a 	mov	r2,zero
  {
    while( to != end )
    412c:	10fff526 	beq	r2,r3,4104 <_gp+0xffff7e14>
    {
      *to++ = *from++;
    4130:	114f883a 	add	r7,r2,r5
    4134:	39c00017 	ldw	r7,0(r7)
    4138:	110d883a 	add	r6,r2,r4
    413c:	10800104 	addi	r2,r2,4
    4140:	31c00015 	stw	r7,0(r6)
    4144:	003ff906 	br	412c <_gp+0xffff7e3c>
    4148:	01000034 	movhi	r4,0
    414c:	01400034 	movhi	r5,0
    4150:	2110ac04 	addi	r4,r4,17072
    4154:	2950ac04 	addi	r5,r5,17072

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    4158:	2140101e 	bne	r4,r5,419c <alt_load+0xb4>
    415c:	00000b06 	br	418c <alt_load+0xa4>
    4160:	00c00034 	movhi	r3,0
    4164:	18d00804 	addi	r3,r3,16416
    4168:	1907c83a 	sub	r3,r3,r4
    416c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    4170:	10fff526 	beq	r2,r3,4148 <_gp+0xffff7e58>
    {
      *to++ = *from++;
    4174:	114f883a 	add	r7,r2,r5
    4178:	39c00017 	ldw	r7,0(r7)
    417c:	110d883a 	add	r6,r2,r4
    4180:	10800104 	addi	r2,r2,4
    4184:	31c00015 	stw	r7,0(r6)
    4188:	003ff906 	br	4170 <_gp+0xffff7e80>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    418c:	00042840 	call	4284 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4190:	dfc00017 	ldw	ra,0(sp)
    4194:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4198:	00042881 	jmpi	4288 <alt_icache_flush_all>
    419c:	00c00034 	movhi	r3,0
    41a0:	18d0bc04 	addi	r3,r3,17136
    41a4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    41a8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    41ac:	18bff726 	beq	r3,r2,418c <_gp+0xffff7e9c>
    {
      *to++ = *from++;
    41b0:	114f883a 	add	r7,r2,r5
    41b4:	39c00017 	ldw	r7,0(r7)
    41b8:	110d883a 	add	r6,r2,r4
    41bc:	10800104 	addi	r2,r2,4
    41c0:	31c00015 	stw	r7,0(r6)
    41c4:	003ff906 	br	41ac <_gp+0xffff7ebc>

000041c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    41c8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    41cc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    41d0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    41d4:	000422c0 	call	422c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    41d8:	000424c0 	call	424c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    41dc:	d1a00217 	ldw	r6,-32760(gp)
    41e0:	d1600317 	ldw	r5,-32756(gp)
    41e4:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    41e8:	dfc00017 	ldw	ra,0(sp)
    41ec:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    41f0:	000405c1 	jmpi	405c <main>

000041f4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    41f4:	defffe04 	addi	sp,sp,-8
    41f8:	dc000015 	stw	r16,0(sp)
    41fc:	dfc00115 	stw	ra,4(sp)
    4200:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4204:	00042940 	call	4294 <strlen>
    4208:	01000034 	movhi	r4,0
    420c:	000f883a 	mov	r7,zero
    4210:	100d883a 	mov	r6,r2
    4214:	800b883a 	mov	r5,r16
    4218:	2110bc04 	addi	r4,r4,17136
#else
    return fputs(str, stdout);
#endif
#endif
}
    421c:	dfc00117 	ldw	ra,4(sp)
    4220:	dc000017 	ldw	r16,0(sp)
    4224:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    4228:	00042501 	jmpi	4250 <altera_avalon_jtag_uart_write>

0000422c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    422c:	deffff04 	addi	sp,sp,-4
    4230:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
    4234:	000428c0 	call	428c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4238:	00800044 	movi	r2,1
    423c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4240:	dfc00017 	ldw	ra,0(sp)
    4244:	dec00104 	addi	sp,sp,4
    4248:	f800283a 	ret

0000424c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    424c:	f800283a 	ret

00004250 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    4250:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    4254:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    4258:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    425c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    4260:	2980072e 	bgeu	r5,r6,4280 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    4264:	38c00037 	ldwio	r3,0(r7)
    4268:	18ffffec 	andhi	r3,r3,65535
    426c:	183ffc26 	beq	r3,zero,4260 <_gp+0xffff7f70>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    4270:	28c00007 	ldb	r3,0(r5)
    4274:	20c00035 	stwio	r3,0(r4)
    4278:	29400044 	addi	r5,r5,1
    427c:	003ff806 	br	4260 <_gp+0xffff7f70>

  return count;
}
    4280:	f800283a 	ret

00004284 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4284:	f800283a 	ret

00004288 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4288:	f800283a 	ret

0000428c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    428c:	000170fa 	wrctl	ienable,zero
    4290:	f800283a 	ret

00004294 <strlen>:
    4294:	2005883a 	mov	r2,r4
    4298:	10c00007 	ldb	r3,0(r2)
    429c:	18000226 	beq	r3,zero,42a8 <strlen+0x14>
    42a0:	10800044 	addi	r2,r2,1
    42a4:	003ffc06 	br	4298 <_gp+0xffff7fa8>
    42a8:	1105c83a 	sub	r2,r2,r4
    42ac:	f800283a 	ret
