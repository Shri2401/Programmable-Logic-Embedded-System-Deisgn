
Embed_System.elf:     file format elf32-littlenios2
Embed_System.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0400016c

Program Header:
    LOAD off    0x00001020 vaddr 0x09404020 paddr 0x04000000 align 2**12
         filesz 0x0000016c memsz 0x0000016c flags r-x
    LOAD off    0x0000216c vaddr 0x0400016c paddr 0x0400016c align 2**12
         filesz 0x0000fc40 memsz 0x0000fc40 flags r-x
    LOAD off    0x00011dac vaddr 0x0400fdac paddr 0x040109e8 align 2**12
         filesz 0x00000c3c memsz 0x00000c3c flags rw-
    LOAD off    0x00013624 vaddr 0x04011624 paddr 0x04011624 align 2**12
         filesz 0x00000000 memsz 0x000001f4 flags rw-
    LOAD off    0x00013000 vaddr 0x09404000 paddr 0x09404000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  09404000  09404000  00013000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  09404020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f578  0400016c  0400016c  0000216c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006c8  0400f6e4  0400f6e4  000116e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000c3c  0400fdac  040109e8  00011dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001f4  04011624  04011624  00013624  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04011818  04011818  00013020  2**0
                  CONTENTS
  7 .onchip_flash_0_data 00000000  09200000  09200000  00013020  2**0
                  CONTENTS
  8 .onchip_ram   00000000  0940418c  0940418c  00013020  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001018  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000286a6  00000000  00000000  00014060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000a57f  00000000  00000000  0003c706  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000c9eb  00000000  00000000  00046c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000021a4  00000000  00000000  00053670  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004161  00000000  00000000  00055814  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0001aa2c  00000000  00000000  00059975  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  000743a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001c40  00000000  00000000  00074408  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  00079a4e  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00079a51  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00079a5d  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00079a5e  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00079a5f  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00079a63  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00079a67  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  00079a6b  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  00079a74  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  00079a7d  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000005  00000000  00000000  00079a86  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000001a  00000000  00000000  00079a8b  2**0
                  CONTENTS, READONLY
 31 .jdi          0000af1c  00000000  00000000  00079aa5  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000c4b6a  00000000  00000000  000849c1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
09404000 l    d  .entry	00000000 .entry
09404020 l    d  .exceptions	00000000 .exceptions
0400016c l    d  .text	00000000 .text
0400f6e4 l    d  .rodata	00000000 .rodata
0400fdac l    d  .rwdata	00000000 .rwdata
04011624 l    d  .bss	00000000 .bss
04011818 l    d  .sdram	00000000 .sdram
09200000 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
0940418c l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Embed_System_bsp//obj/HAL/src/crt0.o
040001b4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alarm_util.c
00000000 l    df *ABS*	00000000 delay_wait.c
00000000 l    df *ABS*	00000000 error_loop.c
00000000 l    df *ABS*	00000000 jtag_uart_util.c
00000000 l    df *ABS*	00000000 led_util.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400faca l     O .rodata	00000010 zeroes.4404
04002c20 l     F .text	000000bc __sbprintf
0400fada l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04002e30 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04004960 l     F .text	00000008 __fp_unlock
04004974 l     F .text	0000019c __sinit.part.1
04004b10 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0400fdac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
040101f0 l     O .rwdata	00000020 lc_ctype_charset
040101d0 l     O .rwdata	00000020 lc_message_charset
04010210 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0400fb0c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04007428 l     F .text	000000fc __sprint_r.part.0
0400fc40 l     O .rodata	00000010 blanks.4348
0400fc30 l     O .rodata	00000010 zeroes.4349
040089b4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0400d174 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040109c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04010960 l     O .rwdata	0000002c jtag_uart
04010924 l     O .rwdata	0000003c modular_adc_0
04010824 l     O .rwdata	00000100 onchip_flash_0
040107f8 l     O .rwdata	0000002c accelerometer_spi_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400da70 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
0400dad4 l     F .text	00000064 alt_adc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400eaf0 l     F .text	00000074 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 refill.c
0400f4e0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 alt_exit.c
0401168c g     O .bss	00000004 alt_instruction_exception_handler
04006f38 g     F .text	00000074 _mprec_log10
0400dc44 g     F .text	00000020 adc_stop
04007024 g     F .text	0000008c __any_on
0400940c g     F .text	00000054 _isatty_r
0400fb18 g     O .rodata	00000028 __mprec_tinytens
0400d414 g     F .text	00000050 alt_main
040004dc g     F .text	00000014 my_alarm_callback
04011718 g     O .bss	00000100 alt_irq
04009460 g     F .text	00000060 _lseek_r
040109e8 g       *ABS*	00000000 __flash_rwdata_start
0400bb64 g     F .text	00000088 .hidden __eqdf2
04011818 g       *ABS*	00000000 __alt_heap_start
040009d0 g     F .text	0000003c printf
04009d38 g     F .text	0000009c _wcrtomb_r
04007250 g     F .text	0000005c __sseek
04004cb0 g     F .text	00000010 __sinit
04009be0 g     F .text	00000140 __swbuf_r
040052bc g     F .text	0000007c _setlocale_r
04004b18 g     F .text	00000068 __sfmoreglue
0400d468 g     F .text	00000004 __malloc_unlock
04011648 g     O .bss	00000004 LAST_DELAY
04011650 g     O .bss	00000004 PRINT_STDIO_WRAP_COUNT
040094c0 g     F .text	0000015c memmove
04004c98 g     F .text	00000018 _cleanup
040060b4 g     F .text	000000a8 _Balloc
0400bbec g     F .text	000000dc .hidden __gtdf2
0400edfc g     F .text	00000008 altera_nios2_gen2_irq_init
09404000 g     F .entry	0000001c __reset
0400dd00 g     F .text	00000018 adc_interrupt_disable
0400e7c4 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
04000000 g       *ABS*	00000000 __flash_exceptions_start
04008ef4 g     F .text	0000005c _fstat_r
04011670 g     O .bss	00000004 errno
0400f34c g     F .text	00000014 __srget
040071cc g     F .text	00000008 __seofread
0400db70 g     F .text	00000070 altera_modular_adc_init
04011654 g     O .bss	00000001 LED_MASK
04011678 g     O .bss	00000004 alt_argv
0401898c g       *ABS*	00000000 _gp
04011655 g     O .bss	00000001 LED_STATE
0400e70c g     F .text	00000060 alt_onchip_flash_poll_for_status_write_passed
04010650 g     O .rwdata	00000180 alt_fd_list
0400effc g     F .text	00000070 _getc_r
0400f06c g     F .text	00000088 getc
0400ea08 g     F .text	00000078 alt_find_dev
04005e44 g     F .text	00000148 memcpy
09200000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
04004968 g     F .text	0000000c _cleanup_r
0400ce50 g     F .text	000000dc .hidden __floatsidf
0400dc8c g     F .text	00000014 adc_set_mode_run_continuously
0400eb64 g     F .text	00000074 alt_io_redirect
0400bcc8 g     F .text	000000f4 .hidden __ltdf2
0400ef50 g     F .text	00000074 alt_exception_cause_generated_bad_addr
040070b0 g     F .text	00000074 __fpclassifyd
04006e94 g     F .text	000000a4 __ratio
04008998 g     F .text	0000001c __vfiprintf_internal
0400d9c8 g     F .text	00000074 altera_avalon_jtag_uart_read
040009a0 g     F .text	00000030 _printf_r
040008e4 g     F .text	00000064 .hidden __udivsi3
0400d200 g     F .text	00000084 isatty
0400e6ac g     F .text	00000060 alt_onchip_flash_poll_for_status_erase_passed
0400fb68 g     O .rodata	000000c8 __mprec_tens
04005338 g     F .text	0000000c __locale_charset
0400ef00 g     F .text	00000050 alt_icache_flush
0401166c g     O .bss	00000004 __malloc_top_pad
040109d4 g     O .rwdata	00000008 altera_onchip_flash_list
04010998 g     O .rwdata	00000004 __mb_cur_max
04005368 g     F .text	0000000c _localeconv_r
04008f50 g     F .text	000004bc __sfvwrite_r
040064c0 g     F .text	0000003c __i2b
04007124 g     F .text	00000054 _sbrk_r
0400961c g     F .text	00000060 _read_r
040109cc g     O .rwdata	00000008 altera_modular_adc_list
0400e944 g     F .text	00000040 alt_dcache_flush
0400de08 g     F .text	00000178 alt_onchip_flash_erase_block
04011624 g     O .bss	00000004 accelerometer
040109a8 g     O .rwdata	00000004 alt_max_fd
04008be8 g     F .text	000000f0 _fclose_r
04004930 g     F .text	00000030 fflush
04011668 g     O .bss	00000004 __malloc_max_sbrked_mem
0400ebd8 g     F .text	000000ac alt_irq_register
0400a9d0 g     F .text	000008ac .hidden __adddf3
04006c3c g     F .text	0000010c __b2d
0400a498 g     F .text	00000538 .hidden __umoddi3
0400d398 g     F .text	0000007c lseek
04010990 g     O .rwdata	00000004 _global_impure_ptr
0400967c g     F .text	00000564 _realloc_r
04011818 g       *ABS*	00000000 __bss_end
0400d1f4 g     F .text	0000000c alt_getchar
0400d760 g     F .text	000000f4 alt_tick
040116b8 g     O .bss	00000018 ALARM_100MS
04009f20 g     F .text	00000578 .hidden __udivdi3
04008e50 g     F .text	00000024 _fputwc_r
0400dd3c g     F .text	00000014 adc_wait_for_interrupt
0400fb40 g     O .rodata	00000028 __mprec_bigtens
040062a4 g     F .text	00000104 __s2b
0400cf2c g     F .text	000000a8 .hidden __floatunsidf
0400697c g     F .text	00000060 __mcmp
04004cd0 g     F .text	00000018 __fp_lock_all
0400d72c g     F .text	00000034 alt_alarm_stop
04011688 g     O .bss	00000004 alt_irq_active
040006f4 g     F .text	00000014 set_delay_mode_100ms
094040fc g     F .exceptions	00000064 alt_irq_handler
040107d0 g     O .rwdata	00000028 alt_dev_null
040116d0 g     O .bss	00000018 ALARM_1MS
0400071c g     F .text	00000014 set_delay_mode_1ms
0400dc74 g     F .text	00000018 adc_set_mode_run_once
0400e984 g     F .text	00000018 alt_dcache_flush_all
040063a8 g     F .text	00000068 __hi0bits
0400cdd0 g     F .text	00000080 .hidden __fixdfsi
040109e8 g       *ABS*	00000000 __ram_rwdata_end
0401164c g     O .bss	00000004 PRINT_STDIO_MASK
040109ac g     O .rwdata	00000008 alt_dev_list
0400d854 g     F .text	000000c4 write
0400f170 g     F .text	000000a0 _putc_r
04000730 g     F .text	00000008 set_delay_mode_none
0400fdac g       *ABS*	00000000 __ram_rodata_end
0400d17c g     F .text	00000078 fstat
0400bcc8 g     F .text	000000f4 .hidden __ledf2
04000738 g     F .text	00000024 error_loop
0400dc64 g     F .text	00000010 adc_start
040066f4 g     F .text	00000140 __pow5mult
0400753c g     F .text	0000145c ___vfiprintf_internal_r
04011660 g     O .bss	00000004 __nlocale_changed
04000948 g     F .text	00000058 .hidden __umodsi3
040001b8 g     F .text	0000003c init_accel
04011818 g       *ABS*	00000000 end
04011628 g     O .bss	00000008 ALARM_250MS_CONTEXT
09404160 g     F .exceptions	0000002c alt_instruction_exception_entry
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400daac g     F .text	00000028 alt_avalon_timer_sc_init
0400cfd4 g     F .text	00000064 .hidden __clzsi2
0400da3c g     F .text	00000034 altera_avalon_jtag_uart_write
04004cc0 g     F .text	00000004 __sfp_lock_acquire
04005d60 g     F .text	000000e4 memchr
04000a0c g     F .text	000021f8 ___vfprintf_internal_r
0400ddc0 g     F .text	00000048 alt_onchip_flash_get_info
04004e24 g     F .text	00000310 _free_r
0400d46c g     F .text	0000017c alt_printf
04005344 g     F .text	00000010 __locale_mb_cur_max
0400f2d8 g     F .text	00000074 __srget_r
0400f360 g     F .text	00000180 __call_exitprocs
0401165c g     O .bss	00000004 __mlocale_changed
0401099c g     O .rwdata	00000004 __malloc_sbrk_base
0400016c g     F .text	0000004c _start
04011684 g     O .bss	00000004 _alt_tick_rate
04006834 g     F .text	00000148 __lshift
04011680 g     O .bss	00000004 _alt_nticks
0400d5f4 g     F .text	000000c8 read
0400d938 g     F .text	00000070 alt_sys_init
0400e774 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
04011630 g     O .bss	00000008 ALARM_100MS_CONTEXT
040064fc g     F .text	000001f8 __multiply
0400fdac g       *ABS*	00000000 __ram_rwdata_start
0400f6e4 g       *ABS*	00000000 __ram_rodata_start
04011690 g     O .bss	00000028 __malloc_current_mallinfo
04006d48 g     F .text	0000014c __d2b
0400d9a8 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0400eeb0 g     F .text	00000050 alt_get_fd
040116e8 g     O .bss	00000018 ALARM_250MS
0400e8cc g     F .text	00000078 alt_busy_sleep
0400e81c g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
04008ad0 g     F .text	00000054 _close_r
04000624 g     F .text	000000bc delay_wait
0400f0f4 g     F .text	0000007c memcmp
04011818 g       *ABS*	00000000 __alt_stack_base
04002cdc g     F .text	00000154 __swsetup_r
0400dcec g     F .text	00000014 adc_interrupt_enable
0400b27c g     F .text	000008e8 .hidden __divdf3
0400dd50 g     F .text	00000070 alt_onchip_flash_read
04004b80 g     F .text	00000118 __sfp
04006fac g     F .text	00000078 __copybits
04010248 g     O .rwdata	00000408 __malloc_av_
04004ccc g     F .text	00000004 __sinit_lock_release
0400bdbc g     F .text	00000718 .hidden __muldf3
04007178 g     F .text	00000054 __sread
0400ee04 g     F .text	000000ac alt_find_file
0400e99c g     F .text	0000006c alt_dev_llist_insert
0400d464 g     F .text	00000004 __malloc_lock
0400d6e0 g     F .text	0000004c sbrk
040048d4 g     F .text	0000005c _fflush_r
04008b24 g     F .text	000000c4 _calloc_r
040109dc g     O .rwdata	00000008 alt_flash_dev_list
04011624 g       *ABS*	00000000 __bss_start
04005f8c g     F .text	00000128 memset
040001f4 g     F .text	000002e8 main
04011674 g     O .bss	00000004 alt_envp
04011664 g     O .bss	00000004 __malloc_max_total_mem
0400d9b8 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
04009d20 g     F .text	00000018 __swbuf
0400db38 g     F .text	00000038 alt_adc_word_read
04011638 g     O .bss	00000008 ALARM_10MS_CONTEXT
040072ac g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04008cd8 g     F .text	00000014 fclose
04003030 g     F .text	00001688 _dtoa_r
04005554 g     F .text	0000080c _malloc_r
04009e94 g     F .text	00000030 __ascii_wctomb
040109bc g     O .rwdata	00000004 alt_errno
0400e650 g     F .text	0000005c alt_onchip_flash_poll_for_status_to_go_idle
04005134 g     F .text	000000c4 _fwalk
0400f210 g     F .text	000000c8 putc
040007ec g     F .text	00000084 .hidden __divsi3
04004d00 g     F .text	00000124 _malloc_trim_r
0400e3ac g     F .text	000002a4 altera_onchip_flash_init
040072b4 g     F .text	000000dc strcmp
0400f6e4 g       *ABS*	00000000 __flash_rodata_start
0400bb64 g     F .text	00000088 .hidden __nedf2
0400d918 g     F .text	00000020 alt_irq_init
0400d6bc g     F .text	00000024 alt_release_fd
0400fc50 g     O .rodata	00000100 .hidden __clz_tab
04011658 g     O .bss	00000004 _PathLocale
04008a70 g     F .text	00000060 _write_r
04005374 g     F .text	00000018 setlocale
040007b8 g     F .text	00000034 update_led
04010994 g     O .rwdata	00000004 _impure_ptr
0401167c g     O .bss	00000004 alt_argc
040046b8 g     F .text	0000021c __sflush_r
04005360 g     F .text	00000008 __locale_cjk_lang
0400f4fc g     F .text	000001d4 __srefill_r
040006e0 g     F .text	00000014 set_delay_mode_250ms
09404020 g       .exceptions	00000000 alt_irq_entry
04006bd8 g     F .text	00000064 __ulp
04004ce8 g     F .text	00000018 __fp_unlock_all
040109b4 g     O .rwdata	00000008 alt_fs_list
0400df80 g     F .text	00000220 alt_onchip_flash_write_block
09404020 g       *ABS*	00000000 __ram_exceptions_start
0400e76c g     F .text	00000008 alt_up_accelerometer_spi_open_dev
0400538c g     F .text	0000000c localeconv
0400075c g     F .text	0000005c print_binary_count_stdio
040109e8 g       *ABS*	00000000 _edata
0400e1a0 g     F .text	0000020c alt_onchip_flash_write
04011818 g       *ABS*	00000000 _end
0400ea80 g     F .text	00000050 alt_flash_open_dev
04011700 g     O .bss	00000018 ALARM_10MS
0400dd2c g     F .text	00000010 adc_interrupt_asserted
04008cec g     F .text	00000164 __fputwc
0940418c g       *ABS*	00000000 __ram_exceptions_end
040071d4 g     F .text	0000007c __swrite
040109a0 g     O .rwdata	00000004 __malloc_trim_threshold
0400dd18 g     F .text	00000014 adc_clear_interrupt_status
04005354 g     F .text	0000000c __locale_msgcharset
0400efc4 g     F .text	00000038 exit
040051f8 g     F .text	000000c4 _fwalk_reent
040069dc g     F .text	000001fc __mdiff
0400ead0 g     F .text	00000014 alt_flash_close_dev
04000870 g     F .text	00000074 .hidden __modsi3
0400e874 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
08000000 g       *ABS*	00000000 __alt_data_end
09404020 g     F .exceptions	00000000 alt_exception
04004cc4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
09404000 g       *ABS*	00000000 __alt_mem_onchip_ram
0400dc3c g     F .text	00000008 altera_modular_adc_open
0400f6d0 g     F .text	00000014 _exit
0400d038 g     F .text	00000080 alt_alarm_start
0400e788 g     F .text	00000020 alt_up_accelerometer_spi_read
0400e7a8 g     F .text	0000001c alt_up_accelerometer_spi_write
04005398 g     F .text	000001bc __smakebuf_r
04007390 g     F .text	00000098 strlen
0400ec84 g     F .text	00000178 open
040004f0 g     F .text	00000134 alarm_init
0400bbec g     F .text	000000dc .hidden __gedf2
0400d5e8 g     F .text	0000000c alt_putchar
0400dca0 g     F .text	0000004c adc_recalibrate
040109a4 g     O .rwdata	00000004 __wctomb
04011640 g     O .bss	00000008 ALARM_1MS_CONTEXT
04007524 g     F .text	00000018 __sprint_r
0400eae4 g     F .text	0000000c alt_icache_flush_all
040109e4 g     O .rwdata	00000004 alt_priority_mask
04002c04 g     F .text	0000001c __vfprintf_internal
04009ec4 g     F .text	0000005c _wctomb_r
0400c4d4 g     F .text	000008fc .hidden __subdf3
04000708 g     F .text	00000014 set_delay_mode_10ms
0401098c g     O .rwdata	00000001 DELAY_MODE
04006410 g     F .text	000000b0 __lo0bits
040109c4 g     O .rwdata	00000008 alt_alarm_list
04009dd4 g     F .text	000000c0 wcrtomb
0400d0b8 g     F .text	000000bc close
0400d284 g     F .text	00000114 alt_load
04008e74 g     F .text	00000080 fputwc
0400dbe0 g     F .text	0000005c alt_adc_register_callback
04004cc8 g     F .text	00000004 __sinit_lock_acquire
04006184 g     F .text	00000120 __multadd
0400615c g     F .text	00000028 _Bfree



Disassembly of section .entry:

09404000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 9404000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 9404004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 9404008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 940400c:	00bffd16 	blt	zero,r2,9404004 <__ram_exceptions_end+0xfffffe78>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 9404010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 9404014:	08405b14 	ori	at,at,364
    jmp r1
 9404018:	0800683a 	jmp	at
 940401c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

09404020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 9404020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 9404024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 9404028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 940402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 9404030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 9404034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 9404038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 940403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 9404040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 9404044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 9404048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 940404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 9404050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 9404054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 9404058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 940405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 9404060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 9404064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 9404068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 940406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 9404070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 9404074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 9404078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 940407c:	10000326 	beq	r2,zero,940408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 9404080:	20000226 	beq	r4,zero,940408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 9404084:	94040fc0 	call	94040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 9404088:	00000706 	br	94040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 940408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 9404090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 9404094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 9404098:	94041600 	call	9404160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 940409c:	1000021e 	bne	r2,zero,94040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 94040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 94040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 94040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 94040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 94040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 94040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 94040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 94040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 94040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 94040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 94040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 94040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 94040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 94040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 94040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 94040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 94040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 94040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 94040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 94040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 94040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 94040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 94040f8:	ef80083a 	eret

094040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 94040fc:	defffe04 	addi	sp,sp,-8
 9404100:	dfc00115 	stw	ra,4(sp)
 9404104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 9404108:	0009313a 	rdctl	r4,ipending
 940410c:	04010074 	movhi	r16,1025
 9404110:	8405c604 	addi	r16,r16,5912
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 9404114:	2080004c 	andi	r2,r4,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 9404118:	000b883a 	mov	r5,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 940411c:	1000051e 	bne	r2,zero,9404134 <alt_irq_handler+0x38>
 9404120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 9404124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 9404128:	2086703a 	and	r3,r4,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 940412c:	29400044 	addi	r5,r5,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 9404130:	183ffc26 	beq	r3,zero,9404124 <__ram_exceptions_end+0xffffff98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 9404134:	280490fa 	slli	r2,r5,3
 9404138:	8085883a 	add	r2,r16,r2
 940413c:	10c00017 	ldw	r3,0(r2)
 9404140:	11000117 	ldw	r4,4(r2)
 9404144:	183ee83a 	callr	r3
 9404148:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 940414c:	203ff11e 	bne	r4,zero,9404114 <__ram_exceptions_end+0xffffff88>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 9404150:	dfc00117 	ldw	ra,4(sp)
 9404154:	dc000017 	ldw	r16,0(sp)
 9404158:	dec00204 	addi	sp,sp,8
 940415c:	f800283a 	ret

09404160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 9404160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 9404164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 9404168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 940416c:	d0a34017 	ldw	r2,-29440(gp)
 9404170:	10000326 	beq	r2,zero,9404180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 9404174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 9404178:	2008d0ba 	srli	r4,r4,2
 940417c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 9404180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 9404184:	0005883a 	mov	r2,zero
 9404188:	f800283a 	ret

Disassembly of section .text:

0400016c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 400016c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000170:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000174:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000178:	00bffd16 	blt	zero,r2,4000170 <__ram_exceptions_end+0xfabfbfe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 400017c:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000180:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000184:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000188:	d6a26314 	ori	gp,gp,35212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 400018c:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000190:	10858914 	ori	r2,r2,5668

    movhi r3, %hi(__bss_end)
 4000194:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000198:	18c60614 	ori	r3,r3,6168

    beq r2, r3, 1f
 400019c:	10c00326 	beq	r2,r3,40001ac <_start+0x40>

0:
    stw zero, (r2)
 40001a0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001a4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001a8:	10fffd36 	bltu	r2,r3,40001a0 <__ram_exceptions_end+0xfabfc014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001ac:	400d2840 	call	400d284 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001b0:	400d4140 	call	400d414 <alt_main>

040001b4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001b4:	003fff06 	br	40001b4 <__ram_exceptions_end+0xfabfc028>

040001b8 <init_accel>:
//initialize accelerometer value variable
alt_up_accelerometer_spi_dev * accelerometer;

//initialize accelerometer
void init_accel() {
    accelerometer = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi_0");
 40001b8:	01010074 	movhi	r4,1025

//initialize accelerometer value variable
alt_up_accelerometer_spi_dev * accelerometer;

//initialize accelerometer
void init_accel() {
 40001bc:	deffff04 	addi	sp,sp,-4
    accelerometer = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi_0");
 40001c0:	213db904 	addi	r4,r4,-2332

//initialize accelerometer value variable
alt_up_accelerometer_spi_dev * accelerometer;

//initialize accelerometer
void init_accel() {
 40001c4:	dfc00015 	stw	ra,0(sp)
    accelerometer = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi_0");
 40001c8:	400e76c0 	call	400e76c <alt_up_accelerometer_spi_open_dev>
 40001cc:	d0a32615 	stw	r2,-29544(gp)
    if (accelerometer != NULL) {
 40001d0:	10000526 	beq	r2,zero,40001e8 <init_accel+0x30>
        alt_printf("Accelerometer active!\n ");
 40001d4:	01010074 	movhi	r4,1025
 40001d8:	213dc004 	addi	r4,r4,-2304
    }
}
 40001dc:	dfc00017 	ldw	ra,0(sp)
 40001e0:	dec00104 	addi	sp,sp,4

//initialize accelerometer
void init_accel() {
    accelerometer = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi_0");
    if (accelerometer != NULL) {
        alt_printf("Accelerometer active!\n ");
 40001e4:	400d46c1 	jmpi	400d46c <alt_printf>
    }
}
 40001e8:	dfc00017 	ldw	ra,0(sp)
 40001ec:	dec00104 	addi	sp,sp,4
 40001f0:	f800283a 	ret

040001f4 <main>:
    char input;
    int dir;
    alt_u32 xAccel = 0;
    alt_u8 mode = 'b'; // Default mode is binary counter

    alt_printf("\nled_control program starting...\n\n");
 40001f4:	01010074 	movhi	r4,1025
    if (accelerometer != NULL) {
        alt_printf("Accelerometer active!\n ");
    }
}

int main(void) {
 40001f8:	defff804 	addi	sp,sp,-32
    char input;
    int dir;
    alt_u32 xAccel = 0;
    alt_u8 mode = 'b'; // Default mode is binary counter

    alt_printf("\nled_control program starting...\n\n");
 40001fc:	213dc604 	addi	r4,r4,-2280
    if (accelerometer != NULL) {
        alt_printf("Accelerometer active!\n ");
    }
}

int main(void) {
 4000200:	dfc00715 	stw	ra,28(sp)
 4000204:	dc800315 	stw	r18,12(sp)
 4000208:	dd400615 	stw	r21,24(sp)
 400020c:	dd000515 	stw	r20,20(sp)
 4000210:	dcc00415 	stw	r19,16(sp)
 4000214:	dc400215 	stw	r17,8(sp)
 4000218:	dc000115 	stw	r16,4(sp)
    alt_u8 binary_count;
    char input;
    int dir;
    alt_u32 xAccel = 0;
 400021c:	d8000015 	stw	zero,0(sp)
    alt_u8 mode = 'b'; // Default mode is binary counter

    alt_printf("\nled_control program starting...\n\n");
 4000220:	400d46c0 	call	400d46c <alt_printf>
    alt_printf("CONGRATULATIONS!  You have successfully compiled a Nios II project!\n");
 4000224:	01010074 	movhi	r4,1025
 4000228:	213dcf04 	addi	r4,r4,-2244
int main(void) {
    alt_u8 binary_count;
    char input;
    int dir;
    alt_u32 xAccel = 0;
    alt_u8 mode = 'b'; // Default mode is binary counter
 400022c:	04801884 	movi	r18,98

    alt_printf("\nled_control program starting...\n\n");
    alt_printf("CONGRATULATIONS!  You have successfully compiled a Nios II project!\n");
 4000230:	400d46c0 	call	400d46c <alt_printf>

    alarm_init();
 4000234:	40004f00 	call	40004f0 <alarm_init>


    while (1) {
        alt_printf("\nPress 'a' for accelerometer or 'b' for binary counter\n");
 4000238:	01010074 	movhi	r4,1025
 400023c:	213de104 	addi	r4,r4,-2172
 4000240:	400d46c0 	call	400d46c <alt_printf>
        input = alt_getchar();
 4000244:	400d1f40 	call	400d1f4 <alt_getchar>
 4000248:	1021883a 	mov	r16,r2
        alt_getchar();
        alt_printf("You selected: '%c'\n", input);
 400024c:	84003fcc 	andi	r16,r16,255


    while (1) {
        alt_printf("\nPress 'a' for accelerometer or 'b' for binary counter\n");
        input = alt_getchar();
        alt_getchar();
 4000250:	400d1f40 	call	400d1f4 <alt_getchar>
        alt_printf("You selected: '%c'\n", input);
 4000254:	8400201c 	xori	r16,r16,128
 4000258:	843fe004 	addi	r16,r16,-128
 400025c:	01010074 	movhi	r4,1025

        if (input == 'a') {
 4000260:	04401844 	movi	r17,97

    while (1) {
        alt_printf("\nPress 'a' for accelerometer or 'b' for binary counter\n");
        input = alt_getchar();
        alt_getchar();
        alt_printf("You selected: '%c'\n", input);
 4000264:	213def04 	addi	r4,r4,-2116
 4000268:	800b883a 	mov	r5,r16
 400026c:	400d46c0 	call	400d46c <alt_printf>

        if (input == 'a') {
 4000270:	84407226 	beq	r16,r17,400043c <main+0x248>
            mode = 'a'; // Switch to accelerometer mode
            alt_printf("Switched to accelerometer mode\n");
            init_accel();
        } else if (input == 'b') {
 4000274:	00801884 	movi	r2,98
 4000278:	80802126 	beq	r16,r2,4000300 <main+0x10c>
            mode = 'b'; // Switch to binary counter mode
            alt_printf("Switched to binary counter mode\n");
        } else {
            alt_printf("INVALID ENTRY\n");
 400027c:	01010074 	movhi	r4,1025
 4000280:	213e0504 	addi	r4,r4,-2028
 4000284:	400d46c0 	call	400d46c <alt_printf>
        }

        if (mode == 'a') {
 4000288:	90803fcc 	andi	r2,r18,255
 400028c:	14401f1e 	bne	r2,r17,400030c <main+0x118>
            // Accelerometer mode
            alt_up_accelerometer_spi_read_x_axis(accelerometer, (alt_32*)&xAccel);
 4000290:	d1232617 	ldw	r4,-29544(gp)
 4000294:	d80b883a 	mov	r5,sp

            alt_u8 raw_xval = (alt_u8)(xAccel % 255);
            alt_u8 xval = ((7 * raw_xval) / 255);

            alt_u8 Led_Val = 0x00;
 4000298:	0021883a 	mov	r16,zero
            alt_printf("INVALID ENTRY\n");
        }

        if (mode == 'a') {
            // Accelerometer mode
            alt_up_accelerometer_spi_read_x_axis(accelerometer, (alt_32*)&xAccel);
 400029c:	400e7c40 	call	400e7c4 <alt_up_accelerometer_spi_read_x_axis>

            alt_u8 raw_xval = (alt_u8)(xAccel % 255);
            alt_u8 xval = ((7 * raw_xval) / 255);
 40002a0:	d9000017 	ldw	r4,0(sp)
 40002a4:	01403fc4 	movi	r5,255
 40002a8:	40009480 	call	4000948 <__umodsi3>
 40002ac:	110001e4 	muli	r4,r2,7
 40002b0:	01403fc4 	movi	r5,255
 40002b4:	40007ec0 	call	40007ec <__divsi3>

            alt_u8 Led_Val = 0x00;

            for (alt_u8 i = 0; i <= xval; i++) {
 40002b8:	0007883a 	mov	r3,zero
 40002bc:	12003fcc 	andi	r8,r2,255
                // Set the (LED) in LED_Vals
            	Led_Val |= (1 << i);
 40002c0:	01c00044 	movi	r7,1
 40002c4:	19003fcc 	andi	r4,r3,255
 40002c8:	3908983a 	sll	r4,r7,r4
            alt_u8 raw_xval = (alt_u8)(xAccel % 255);
            alt_u8 xval = ((7 * raw_xval) / 255);

            alt_u8 Led_Val = 0x00;

            for (alt_u8 i = 0; i <= xval; i++) {
 40002cc:	18c00044 	addi	r3,r3,1
 40002d0:	19803fcc 	andi	r6,r3,255
                // Set the (LED) in LED_Vals
            	Led_Val |= (1 << i);
 40002d4:	2420b03a 	or	r16,r4,r16
            alt_u8 raw_xval = (alt_u8)(xAccel % 255);
            alt_u8 xval = ((7 * raw_xval) / 255);

            alt_u8 Led_Val = 0x00;

            for (alt_u8 i = 0; i <= xval; i++) {
 40002d8:	41bffa2e 	bgeu	r8,r6,40002c4 <__ram_exceptions_end+0xfabfc138>
                // Set the (LED) in LED_Vals
            	Led_Val |= (1 << i);
            }

            printf("x = %u\n", xval);
 40002dc:	01010074 	movhi	r4,1025
 40002e0:	100b883a 	mov	r5,r2
 40002e4:	213e0904 	addi	r4,r4,-2012
 40002e8:	40009d00 	call	40009d0 <printf>

            update_led(Led_Val);
 40002ec:	81003fcc 	andi	r4,r16,255
 40002f0:	04801844 	movi	r18,97
 40002f4:	40007b80 	call	40007b8 <update_led>
            delay_wait();
 40002f8:	40006240 	call	4000624 <delay_wait>
 40002fc:	003fce06 	br	4000238 <__ram_exceptions_end+0xfabfc0ac>
            mode = 'a'; // Switch to accelerometer mode
            alt_printf("Switched to accelerometer mode\n");
            init_accel();
        } else if (input == 'b') {
            mode = 'b'; // Switch to binary counter mode
            alt_printf("Switched to binary counter mode\n");
 4000300:	01010074 	movhi	r4,1025
 4000304:	213dfc04 	addi	r4,r4,-2064
 4000308:	400d46c0 	call	400d46c <alt_printf>

        } else if (mode == 'b') {
            // Binary counter mode
        	// declare the local variables need in main()

        	alt_printf("\nled_control program starting...\n\n");
 400030c:	01010074 	movhi	r4,1025
 4000310:	213dc604 	addi	r4,r4,-2280
 4000314:	400d46c0 	call	400d46c <alt_printf>
        	alt_printf("\nPress 'u' to count up by one\n");
 4000318:	01010074 	movhi	r4,1025
 400031c:	213e0b04 	addi	r4,r4,-2004
 4000320:	400d46c0 	call	400d46c <alt_printf>
        	alt_printf("Press 'd' to count down by one\n");
 4000324:	01010074 	movhi	r4,1025
 4000328:	213e1304 	addi	r4,r4,-1972
 400032c:	400d46c0 	call	400d46c <alt_printf>
        	alt_printf("Press '3' to count up by threes\n");
 4000330:	01010074 	movhi	r4,1025
 4000334:	213e1b04 	addi	r4,r4,-1940
 4000338:	400d46c0 	call	400d46c <alt_printf>
        	alt_printf("Press 'q' to count up by fives\n");
 400033c:	01010074 	movhi	r4,1025
 4000340:	213e2404 	addi	r4,r4,-1904
 4000344:	400d46c0 	call	400d46c <alt_printf>
        	alt_printf("Press 'w' to count down by tens\n");
 4000348:	01010074 	movhi	r4,1025
 400034c:	213e2c04 	addi	r4,r4,-1872
 4000350:	400d46c0 	call	400d46c <alt_printf>
        	input = alt_getchar();
 4000354:	400d1f40 	call	400d1f4 <alt_getchar>
 4000358:	1021883a 	mov	r16,r2
        	alt_getchar();
        	alt_printf("You selected: '%c'\n",input);
 400035c:	84003fcc 	andi	r16,r16,255
        	alt_printf("Press 'd' to count down by one\n");
        	alt_printf("Press '3' to count up by threes\n");
        	alt_printf("Press 'q' to count up by fives\n");
        	alt_printf("Press 'w' to count down by tens\n");
        	input = alt_getchar();
        	alt_getchar();
 4000360:	400d1f40 	call	400d1f4 <alt_getchar>
        	alt_printf("You selected: '%c'\n",input);
 4000364:	8400201c 	xori	r16,r16,128
 4000368:	01010074 	movhi	r4,1025
 400036c:	843fe004 	addi	r16,r16,-128
 4000370:	213def04 	addi	r4,r4,-2116
 4000374:	800b883a 	mov	r5,r16
 4000378:	400d46c0 	call	400d46c <alt_printf>
        	if (input == 'u') {
 400037c:	00801d44 	movi	r2,117
 4000380:	80803a26 	beq	r16,r2,400046c <main+0x278>
        	dir = 1;
        	binary_count = 0;
        	alt_printf(" - counting up by 1\n");
        	}
        	else if (input == 'd') {
 4000384:	00801904 	movi	r2,100
 4000388:	80803f26 	beq	r16,r2,4000488 <main+0x294>
        	dir = -1;
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 1\n");
        	}
        	else if (input == 'w') {
 400038c:	00801dc4 	movi	r2,119
 4000390:	80804426 	beq	r16,r2,40004a4 <main+0x2b0>
        	dir = -10;
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 10\n");
        	}
        	else if (input == '3') {
 4000394:	00800cc4 	movi	r2,51
 4000398:	80804926 	beq	r16,r2,40004c0 <main+0x2cc>
        	dir = 3;
        	binary_count = 0;
        	alt_printf(" - counting up by 3\n");
        	}
        	else if (input == 'q') {
 400039c:	00801c44 	movi	r2,113
 40003a0:	80802b26 	beq	r16,r2,4000450 <main+0x25c>
        	alt_printf(" - counting up by 5\n");
        	}
        	else {
        	dir = 1;
        	binary_count = MAX_COUNT;
        	alt_printf("INVALID ENTRY");
 40003a4:	01010074 	movhi	r4,1025
 40003a8:	213e5304 	addi	r4,r4,-1716
 40003ac:	04403fc4 	movi	r17,255
        	dir = 5;
        	binary_count = 0;
        	alt_printf(" - counting up by 5\n");
        	}
        	else {
        	dir = 1;
 40003b0:	04800044 	movi	r18,1
        	binary_count = MAX_COUNT;
        	alt_printf("INVALID ENTRY");
 40003b4:	400d46c0 	call	400d46c <alt_printf>
        	binary_count = 0;
        	alt_printf(" - counting up by 5\n");
        	}
        	else {
        	dir = 1;
        	binary_count = MAX_COUNT;
 40003b8:	043fffc4 	movi	r16,-1
        	}
        	// initialize the line wrap count variable
        	PRINT_STDIO_WRAP_COUNT = 0;

        	// print the binary count out the STDOUT
        	print_binary_count_stdio(binary_count); // see src/jtag_uart_util.c
 40003bc:	8809883a 	mov	r4,r17
        	dir = 1;
        	binary_count = MAX_COUNT;
        	alt_printf("INVALID ENTRY");
        	}
        	// initialize the line wrap count variable
        	PRINT_STDIO_WRAP_COUNT = 0;
 40003c0:	d0233115 	stw	zero,-29500(gp)

        	// print the binary count out the STDOUT
        	print_binary_count_stdio(binary_count); // see src/jtag_uart_util.c
 40003c4:	400075c0 	call	400075c <print_binary_count_stdio>
        	// update the green led display with the binary count
        	update_led(binary_count); // see src/led_util.c
 40003c8:	8809883a 	mov	r4,r17
 40003cc:	40007b80 	call	40007b8 <update_led>
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
        	// count until we reach all the maximum count
        	while( (binary_count < MAX_COUNT && dir > 0) || (binary_count > 0 && dir < 0) )
 40003d0:	04c03fc4 	movi	r19,255
        	// print the binary count out the STDOUT
        	print_binary_count_stdio(binary_count); // see src/jtag_uart_util.c
        	// update the green led display with the binary count
        	update_led(binary_count); // see src/led_util.c
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
 40003d4:	40006240 	call	4000624 <delay_wait>
        	// count until we reach all the maximum count
        	while( (binary_count < MAX_COUNT && dir > 0) || (binary_count > 0 && dir < 0) )
        	{
        	if ((dir == -10) && (binary_count) < 0xA)
 40003d8:	057ffd84 	movi	r21,-10
 40003dc:	05000244 	movi	r20,9
        	// update the green led display with the binary count
        	update_led(binary_count); // see src/led_util.c
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
        	// count until we reach all the maximum count
        	while( (binary_count < MAX_COUNT && dir > 0) || (binary_count > 0 && dir < 0) )
 40003e0:	00000506 	br	40003f8 <main+0x204>
 40003e4:	0480130e 	bge	zero,r18,4000434 <main+0x240>
        	break;
        	}
        	// increment the binary counter
        	binary_count= binary_count + dir;
        	// print the binary count out the STDOUT
        	print_binary_count_stdio(binary_count); // see src/jtag_uart_util.c
 40003e8:	400075c0 	call	400075c <print_binary_count_stdio>
        	// update the green led display with the binary count
        	update_led(binary_count); // see src/led_util.c
 40003ec:	8809883a 	mov	r4,r17
 40003f0:	40007b80 	call	40007b8 <update_led>
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
 40003f4:	40006240 	call	4000624 <delay_wait>
 40003f8:	9405883a 	add	r2,r18,r16
        	break;
        	}
        	// increment the binary counter
        	binary_count= binary_count + dir;
        	// print the binary count out the STDOUT
        	print_binary_count_stdio(binary_count); // see src/jtag_uart_util.c
 40003fc:	14403fcc 	andi	r17,r2,255
        	// update the green led display with the binary count
        	update_led(binary_count); // see src/led_util.c
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
        	// count until we reach all the maximum count
        	while( (binary_count < MAX_COUNT && dir > 0) || (binary_count > 0 && dir < 0) )
 4000400:	80c03fcc 	andi	r3,r16,255
        	break;
        	}
        	// increment the binary counter
        	binary_count= binary_count + dir;
        	// print the binary count out the STDOUT
        	print_binary_count_stdio(binary_count); // see src/jtag_uart_util.c
 4000404:	8809883a 	mov	r4,r17
 4000408:	1021883a 	mov	r16,r2
        	// update the green led display with the binary count
        	update_led(binary_count); // see src/led_util.c
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
        	// count until we reach all the maximum count
        	while( (binary_count < MAX_COUNT && dir > 0) || (binary_count > 0 && dir < 0) )
 400040c:	1cfff51e 	bne	r3,r19,40003e4 <__ram_exceptions_end+0xfabfc258>
 4000410:	9000020e 	bge	r18,zero,400041c <main+0x228>
        	{
        	if ((dir == -10) && (binary_count) < 0xA)
 4000414:	957ff41e 	bne	r18,r21,40003e8 <__ram_exceptions_end+0xfabfc25c>
 4000418:	a0fff336 	bltu	r20,r3,40003e8 <__ram_exceptions_end+0xfabfc25c>
        	update_led(binary_count); // see src/led_util.c
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
        	}
        	// announce loop completion on STDOUT and the UART
        	alt_printf("\n\n LED control program completed its loop ...\n\n");
 400041c:	01010074 	movhi	r4,1025
 4000420:	213e5704 	addi	r4,r4,-1700
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
 4000424:	04801884 	movi	r18,98
        	update_led(binary_count); // see src/led_util.c
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
        	}
        	// announce loop completion on STDOUT and the UART
        	alt_printf("\n\n LED control program completed its loop ...\n\n");
 4000428:	400d46c0 	call	400d46c <alt_printf>
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
 400042c:	40006240 	call	4000624 <delay_wait>
 4000430:	003f8106 	br	4000238 <__ram_exceptions_end+0xfabfc0ac>
        	// update the green led display with the binary count
        	update_led(binary_count); // see src/led_util.c
        	// wait for the delay period
        	delay_wait(); // see src/delay_wait.c
        	// count until we reach all the maximum count
        	while( (binary_count < MAX_COUNT && dir > 0) || (binary_count > 0 && dir < 0) )
 4000434:	183ff61e 	bne	r3,zero,4000410 <__ram_exceptions_end+0xfabfc284>
 4000438:	003ff806 	br	400041c <__ram_exceptions_end+0xfabfc290>
        alt_getchar();
        alt_printf("You selected: '%c'\n", input);

        if (input == 'a') {
            mode = 'a'; // Switch to accelerometer mode
            alt_printf("Switched to accelerometer mode\n");
 400043c:	01010074 	movhi	r4,1025
 4000440:	213df404 	addi	r4,r4,-2096
 4000444:	400d46c0 	call	400d46c <alt_printf>
            init_accel();
 4000448:	40001b80 	call	40001b8 <init_accel>
 400044c:	003f9006 	br	4000290 <__ram_exceptions_end+0xfabfc104>
        	alt_printf(" - counting up by 3\n");
        	}
        	else if (input == 'q') {
        	dir = 5;
        	binary_count = 0;
        	alt_printf(" - counting up by 5\n");
 4000450:	01010074 	movhi	r4,1025
 4000454:	213e4d04 	addi	r4,r4,-1740
 4000458:	0023883a 	mov	r17,zero
        	dir = 3;
        	binary_count = 0;
        	alt_printf(" - counting up by 3\n");
        	}
        	else if (input == 'q') {
        	dir = 5;
 400045c:	04800144 	movi	r18,5
        	binary_count = 0;
        	alt_printf(" - counting up by 5\n");
 4000460:	400d46c0 	call	400d46c <alt_printf>
        	binary_count = 0;
        	alt_printf(" - counting up by 3\n");
        	}
        	else if (input == 'q') {
        	dir = 5;
        	binary_count = 0;
 4000464:	0021883a 	mov	r16,zero
 4000468:	003fd406 	br	40003bc <__ram_exceptions_end+0xfabfc230>
        	alt_getchar();
        	alt_printf("You selected: '%c'\n",input);
        	if (input == 'u') {
        	dir = 1;
        	binary_count = 0;
        	alt_printf(" - counting up by 1\n");
 400046c:	01010074 	movhi	r4,1025
 4000470:	213e3504 	addi	r4,r4,-1836
 4000474:	0023883a 	mov	r17,zero
        	alt_printf("Press 'w' to count down by tens\n");
        	input = alt_getchar();
        	alt_getchar();
        	alt_printf("You selected: '%c'\n",input);
        	if (input == 'u') {
        	dir = 1;
 4000478:	04800044 	movi	r18,1
        	binary_count = 0;
        	alt_printf(" - counting up by 1\n");
 400047c:	400d46c0 	call	400d46c <alt_printf>
        	input = alt_getchar();
        	alt_getchar();
        	alt_printf("You selected: '%c'\n",input);
        	if (input == 'u') {
        	dir = 1;
        	binary_count = 0;
 4000480:	0021883a 	mov	r16,zero
 4000484:	003fcd06 	br	40003bc <__ram_exceptions_end+0xfabfc230>
        	alt_printf(" - counting up by 1\n");
        	}
        	else if (input == 'd') {
        	dir = -1;
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 1\n");
 4000488:	01010074 	movhi	r4,1025
 400048c:	213e3b04 	addi	r4,r4,-1812
        	dir = 1;
        	binary_count = 0;
        	alt_printf(" - counting up by 1\n");
        	}
        	else if (input == 'd') {
        	dir = -1;
 4000490:	04bfffc4 	movi	r18,-1
 4000494:	04403fc4 	movi	r17,255
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 1\n");
 4000498:	400d46c0 	call	400d46c <alt_printf>
        	binary_count = 0;
        	alt_printf(" - counting up by 1\n");
        	}
        	else if (input == 'd') {
        	dir = -1;
        	binary_count = MAX_COUNT;
 400049c:	9021883a 	mov	r16,r18
 40004a0:	003fc606 	br	40003bc <__ram_exceptions_end+0xfabfc230>
        	alt_printf(" - counting down by 1\n");
        	}
        	else if (input == 'w') {
        	dir = -10;
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 10\n");
 40004a4:	01010074 	movhi	r4,1025
 40004a8:	213e4104 	addi	r4,r4,-1788
 40004ac:	04403fc4 	movi	r17,255
        	dir = -1;
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 1\n");
        	}
        	else if (input == 'w') {
        	dir = -10;
 40004b0:	04bffd84 	movi	r18,-10
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 10\n");
 40004b4:	400d46c0 	call	400d46c <alt_printf>
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 1\n");
        	}
        	else if (input == 'w') {
        	dir = -10;
        	binary_count = MAX_COUNT;
 40004b8:	043fffc4 	movi	r16,-1
 40004bc:	003fbf06 	br	40003bc <__ram_exceptions_end+0xfabfc230>
        	alt_printf(" - counting down by 10\n");
        	}
        	else if (input == '3') {
        	dir = 3;
        	binary_count = 0;
        	alt_printf(" - counting up by 3\n");
 40004c0:	01010074 	movhi	r4,1025
 40004c4:	213e4704 	addi	r4,r4,-1764
 40004c8:	0023883a 	mov	r17,zero
        	dir = -10;
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 10\n");
        	}
        	else if (input == '3') {
        	dir = 3;
 40004cc:	048000c4 	movi	r18,3
        	binary_count = 0;
        	alt_printf(" - counting up by 3\n");
 40004d0:	400d46c0 	call	400d46c <alt_printf>
        	binary_count = MAX_COUNT;
        	alt_printf(" - counting down by 10\n");
        	}
        	else if (input == '3') {
        	dir = 3;
        	binary_count = 0;
 40004d4:	0021883a 	mov	r16,zero
 40004d8:	003fb806 	br	40003bc <__ram_exceptions_end+0xfabfc230>

040004dc <my_alarm_callback>:

    // cast the context pointer into our alarm context structure pointer
    my_alarm_context = context;

    // increment the alarm count
    my_alarm_context->alarm_count++;
 40004dc:	20800117 	ldw	r2,4(r4)
 40004e0:	10800044 	addi	r2,r2,1
 40004e4:	20800115 	stw	r2,4(r4)

    // return the timeout value for this alarm
    return (my_alarm_context->alarm_timeout);
 40004e8:	20800017 	ldw	r2,0(r4)
}
 40004ec:	f800283a 	ret

040004f0 <alarm_init>:
void alarm_init(void)
{
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
 40004f0:	d0a33e17 	ldw	r2,-29448(gp)
    ALARM_250MS_CONTEXT.alarm_count = 0;
    return_result = alt_alarm_start (
 40004f4:	01810034 	movhi	r6,1024
 40004f8:	01010074 	movhi	r4,1025
void alarm_init(void)
{
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
 40004fc:	1004d0ba 	srli	r2,r2,2
alt_alarm ALARM_1MS;
MY_ALARM_STRUCT ALARM_1MS_CONTEXT;

// main() should call this initialization routine when it starts to get the alarms running
void alarm_init(void)
{
 4000500:	deffff04 	addi	sp,sp,-4
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
    ALARM_250MS_CONTEXT.alarm_count = 0;
    return_result = alt_alarm_start (
 4000504:	31813704 	addi	r6,r6,1244
void alarm_init(void)
{
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
 4000508:	d0a32715 	stw	r2,-29540(gp)
    ALARM_250MS_CONTEXT.alarm_count = 0;
 400050c:	d0232815 	stw	zero,-29536(gp)
    return_result = alt_alarm_start (
 4000510:	d1632717 	ldw	r5,-29540(gp)
 4000514:	2105ba04 	addi	r4,r4,5864
 4000518:	d1e32704 	addi	r7,gp,-29540
alt_alarm ALARM_1MS;
MY_ALARM_STRUCT ALARM_1MS_CONTEXT;

// main() should call this initialization routine when it starts to get the alarms running
void alarm_init(void)
{
 400051c:	dfc00015 	stw	ra,0(sp)
    int return_result;

    // initialize the context structure for the 250ms alarm and start it running
    ALARM_250MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/4;
    ALARM_250MS_CONTEXT.alarm_count = 0;
    return_result = alt_alarm_start (
 4000520:	400d0380 	call	400d038 <alt_alarm_start>
                        ALARM_250MS_CONTEXT.alarm_timeout,  //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_250MS_CONTEXT)       //void* context
                    );

    if(return_result)
 4000524:	10003a1e 	bne	r2,zero,4000610 <alarm_init+0x120>
        alt_printf("\n\nError when starting 250ms alarm...\n");
        error_loop();
    }

    // initialize the context structure for the 100ms alarm and start it running
    ALARM_100MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/10;
 4000528:	d1233e17 	ldw	r4,-29448(gp)
 400052c:	01400284 	movi	r5,10
 4000530:	40008e40 	call	40008e4 <__udivsi3>
 4000534:	d0a32915 	stw	r2,-29532(gp)
    ALARM_100MS_CONTEXT.alarm_count = 0;
 4000538:	d0232a15 	stw	zero,-29528(gp)
    return_result = alt_alarm_start (
 400053c:	d1632917 	ldw	r5,-29532(gp)
 4000540:	01810034 	movhi	r6,1024
 4000544:	01010074 	movhi	r4,1025
 4000548:	31813704 	addi	r6,r6,1244
 400054c:	2105ae04 	addi	r4,r4,5816
 4000550:	d1e32904 	addi	r7,gp,-29532
 4000554:	400d0380 	call	400d038 <alt_alarm_start>
                        ALARM_100MS_CONTEXT.alarm_timeout,  //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_100MS_CONTEXT)       //void* context
                    );

    if(return_result)
 4000558:	1000281e 	bne	r2,zero,40005fc <alarm_init+0x10c>
        alt_printf("\n\nError when starting 100ms alarm...\n");
        error_loop();
    }

    // initialize the context structure for the 10ms alarm and start it running
    ALARM_10MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/100;
 400055c:	d1233e17 	ldw	r4,-29448(gp)
 4000560:	01401904 	movi	r5,100
 4000564:	40008e40 	call	40008e4 <__udivsi3>
 4000568:	d0a32b15 	stw	r2,-29524(gp)
    ALARM_10MS_CONTEXT.alarm_count = 0;
 400056c:	d0232c15 	stw	zero,-29520(gp)
    return_result = alt_alarm_start (
 4000570:	d1632b17 	ldw	r5,-29524(gp)
 4000574:	01810034 	movhi	r6,1024
 4000578:	01010074 	movhi	r4,1025
 400057c:	31813704 	addi	r6,r6,1244
 4000580:	2105c004 	addi	r4,r4,5888
 4000584:	d1e32b04 	addi	r7,gp,-29524
 4000588:	400d0380 	call	400d038 <alt_alarm_start>
                        ALARM_10MS_CONTEXT.alarm_timeout,   //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_10MS_CONTEXT)        //void* context
                    );

    if(return_result)
 400058c:	1000161e 	bne	r2,zero,40005e8 <alarm_init+0xf8>
        alt_printf("\n\nError when starting 10ms alarm...\n");
        error_loop();
    }

    // initialize the context structure for the 1ms alarm and start it running
    ALARM_1MS_CONTEXT.alarm_timeout = alt_ticks_per_second()/1000;
 4000590:	d1233e17 	ldw	r4,-29448(gp)
 4000594:	0140fa04 	movi	r5,1000
 4000598:	40008e40 	call	40008e4 <__udivsi3>
 400059c:	d0a32d15 	stw	r2,-29516(gp)
    ALARM_1MS_CONTEXT.alarm_count = 0;
 40005a0:	d0232e15 	stw	zero,-29512(gp)
    return_result = alt_alarm_start (
 40005a4:	d1632d17 	ldw	r5,-29516(gp)
 40005a8:	01810034 	movhi	r6,1024
 40005ac:	01010074 	movhi	r4,1025
 40005b0:	31813704 	addi	r6,r6,1244
 40005b4:	2105b404 	addi	r4,r4,5840
 40005b8:	d1e32d04 	addi	r7,gp,-29516
 40005bc:	400d0380 	call	400d038 <alt_alarm_start>
                        ALARM_1MS_CONTEXT.alarm_timeout,    //alt_u32 nticks
                        my_alarm_callback,                  //alt_u32 (*callback) (void* context)
                        (void*)(&ALARM_1MS_CONTEXT)         //void* context
                    );

    if(return_result)
 40005c0:	1000031e 	bne	r2,zero,40005d0 <alarm_init+0xe0>
    {
        alt_printf("\n\nError when starting 1ms alarm...\n");
        error_loop();
    }

}
 40005c4:	dfc00017 	ldw	ra,0(sp)
 40005c8:	dec00104 	addi	sp,sp,4
 40005cc:	f800283a 	ret
                        (void*)(&ALARM_1MS_CONTEXT)         //void* context
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 1ms alarm...\n");
 40005d0:	01010074 	movhi	r4,1025
 40005d4:	213e8104 	addi	r4,r4,-1532
 40005d8:	400d46c0 	call	400d46c <alt_printf>
        error_loop();
    }

}
 40005dc:	dfc00017 	ldw	ra,0(sp)
 40005e0:	dec00104 	addi	sp,sp,4
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 1ms alarm...\n");
        error_loop();
 40005e4:	40007381 	jmpi	4000738 <error_loop>
                        (void*)(&ALARM_10MS_CONTEXT)        //void* context
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 10ms alarm...\n");
 40005e8:	01010074 	movhi	r4,1025
 40005ec:	213e7704 	addi	r4,r4,-1572
 40005f0:	400d46c0 	call	400d46c <alt_printf>
        error_loop();
 40005f4:	40007380 	call	4000738 <error_loop>
 40005f8:	003fe506 	br	4000590 <__ram_exceptions_end+0xfabfc404>
                        (void*)(&ALARM_100MS_CONTEXT)       //void* context
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 100ms alarm...\n");
 40005fc:	01010074 	movhi	r4,1025
 4000600:	213e6d04 	addi	r4,r4,-1612
 4000604:	400d46c0 	call	400d46c <alt_printf>
        error_loop();
 4000608:	40007380 	call	4000738 <error_loop>
 400060c:	003fd306 	br	400055c <__ram_exceptions_end+0xfabfc3d0>
                        (void*)(&ALARM_250MS_CONTEXT)       //void* context
                    );

    if(return_result)
    {
        alt_printf("\n\nError when starting 250ms alarm...\n");
 4000610:	01010074 	movhi	r4,1025
 4000614:	213e6304 	addi	r4,r4,-1652
 4000618:	400d46c0 	call	400d46c <alt_printf>
        error_loop();
 400061c:	40007380 	call	4000738 <error_loop>
 4000620:	003fc106 	br	4000528 <__ram_exceptions_end+0xfabfc39c>

04000624 <delay_wait>:
volatile alt_u32 LAST_DELAY = 0;
volatile alt_u8  DELAY_MODE = DELAY_MODE_100MS;

// the main() loop can call this routine to delay based on the current delay mode
void delay_wait(void)
{
 4000624:	defffa04 	addi	sp,sp,-24
 4000628:	dc000015 	stw	r16,0(sp)
    alt_u32 this_delay = LAST_DELAY;
 400062c:	d4232f17 	ldw	r16,-29508(gp)

    if(DELAY_MODE != DELAY_MODE_NONE)
 4000630:	d0a00003 	ldbu	r2,-32768(gp)
volatile alt_u32 LAST_DELAY = 0;
volatile alt_u8  DELAY_MODE = DELAY_MODE_100MS;

// the main() loop can call this routine to delay based on the current delay mode
void delay_wait(void)
{
 4000634:	dfc00515 	stw	ra,20(sp)
 4000638:	dd000415 	stw	r20,16(sp)
 400063c:	dcc00315 	stw	r19,12(sp)
 4000640:	dc800215 	stw	r18,8(sp)
 4000644:	dc400115 	stw	r17,4(sp)
    alt_u32 this_delay = LAST_DELAY;

    if(DELAY_MODE != DELAY_MODE_NONE)
 4000648:	10803fcc 	andi	r2,r2,255
 400064c:	10001326 	beq	r2,zero,400069c <delay_wait+0x78>
    {
        do      // wait until we see the proper delay count increment
        {
            switch(DELAY_MODE)
 4000650:	04400084 	movi	r17,2
 4000654:	048000c4 	movi	r18,3
 4000658:	05000104 	movi	r20,4
 400065c:	04c00044 	movi	r19,1
 4000660:	00000506 	br	4000678 <delay_wait+0x54>
 4000664:	14801c26 	beq	r2,r18,40006d8 <delay_wait+0xb4>
 4000668:	1500161e 	bne	r2,r20,40006c4 <delay_wait+0xa0>
            {
                case(DELAY_MODE_250MS):
                    this_delay = ALARM_250MS_CONTEXT.alarm_count;
 400066c:	d4232817 	ldw	r16,-29536(gp)
                    break;
                default:
                    alt_printf("Error: invalid delay mode detected...\n");
                    error_loop();
            }
        } while(LAST_DELAY == this_delay);
 4000670:	d0a32f17 	ldw	r2,-29508(gp)
 4000674:	8080081e 	bne	r16,r2,4000698 <delay_wait+0x74>

    if(DELAY_MODE != DELAY_MODE_NONE)
    {
        do      // wait until we see the proper delay count increment
        {
            switch(DELAY_MODE)
 4000678:	d0a00003 	ldbu	r2,-32768(gp)
 400067c:	10803fcc 	andi	r2,r2,255
 4000680:	14400e26 	beq	r2,r17,40006bc <delay_wait+0x98>
 4000684:	88bff736 	bltu	r17,r2,4000664 <__ram_exceptions_end+0xfabfc4d8>
 4000688:	14c00e1e 	bne	r2,r19,40006c4 <delay_wait+0xa0>
                    break;
                case(DELAY_MODE_10MS):
                    this_delay = ALARM_10MS_CONTEXT.alarm_count;
                    break;
                case(DELAY_MODE_1MS):
                    this_delay = ALARM_1MS_CONTEXT.alarm_count;
 400068c:	d4232e17 	ldw	r16,-29512(gp)
                    break;
                default:
                    alt_printf("Error: invalid delay mode detected...\n");
                    error_loop();
            }
        } while(LAST_DELAY == this_delay);
 4000690:	d0a32f17 	ldw	r2,-29508(gp)
 4000694:	80bff826 	beq	r16,r2,4000678 <__ram_exceptions_end+0xfabfc4ec>

        LAST_DELAY = this_delay;
 4000698:	d4232f15 	stw	r16,-29508(gp)
    }

}
 400069c:	dfc00517 	ldw	ra,20(sp)
 40006a0:	dd000417 	ldw	r20,16(sp)
 40006a4:	dcc00317 	ldw	r19,12(sp)
 40006a8:	dc800217 	ldw	r18,8(sp)
 40006ac:	dc400117 	ldw	r17,4(sp)
 40006b0:	dc000017 	ldw	r16,0(sp)
 40006b4:	dec00604 	addi	sp,sp,24
 40006b8:	f800283a 	ret
                    break;
                case(DELAY_MODE_100MS):
                    this_delay = ALARM_100MS_CONTEXT.alarm_count;
                    break;
                case(DELAY_MODE_10MS):
                    this_delay = ALARM_10MS_CONTEXT.alarm_count;
 40006bc:	d4232c17 	ldw	r16,-29520(gp)
                    break;
 40006c0:	003feb06 	br	4000670 <__ram_exceptions_end+0xfabfc4e4>
                case(DELAY_MODE_1MS):
                    this_delay = ALARM_1MS_CONTEXT.alarm_count;
                    break;
                default:
                    alt_printf("Error: invalid delay mode detected...\n");
 40006c4:	01010074 	movhi	r4,1025
 40006c8:	213e8a04 	addi	r4,r4,-1496
 40006cc:	400d46c0 	call	400d46c <alt_printf>
                    error_loop();
 40006d0:	40007380 	call	4000738 <error_loop>
 40006d4:	003fe606 	br	4000670 <__ram_exceptions_end+0xfabfc4e4>
            {
                case(DELAY_MODE_250MS):
                    this_delay = ALARM_250MS_CONTEXT.alarm_count;
                    break;
                case(DELAY_MODE_100MS):
                    this_delay = ALARM_100MS_CONTEXT.alarm_count;
 40006d8:	d4232a17 	ldw	r16,-29528(gp)
                    break;
 40006dc:	003fe406 	br	4000670 <__ram_exceptions_end+0xfabfc4e4>

040006e0 <set_delay_mode_250ms>:
}

// these are convenience routines for setting the delay modes
void set_delay_mode_250ms(void)
{
   DELAY_MODE = DELAY_MODE_250MS;
 40006e0:	00800104 	movi	r2,4
 40006e4:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_250MS_CONTEXT.alarm_count;
 40006e8:	d0a32817 	ldw	r2,-29536(gp)
 40006ec:	d0a32f15 	stw	r2,-29508(gp)
 40006f0:	f800283a 	ret

040006f4 <set_delay_mode_100ms>:
}

void set_delay_mode_100ms(void)
{
   DELAY_MODE = DELAY_MODE_100MS;
 40006f4:	008000c4 	movi	r2,3
 40006f8:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_100MS_CONTEXT.alarm_count;
 40006fc:	d0a32a17 	ldw	r2,-29528(gp)
 4000700:	d0a32f15 	stw	r2,-29508(gp)
 4000704:	f800283a 	ret

04000708 <set_delay_mode_10ms>:
}

void set_delay_mode_10ms(void)
{
   DELAY_MODE = DELAY_MODE_10MS;
 4000708:	00800084 	movi	r2,2
 400070c:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_10MS_CONTEXT.alarm_count;
 4000710:	d0a32c17 	ldw	r2,-29520(gp)
 4000714:	d0a32f15 	stw	r2,-29508(gp)
 4000718:	f800283a 	ret

0400071c <set_delay_mode_1ms>:
}

void set_delay_mode_1ms(void)
{
   DELAY_MODE = DELAY_MODE_1MS;
 400071c:	00800044 	movi	r2,1
 4000720:	d0a00005 	stb	r2,-32768(gp)
   LAST_DELAY = ALARM_1MS_CONTEXT.alarm_count;
 4000724:	d0a32e17 	ldw	r2,-29512(gp)
 4000728:	d0a32f15 	stw	r2,-29508(gp)
 400072c:	f800283a 	ret

04000730 <set_delay_mode_none>:
}

void set_delay_mode_none(void)
{
   DELAY_MODE = DELAY_MODE_NONE;
 4000730:	d0200005 	stb	zero,-32768(gp)
 4000734:	f800283a 	ret

04000738 <error_loop>:

// any non-recoverable errors that are detected in the application can jump to here
void error_loop(void)
{
    // indicate that we got into the error loop
    alt_printf("\nError loop entered...\n");
 4000738:	01010074 	movhi	r4,1025

#include "../inc/main_includes.h"

// any non-recoverable errors that are detected in the application can jump to here
void error_loop(void)
{
 400073c:	deffff04 	addi	sp,sp,-4
    // indicate that we got into the error loop
    alt_printf("\nError loop entered...\n");
 4000740:	213e9404 	addi	r4,r4,-1456

#include "../inc/main_includes.h"

// any non-recoverable errors that are detected in the application can jump to here
void error_loop(void)
{
 4000744:	dfc00015 	stw	ra,0(sp)
    // indicate that we got into the error loop
    alt_printf("\nError loop entered...\n");
 4000748:	400d46c0 	call	400d46c <alt_printf>
    alt_printf("\nApplication halted...\n");
 400074c:	01010074 	movhi	r4,1025
 4000750:	213e9a04 	addi	r4,r4,-1432
 4000754:	400d46c0 	call	400d46c <alt_printf>
 4000758:	003fff06 	br	4000758 <__ram_exceptions_end+0xfabfc5cc>

0400075c <print_binary_count_stdio>:

// this routine is called by the main() loop
void print_binary_count_stdio(alt_u16 binary_count)
{
    // print if we aren't masked off
    if(!PRINT_STDIO_MASK)
 400075c:	d0a33017 	ldw	r2,-29504(gp)
 4000760:	10000126 	beq	r2,zero,4000768 <print_binary_count_stdio+0xc>
        {
            alt_printf("\n");
            PRINT_STDIO_WRAP_COUNT = 0;
        }
    }
}
 4000764:	f800283a 	ret
 4000768:	200b883a 	mov	r5,r4
{
    // print if we aren't masked off
    if(!PRINT_STDIO_MASK)
    {
        // print the binary count
        alt_printf("0x%x ", binary_count);
 400076c:	01010074 	movhi	r4,1025
volatile int PRINT_STDIO_WRAP_COUNT = 0;
volatile int PRINT_STDIO_MASK = 0;

// this routine is called by the main() loop
void print_binary_count_stdio(alt_u16 binary_count)
{
 4000770:	deffff04 	addi	sp,sp,-4
    // print if we aren't masked off
    if(!PRINT_STDIO_MASK)
    {
        // print the binary count
        alt_printf("0x%x ", binary_count);
 4000774:	213ea004 	addi	r4,r4,-1408
 4000778:	297fffcc 	andi	r5,r5,65535
volatile int PRINT_STDIO_WRAP_COUNT = 0;
volatile int PRINT_STDIO_MASK = 0;

// this routine is called by the main() loop
void print_binary_count_stdio(alt_u16 binary_count)
{
 400077c:	dfc00015 	stw	ra,0(sp)
    // print if we aren't masked off
    if(!PRINT_STDIO_MASK)
    {
        // print the binary count
        alt_printf("0x%x ", binary_count);
 4000780:	400d46c0 	call	400d46c <alt_printf>

        // print a new line character after every 16 prints
        PRINT_STDIO_WRAP_COUNT++;
 4000784:	d0a33117 	ldw	r2,-29500(gp)
        if(PRINT_STDIO_WRAP_COUNT >= 16)
 4000788:	00c003c4 	movi	r3,15
    {
        // print the binary count
        alt_printf("0x%x ", binary_count);

        // print a new line character after every 16 prints
        PRINT_STDIO_WRAP_COUNT++;
 400078c:	10800044 	addi	r2,r2,1
 4000790:	d0a33115 	stw	r2,-29500(gp)
        if(PRINT_STDIO_WRAP_COUNT >= 16)
 4000794:	d0a33117 	ldw	r2,-29500(gp)
 4000798:	1880040e 	bge	r3,r2,40007ac <print_binary_count_stdio+0x50>
        {
            alt_printf("\n");
 400079c:	01010074 	movhi	r4,1025
 40007a0:	213e7604 	addi	r4,r4,-1576
 40007a4:	400d46c0 	call	400d46c <alt_printf>
            PRINT_STDIO_WRAP_COUNT = 0;
 40007a8:	d0233115 	stw	zero,-29500(gp)
        }
    }
}
 40007ac:	dfc00017 	ldw	ra,0(sp)
 40007b0:	dec00104 	addi	sp,sp,4
 40007b4:	f800283a 	ret

040007b8 <update_led>:

// convenience routine for updating the bank of leds
void update_led(alt_u8 display_value)
{
//display_value = ~(display_value);
LED_STATE = display_value & 0xFF;
 40007b8:	d1233245 	stb	r4,-29495(gp)
LED_STATE &= ~LED_MASK;
 40007bc:	d0a33203 	ldbu	r2,-29496(gp)
 40007c0:	d0e33243 	ldbu	r3,-29495(gp)
 40007c4:	10803fcc 	andi	r2,r2,255
 40007c8:	0084303a 	nor	r2,zero,r2
 40007cc:	10c4703a 	and	r2,r2,r3
 40007d0:	d0a33245 	stb	r2,-29495(gp)
IOWR_ALTERA_AVALON_PIO_DATA(LED_PIO_BASE, LED_STATE);
 40007d4:	d0a33243 	ldbu	r2,-29495(gp)
 40007d8:	00c20034 	movhi	r3,2048
 40007dc:	18c00c04 	addi	r3,r3,48
 40007e0:	10803fcc 	andi	r2,r2,255
 40007e4:	18800035 	stwio	r2,0(r3)
 40007e8:	f800283a 	ret

040007ec <__divsi3>:
 40007ec:	20001b16 	blt	r4,zero,400085c <__divsi3+0x70>
 40007f0:	000f883a 	mov	r7,zero
 40007f4:	28001616 	blt	r5,zero,4000850 <__divsi3+0x64>
 40007f8:	200d883a 	mov	r6,r4
 40007fc:	29001a2e 	bgeu	r5,r4,4000868 <__divsi3+0x7c>
 4000800:	00800804 	movi	r2,32
 4000804:	00c00044 	movi	r3,1
 4000808:	00000106 	br	4000810 <__divsi3+0x24>
 400080c:	10000d26 	beq	r2,zero,4000844 <__divsi3+0x58>
 4000810:	294b883a 	add	r5,r5,r5
 4000814:	10bfffc4 	addi	r2,r2,-1
 4000818:	18c7883a 	add	r3,r3,r3
 400081c:	293ffb36 	bltu	r5,r4,400080c <__ram_exceptions_end+0xfabfc680>
 4000820:	0005883a 	mov	r2,zero
 4000824:	18000726 	beq	r3,zero,4000844 <__divsi3+0x58>
 4000828:	0005883a 	mov	r2,zero
 400082c:	31400236 	bltu	r6,r5,4000838 <__divsi3+0x4c>
 4000830:	314dc83a 	sub	r6,r6,r5
 4000834:	10c4b03a 	or	r2,r2,r3
 4000838:	1806d07a 	srli	r3,r3,1
 400083c:	280ad07a 	srli	r5,r5,1
 4000840:	183ffa1e 	bne	r3,zero,400082c <__ram_exceptions_end+0xfabfc6a0>
 4000844:	38000126 	beq	r7,zero,400084c <__divsi3+0x60>
 4000848:	0085c83a 	sub	r2,zero,r2
 400084c:	f800283a 	ret
 4000850:	014bc83a 	sub	r5,zero,r5
 4000854:	39c0005c 	xori	r7,r7,1
 4000858:	003fe706 	br	40007f8 <__ram_exceptions_end+0xfabfc66c>
 400085c:	0109c83a 	sub	r4,zero,r4
 4000860:	01c00044 	movi	r7,1
 4000864:	003fe306 	br	40007f4 <__ram_exceptions_end+0xfabfc668>
 4000868:	00c00044 	movi	r3,1
 400086c:	003fee06 	br	4000828 <__ram_exceptions_end+0xfabfc69c>

04000870 <__modsi3>:
 4000870:	20001716 	blt	r4,zero,40008d0 <__modsi3+0x60>
 4000874:	000f883a 	mov	r7,zero
 4000878:	2005883a 	mov	r2,r4
 400087c:	28001216 	blt	r5,zero,40008c8 <__modsi3+0x58>
 4000880:	2900162e 	bgeu	r5,r4,40008dc <__modsi3+0x6c>
 4000884:	01800804 	movi	r6,32
 4000888:	00c00044 	movi	r3,1
 400088c:	00000106 	br	4000894 <__modsi3+0x24>
 4000890:	30000a26 	beq	r6,zero,40008bc <__modsi3+0x4c>
 4000894:	294b883a 	add	r5,r5,r5
 4000898:	31bfffc4 	addi	r6,r6,-1
 400089c:	18c7883a 	add	r3,r3,r3
 40008a0:	293ffb36 	bltu	r5,r4,4000890 <__ram_exceptions_end+0xfabfc704>
 40008a4:	18000526 	beq	r3,zero,40008bc <__modsi3+0x4c>
 40008a8:	1806d07a 	srli	r3,r3,1
 40008ac:	11400136 	bltu	r2,r5,40008b4 <__modsi3+0x44>
 40008b0:	1145c83a 	sub	r2,r2,r5
 40008b4:	280ad07a 	srli	r5,r5,1
 40008b8:	183ffb1e 	bne	r3,zero,40008a8 <__ram_exceptions_end+0xfabfc71c>
 40008bc:	38000126 	beq	r7,zero,40008c4 <__modsi3+0x54>
 40008c0:	0085c83a 	sub	r2,zero,r2
 40008c4:	f800283a 	ret
 40008c8:	014bc83a 	sub	r5,zero,r5
 40008cc:	003fec06 	br	4000880 <__ram_exceptions_end+0xfabfc6f4>
 40008d0:	0109c83a 	sub	r4,zero,r4
 40008d4:	01c00044 	movi	r7,1
 40008d8:	003fe706 	br	4000878 <__ram_exceptions_end+0xfabfc6ec>
 40008dc:	00c00044 	movi	r3,1
 40008e0:	003ff106 	br	40008a8 <__ram_exceptions_end+0xfabfc71c>

040008e4 <__udivsi3>:
 40008e4:	200d883a 	mov	r6,r4
 40008e8:	2900152e 	bgeu	r5,r4,4000940 <__udivsi3+0x5c>
 40008ec:	28001416 	blt	r5,zero,4000940 <__udivsi3+0x5c>
 40008f0:	00800804 	movi	r2,32
 40008f4:	00c00044 	movi	r3,1
 40008f8:	00000206 	br	4000904 <__udivsi3+0x20>
 40008fc:	10000e26 	beq	r2,zero,4000938 <__udivsi3+0x54>
 4000900:	28000516 	blt	r5,zero,4000918 <__udivsi3+0x34>
 4000904:	294b883a 	add	r5,r5,r5
 4000908:	10bfffc4 	addi	r2,r2,-1
 400090c:	18c7883a 	add	r3,r3,r3
 4000910:	293ffa36 	bltu	r5,r4,40008fc <__ram_exceptions_end+0xfabfc770>
 4000914:	18000826 	beq	r3,zero,4000938 <__udivsi3+0x54>
 4000918:	0005883a 	mov	r2,zero
 400091c:	31400236 	bltu	r6,r5,4000928 <__udivsi3+0x44>
 4000920:	314dc83a 	sub	r6,r6,r5
 4000924:	10c4b03a 	or	r2,r2,r3
 4000928:	1806d07a 	srli	r3,r3,1
 400092c:	280ad07a 	srli	r5,r5,1
 4000930:	183ffa1e 	bne	r3,zero,400091c <__ram_exceptions_end+0xfabfc790>
 4000934:	f800283a 	ret
 4000938:	0005883a 	mov	r2,zero
 400093c:	f800283a 	ret
 4000940:	00c00044 	movi	r3,1
 4000944:	003ff406 	br	4000918 <__ram_exceptions_end+0xfabfc78c>

04000948 <__umodsi3>:
 4000948:	2005883a 	mov	r2,r4
 400094c:	2900122e 	bgeu	r5,r4,4000998 <__umodsi3+0x50>
 4000950:	28001116 	blt	r5,zero,4000998 <__umodsi3+0x50>
 4000954:	01800804 	movi	r6,32
 4000958:	00c00044 	movi	r3,1
 400095c:	00000206 	br	4000968 <__umodsi3+0x20>
 4000960:	30000c26 	beq	r6,zero,4000994 <__umodsi3+0x4c>
 4000964:	28000516 	blt	r5,zero,400097c <__umodsi3+0x34>
 4000968:	294b883a 	add	r5,r5,r5
 400096c:	31bfffc4 	addi	r6,r6,-1
 4000970:	18c7883a 	add	r3,r3,r3
 4000974:	293ffa36 	bltu	r5,r4,4000960 <__ram_exceptions_end+0xfabfc7d4>
 4000978:	18000626 	beq	r3,zero,4000994 <__umodsi3+0x4c>
 400097c:	1806d07a 	srli	r3,r3,1
 4000980:	11400136 	bltu	r2,r5,4000988 <__umodsi3+0x40>
 4000984:	1145c83a 	sub	r2,r2,r5
 4000988:	280ad07a 	srli	r5,r5,1
 400098c:	183ffb1e 	bne	r3,zero,400097c <__ram_exceptions_end+0xfabfc7f0>
 4000990:	f800283a 	ret
 4000994:	f800283a 	ret
 4000998:	00c00044 	movi	r3,1
 400099c:	003ff706 	br	400097c <__ram_exceptions_end+0xfabfc7f0>

040009a0 <_printf_r>:
 40009a0:	defffd04 	addi	sp,sp,-12
 40009a4:	2805883a 	mov	r2,r5
 40009a8:	dfc00015 	stw	ra,0(sp)
 40009ac:	d9800115 	stw	r6,4(sp)
 40009b0:	d9c00215 	stw	r7,8(sp)
 40009b4:	21400217 	ldw	r5,8(r4)
 40009b8:	d9c00104 	addi	r7,sp,4
 40009bc:	100d883a 	mov	r6,r2
 40009c0:	4000a0c0 	call	4000a0c <___vfprintf_internal_r>
 40009c4:	dfc00017 	ldw	ra,0(sp)
 40009c8:	dec00304 	addi	sp,sp,12
 40009cc:	f800283a 	ret

040009d0 <printf>:
 40009d0:	defffc04 	addi	sp,sp,-16
 40009d4:	dfc00015 	stw	ra,0(sp)
 40009d8:	d9400115 	stw	r5,4(sp)
 40009dc:	d9800215 	stw	r6,8(sp)
 40009e0:	d9c00315 	stw	r7,12(sp)
 40009e4:	00810074 	movhi	r2,1025
 40009e8:	10826504 	addi	r2,r2,2452
 40009ec:	10800017 	ldw	r2,0(r2)
 40009f0:	200b883a 	mov	r5,r4
 40009f4:	d9800104 	addi	r6,sp,4
 40009f8:	11000217 	ldw	r4,8(r2)
 40009fc:	4002c040 	call	4002c04 <__vfprintf_internal>
 4000a00:	dfc00017 	ldw	ra,0(sp)
 4000a04:	dec00404 	addi	sp,sp,16
 4000a08:	f800283a 	ret

04000a0c <___vfprintf_internal_r>:
 4000a0c:	deffb804 	addi	sp,sp,-288
 4000a10:	dfc04715 	stw	ra,284(sp)
 4000a14:	ddc04515 	stw	r23,276(sp)
 4000a18:	dd404315 	stw	r21,268(sp)
 4000a1c:	d9002c15 	stw	r4,176(sp)
 4000a20:	282f883a 	mov	r23,r5
 4000a24:	302b883a 	mov	r21,r6
 4000a28:	d9c02d15 	stw	r7,180(sp)
 4000a2c:	df004615 	stw	fp,280(sp)
 4000a30:	dd804415 	stw	r22,272(sp)
 4000a34:	dd004215 	stw	r20,264(sp)
 4000a38:	dcc04115 	stw	r19,260(sp)
 4000a3c:	dc804015 	stw	r18,256(sp)
 4000a40:	dc403f15 	stw	r17,252(sp)
 4000a44:	dc003e15 	stw	r16,248(sp)
 4000a48:	40053680 	call	4005368 <_localeconv_r>
 4000a4c:	10800017 	ldw	r2,0(r2)
 4000a50:	1009883a 	mov	r4,r2
 4000a54:	d8803415 	stw	r2,208(sp)
 4000a58:	40073900 	call	4007390 <strlen>
 4000a5c:	d8803715 	stw	r2,220(sp)
 4000a60:	d8802c17 	ldw	r2,176(sp)
 4000a64:	10000226 	beq	r2,zero,4000a70 <___vfprintf_internal_r+0x64>
 4000a68:	10800e17 	ldw	r2,56(r2)
 4000a6c:	1000f926 	beq	r2,zero,4000e54 <___vfprintf_internal_r+0x448>
 4000a70:	b880030b 	ldhu	r2,12(r23)
 4000a74:	10c8000c 	andi	r3,r2,8192
 4000a78:	1800061e 	bne	r3,zero,4000a94 <___vfprintf_internal_r+0x88>
 4000a7c:	b9001917 	ldw	r4,100(r23)
 4000a80:	00f7ffc4 	movi	r3,-8193
 4000a84:	10880014 	ori	r2,r2,8192
 4000a88:	20c6703a 	and	r3,r4,r3
 4000a8c:	b880030d 	sth	r2,12(r23)
 4000a90:	b8c01915 	stw	r3,100(r23)
 4000a94:	10c0020c 	andi	r3,r2,8
 4000a98:	1800c126 	beq	r3,zero,4000da0 <___vfprintf_internal_r+0x394>
 4000a9c:	b8c00417 	ldw	r3,16(r23)
 4000aa0:	1800bf26 	beq	r3,zero,4000da0 <___vfprintf_internal_r+0x394>
 4000aa4:	1080068c 	andi	r2,r2,26
 4000aa8:	00c00284 	movi	r3,10
 4000aac:	10c0c426 	beq	r2,r3,4000dc0 <___vfprintf_internal_r+0x3b4>
 4000ab0:	d8c00404 	addi	r3,sp,16
 4000ab4:	05010074 	movhi	r20,1025
 4000ab8:	d9001e04 	addi	r4,sp,120
 4000abc:	a53eb284 	addi	r20,r20,-1334
 4000ac0:	d8c01e15 	stw	r3,120(sp)
 4000ac4:	d8002015 	stw	zero,128(sp)
 4000ac8:	d8001f15 	stw	zero,124(sp)
 4000acc:	d8003315 	stw	zero,204(sp)
 4000ad0:	d8003615 	stw	zero,216(sp)
 4000ad4:	d8003815 	stw	zero,224(sp)
 4000ad8:	1811883a 	mov	r8,r3
 4000adc:	d8003915 	stw	zero,228(sp)
 4000ae0:	d8003a15 	stw	zero,232(sp)
 4000ae4:	d8002f15 	stw	zero,188(sp)
 4000ae8:	d9002815 	stw	r4,160(sp)
 4000aec:	a8800007 	ldb	r2,0(r21)
 4000af0:	10027b26 	beq	r2,zero,40014e0 <___vfprintf_internal_r+0xad4>
 4000af4:	00c00944 	movi	r3,37
 4000af8:	a821883a 	mov	r16,r21
 4000afc:	10c0021e 	bne	r2,r3,4000b08 <___vfprintf_internal_r+0xfc>
 4000b00:	00001406 	br	4000b54 <___vfprintf_internal_r+0x148>
 4000b04:	10c00326 	beq	r2,r3,4000b14 <___vfprintf_internal_r+0x108>
 4000b08:	84000044 	addi	r16,r16,1
 4000b0c:	80800007 	ldb	r2,0(r16)
 4000b10:	103ffc1e 	bne	r2,zero,4000b04 <__ram_exceptions_end+0xfabfc978>
 4000b14:	8563c83a 	sub	r17,r16,r21
 4000b18:	88000e26 	beq	r17,zero,4000b54 <___vfprintf_internal_r+0x148>
 4000b1c:	d8c02017 	ldw	r3,128(sp)
 4000b20:	d8801f17 	ldw	r2,124(sp)
 4000b24:	45400015 	stw	r21,0(r8)
 4000b28:	1c47883a 	add	r3,r3,r17
 4000b2c:	10800044 	addi	r2,r2,1
 4000b30:	d8c02015 	stw	r3,128(sp)
 4000b34:	44400115 	stw	r17,4(r8)
 4000b38:	d8801f15 	stw	r2,124(sp)
 4000b3c:	00c001c4 	movi	r3,7
 4000b40:	1880a716 	blt	r3,r2,4000de0 <___vfprintf_internal_r+0x3d4>
 4000b44:	42000204 	addi	r8,r8,8
 4000b48:	d9402f17 	ldw	r5,188(sp)
 4000b4c:	2c4b883a 	add	r5,r5,r17
 4000b50:	d9402f15 	stw	r5,188(sp)
 4000b54:	80800007 	ldb	r2,0(r16)
 4000b58:	1000a826 	beq	r2,zero,4000dfc <___vfprintf_internal_r+0x3f0>
 4000b5c:	84400047 	ldb	r17,1(r16)
 4000b60:	00bfffc4 	movi	r2,-1
 4000b64:	85400044 	addi	r21,r16,1
 4000b68:	d8002785 	stb	zero,158(sp)
 4000b6c:	0007883a 	mov	r3,zero
 4000b70:	000f883a 	mov	r7,zero
 4000b74:	d8802915 	stw	r2,164(sp)
 4000b78:	d8003115 	stw	zero,196(sp)
 4000b7c:	0025883a 	mov	r18,zero
 4000b80:	01401604 	movi	r5,88
 4000b84:	01800244 	movi	r6,9
 4000b88:	02800a84 	movi	r10,42
 4000b8c:	02401b04 	movi	r9,108
 4000b90:	ad400044 	addi	r21,r21,1
 4000b94:	88bff804 	addi	r2,r17,-32
 4000b98:	28830436 	bltu	r5,r2,40017ac <___vfprintf_internal_r+0xda0>
 4000b9c:	100490ba 	slli	r2,r2,2
 4000ba0:	01010034 	movhi	r4,1024
 4000ba4:	2102ed04 	addi	r4,r4,2996
 4000ba8:	1105883a 	add	r2,r2,r4
 4000bac:	10800017 	ldw	r2,0(r2)
 4000bb0:	1000683a 	jmp	r2
 4000bb4:	040016cc 	andi	r16,zero,91
 4000bb8:	040017ac 	andhi	r16,zero,94
 4000bbc:	040017ac 	andhi	r16,zero,94
 4000bc0:	040016ec 	andhi	r16,zero,91
 4000bc4:	040017ac 	andhi	r16,zero,94
 4000bc8:	040017ac 	andhi	r16,zero,94
 4000bcc:	040017ac 	andhi	r16,zero,94
 4000bd0:	040017ac 	andhi	r16,zero,94
 4000bd4:	040017ac 	andhi	r16,zero,94
 4000bd8:	040017ac 	andhi	r16,zero,94
 4000bdc:	04000e60 	cmpeqi	r16,zero,57
 4000be0:	04001608 	cmpgei	r16,zero,88
 4000be4:	040017ac 	andhi	r16,zero,94
 4000be8:	04000d28 	cmpgeui	r16,zero,52
 4000bec:	04000e88 	cmpgei	r16,zero,58
 4000bf0:	040017ac 	andhi	r16,zero,94
 4000bf4:	04000ec8 	cmpgei	r16,zero,59
 4000bf8:	04000ed4 	movui	r16,59
 4000bfc:	04000ed4 	movui	r16,59
 4000c00:	04000ed4 	movui	r16,59
 4000c04:	04000ed4 	movui	r16,59
 4000c08:	04000ed4 	movui	r16,59
 4000c0c:	04000ed4 	movui	r16,59
 4000c10:	04000ed4 	movui	r16,59
 4000c14:	04000ed4 	movui	r16,59
 4000c18:	04000ed4 	movui	r16,59
 4000c1c:	040017ac 	andhi	r16,zero,94
 4000c20:	040017ac 	andhi	r16,zero,94
 4000c24:	040017ac 	andhi	r16,zero,94
 4000c28:	040017ac 	andhi	r16,zero,94
 4000c2c:	040017ac 	andhi	r16,zero,94
 4000c30:	040017ac 	andhi	r16,zero,94
 4000c34:	040017ac 	andhi	r16,zero,94
 4000c38:	040017ac 	andhi	r16,zero,94
 4000c3c:	040017ac 	andhi	r16,zero,94
 4000c40:	040017ac 	andhi	r16,zero,94
 4000c44:	04000f08 	cmpgei	r16,zero,60
 4000c48:	04000fc4 	movi	r16,63
 4000c4c:	040017ac 	andhi	r16,zero,94
 4000c50:	04000fc4 	movi	r16,63
 4000c54:	040017ac 	andhi	r16,zero,94
 4000c58:	040017ac 	andhi	r16,zero,94
 4000c5c:	040017ac 	andhi	r16,zero,94
 4000c60:	040017ac 	andhi	r16,zero,94
 4000c64:	04001064 	muli	r16,zero,65
 4000c68:	040017ac 	andhi	r16,zero,94
 4000c6c:	040017ac 	andhi	r16,zero,94
 4000c70:	04001070 	cmpltui	r16,zero,65
 4000c74:	040017ac 	andhi	r16,zero,94
 4000c78:	040017ac 	andhi	r16,zero,94
 4000c7c:	040017ac 	andhi	r16,zero,94
 4000c80:	040017ac 	andhi	r16,zero,94
 4000c84:	040017ac 	andhi	r16,zero,94
 4000c88:	040014e8 	cmpgeui	r16,zero,83
 4000c8c:	040017ac 	andhi	r16,zero,94
 4000c90:	040017ac 	andhi	r16,zero,94
 4000c94:	04001548 	cmpgei	r16,zero,85
 4000c98:	040017ac 	andhi	r16,zero,94
 4000c9c:	040017ac 	andhi	r16,zero,94
 4000ca0:	040017ac 	andhi	r16,zero,94
 4000ca4:	040017ac 	andhi	r16,zero,94
 4000ca8:	040017ac 	andhi	r16,zero,94
 4000cac:	040017ac 	andhi	r16,zero,94
 4000cb0:	040017ac 	andhi	r16,zero,94
 4000cb4:	040017ac 	andhi	r16,zero,94
 4000cb8:	040017ac 	andhi	r16,zero,94
 4000cbc:	040017ac 	andhi	r16,zero,94
 4000cc0:	04001758 	cmpnei	r16,zero,93
 4000cc4:	040016f8 	rdprs	r16,zero,91
 4000cc8:	04000fc4 	movi	r16,63
 4000ccc:	04000fc4 	movi	r16,63
 4000cd0:	04000fc4 	movi	r16,63
 4000cd4:	04001708 	cmpgei	r16,zero,92
 4000cd8:	040016f8 	rdprs	r16,zero,91
 4000cdc:	040017ac 	andhi	r16,zero,94
 4000ce0:	040017ac 	andhi	r16,zero,94
 4000ce4:	04001714 	movui	r16,92
 4000ce8:	040017ac 	andhi	r16,zero,94
 4000cec:	04001724 	muli	r16,zero,92
 4000cf0:	040015f8 	rdprs	r16,zero,87
 4000cf4:	04000d34 	movhi	r16,52
 4000cf8:	04001618 	cmpnei	r16,zero,88
 4000cfc:	040017ac 	andhi	r16,zero,94
 4000d00:	04001624 	muli	r16,zero,88
 4000d04:	040017ac 	andhi	r16,zero,94
 4000d08:	04001680 	call	400168 <__alt_mem_sdram-0x3bffe98>
 4000d0c:	040017ac 	andhi	r16,zero,94
 4000d10:	040017ac 	andhi	r16,zero,94
 4000d14:	04001690 	cmplti	r16,zero,90
 4000d18:	d9003117 	ldw	r4,196(sp)
 4000d1c:	d8802d15 	stw	r2,180(sp)
 4000d20:	0109c83a 	sub	r4,zero,r4
 4000d24:	d9003115 	stw	r4,196(sp)
 4000d28:	94800114 	ori	r18,r18,4
 4000d2c:	ac400007 	ldb	r17,0(r21)
 4000d30:	003f9706 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4000d34:	00800c04 	movi	r2,48
 4000d38:	d9002d17 	ldw	r4,180(sp)
 4000d3c:	d9402917 	ldw	r5,164(sp)
 4000d40:	d8802705 	stb	r2,156(sp)
 4000d44:	00801e04 	movi	r2,120
 4000d48:	d8802745 	stb	r2,157(sp)
 4000d4c:	d8002785 	stb	zero,158(sp)
 4000d50:	20c00104 	addi	r3,r4,4
 4000d54:	24c00017 	ldw	r19,0(r4)
 4000d58:	002d883a 	mov	r22,zero
 4000d5c:	90800094 	ori	r2,r18,2
 4000d60:	28029a16 	blt	r5,zero,40017cc <___vfprintf_internal_r+0xdc0>
 4000d64:	00bfdfc4 	movi	r2,-129
 4000d68:	90a4703a 	and	r18,r18,r2
 4000d6c:	d8c02d15 	stw	r3,180(sp)
 4000d70:	94800094 	ori	r18,r18,2
 4000d74:	9802871e 	bne	r19,zero,4001794 <___vfprintf_internal_r+0xd88>
 4000d78:	00810074 	movhi	r2,1025
 4000d7c:	10beab04 	addi	r2,r2,-1364
 4000d80:	d8803915 	stw	r2,228(sp)
 4000d84:	04401e04 	movi	r17,120
 4000d88:	d8802917 	ldw	r2,164(sp)
 4000d8c:	0039883a 	mov	fp,zero
 4000d90:	1001e926 	beq	r2,zero,4001538 <___vfprintf_internal_r+0xb2c>
 4000d94:	0027883a 	mov	r19,zero
 4000d98:	002d883a 	mov	r22,zero
 4000d9c:	00020506 	br	40015b4 <___vfprintf_internal_r+0xba8>
 4000da0:	d9002c17 	ldw	r4,176(sp)
 4000da4:	b80b883a 	mov	r5,r23
 4000da8:	4002cdc0 	call	4002cdc <__swsetup_r>
 4000dac:	1005ac1e 	bne	r2,zero,4002460 <___vfprintf_internal_r+0x1a54>
 4000db0:	b880030b 	ldhu	r2,12(r23)
 4000db4:	00c00284 	movi	r3,10
 4000db8:	1080068c 	andi	r2,r2,26
 4000dbc:	10ff3c1e 	bne	r2,r3,4000ab0 <__ram_exceptions_end+0xfabfc924>
 4000dc0:	b880038f 	ldh	r2,14(r23)
 4000dc4:	103f3a16 	blt	r2,zero,4000ab0 <__ram_exceptions_end+0xfabfc924>
 4000dc8:	d9c02d17 	ldw	r7,180(sp)
 4000dcc:	d9002c17 	ldw	r4,176(sp)
 4000dd0:	a80d883a 	mov	r6,r21
 4000dd4:	b80b883a 	mov	r5,r23
 4000dd8:	4002c200 	call	4002c20 <__sbprintf>
 4000ddc:	00001106 	br	4000e24 <___vfprintf_internal_r+0x418>
 4000de0:	d9002c17 	ldw	r4,176(sp)
 4000de4:	d9801e04 	addi	r6,sp,120
 4000de8:	b80b883a 	mov	r5,r23
 4000dec:	40075240 	call	4007524 <__sprint_r>
 4000df0:	1000081e 	bne	r2,zero,4000e14 <___vfprintf_internal_r+0x408>
 4000df4:	da000404 	addi	r8,sp,16
 4000df8:	003f5306 	br	4000b48 <__ram_exceptions_end+0xfabfc9bc>
 4000dfc:	d8802017 	ldw	r2,128(sp)
 4000e00:	10000426 	beq	r2,zero,4000e14 <___vfprintf_internal_r+0x408>
 4000e04:	d9002c17 	ldw	r4,176(sp)
 4000e08:	d9801e04 	addi	r6,sp,120
 4000e0c:	b80b883a 	mov	r5,r23
 4000e10:	40075240 	call	4007524 <__sprint_r>
 4000e14:	b880030b 	ldhu	r2,12(r23)
 4000e18:	1080100c 	andi	r2,r2,64
 4000e1c:	1005901e 	bne	r2,zero,4002460 <___vfprintf_internal_r+0x1a54>
 4000e20:	d8802f17 	ldw	r2,188(sp)
 4000e24:	dfc04717 	ldw	ra,284(sp)
 4000e28:	df004617 	ldw	fp,280(sp)
 4000e2c:	ddc04517 	ldw	r23,276(sp)
 4000e30:	dd804417 	ldw	r22,272(sp)
 4000e34:	dd404317 	ldw	r21,268(sp)
 4000e38:	dd004217 	ldw	r20,264(sp)
 4000e3c:	dcc04117 	ldw	r19,260(sp)
 4000e40:	dc804017 	ldw	r18,256(sp)
 4000e44:	dc403f17 	ldw	r17,252(sp)
 4000e48:	dc003e17 	ldw	r16,248(sp)
 4000e4c:	dec04804 	addi	sp,sp,288
 4000e50:	f800283a 	ret
 4000e54:	d9002c17 	ldw	r4,176(sp)
 4000e58:	4004cb00 	call	4004cb0 <__sinit>
 4000e5c:	003f0406 	br	4000a70 <__ram_exceptions_end+0xfabfc8e4>
 4000e60:	d8802d17 	ldw	r2,180(sp)
 4000e64:	d9002d17 	ldw	r4,180(sp)
 4000e68:	10800017 	ldw	r2,0(r2)
 4000e6c:	d8803115 	stw	r2,196(sp)
 4000e70:	20800104 	addi	r2,r4,4
 4000e74:	d9003117 	ldw	r4,196(sp)
 4000e78:	203fa716 	blt	r4,zero,4000d18 <__ram_exceptions_end+0xfabfcb8c>
 4000e7c:	d8802d15 	stw	r2,180(sp)
 4000e80:	ac400007 	ldb	r17,0(r21)
 4000e84:	003f4206 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4000e88:	ac400007 	ldb	r17,0(r21)
 4000e8c:	aac00044 	addi	r11,r21,1
 4000e90:	8a872826 	beq	r17,r10,4002b34 <___vfprintf_internal_r+0x2128>
 4000e94:	88bff404 	addi	r2,r17,-48
 4000e98:	0009883a 	mov	r4,zero
 4000e9c:	30867d36 	bltu	r6,r2,4002894 <___vfprintf_internal_r+0x1e88>
 4000ea0:	5c400007 	ldb	r17,0(r11)
 4000ea4:	210002a4 	muli	r4,r4,10
 4000ea8:	5d400044 	addi	r21,r11,1
 4000eac:	a817883a 	mov	r11,r21
 4000eb0:	2089883a 	add	r4,r4,r2
 4000eb4:	88bff404 	addi	r2,r17,-48
 4000eb8:	30bff92e 	bgeu	r6,r2,4000ea0 <__ram_exceptions_end+0xfabfcd14>
 4000ebc:	2005c916 	blt	r4,zero,40025e4 <___vfprintf_internal_r+0x1bd8>
 4000ec0:	d9002915 	stw	r4,164(sp)
 4000ec4:	003f3306 	br	4000b94 <__ram_exceptions_end+0xfabfca08>
 4000ec8:	94802014 	ori	r18,r18,128
 4000ecc:	ac400007 	ldb	r17,0(r21)
 4000ed0:	003f2f06 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4000ed4:	a809883a 	mov	r4,r21
 4000ed8:	d8003115 	stw	zero,196(sp)
 4000edc:	88bff404 	addi	r2,r17,-48
 4000ee0:	0017883a 	mov	r11,zero
 4000ee4:	24400007 	ldb	r17,0(r4)
 4000ee8:	5ac002a4 	muli	r11,r11,10
 4000eec:	ad400044 	addi	r21,r21,1
 4000ef0:	a809883a 	mov	r4,r21
 4000ef4:	12d7883a 	add	r11,r2,r11
 4000ef8:	88bff404 	addi	r2,r17,-48
 4000efc:	30bff92e 	bgeu	r6,r2,4000ee4 <__ram_exceptions_end+0xfabfcd58>
 4000f00:	dac03115 	stw	r11,196(sp)
 4000f04:	003f2306 	br	4000b94 <__ram_exceptions_end+0xfabfca08>
 4000f08:	18c03fcc 	andi	r3,r3,255
 4000f0c:	18072b1e 	bne	r3,zero,4002bbc <___vfprintf_internal_r+0x21b0>
 4000f10:	94800414 	ori	r18,r18,16
 4000f14:	9080080c 	andi	r2,r18,32
 4000f18:	10037b26 	beq	r2,zero,4001d08 <___vfprintf_internal_r+0x12fc>
 4000f1c:	d9402d17 	ldw	r5,180(sp)
 4000f20:	28800117 	ldw	r2,4(r5)
 4000f24:	2cc00017 	ldw	r19,0(r5)
 4000f28:	29400204 	addi	r5,r5,8
 4000f2c:	d9402d15 	stw	r5,180(sp)
 4000f30:	102d883a 	mov	r22,r2
 4000f34:	10044b16 	blt	r2,zero,4002064 <___vfprintf_internal_r+0x1658>
 4000f38:	d9402917 	ldw	r5,164(sp)
 4000f3c:	df002783 	ldbu	fp,158(sp)
 4000f40:	2803bc16 	blt	r5,zero,4001e34 <___vfprintf_internal_r+0x1428>
 4000f44:	00ffdfc4 	movi	r3,-129
 4000f48:	9d84b03a 	or	r2,r19,r22
 4000f4c:	90e4703a 	and	r18,r18,r3
 4000f50:	10017726 	beq	r2,zero,4001530 <___vfprintf_internal_r+0xb24>
 4000f54:	b0038326 	beq	r22,zero,4001d64 <___vfprintf_internal_r+0x1358>
 4000f58:	dc402a15 	stw	r17,168(sp)
 4000f5c:	dc001e04 	addi	r16,sp,120
 4000f60:	b023883a 	mov	r17,r22
 4000f64:	402d883a 	mov	r22,r8
 4000f68:	9809883a 	mov	r4,r19
 4000f6c:	880b883a 	mov	r5,r17
 4000f70:	01800284 	movi	r6,10
 4000f74:	000f883a 	mov	r7,zero
 4000f78:	400a4980 	call	400a498 <__umoddi3>
 4000f7c:	10800c04 	addi	r2,r2,48
 4000f80:	843fffc4 	addi	r16,r16,-1
 4000f84:	9809883a 	mov	r4,r19
 4000f88:	880b883a 	mov	r5,r17
 4000f8c:	80800005 	stb	r2,0(r16)
 4000f90:	01800284 	movi	r6,10
 4000f94:	000f883a 	mov	r7,zero
 4000f98:	4009f200 	call	4009f20 <__udivdi3>
 4000f9c:	1027883a 	mov	r19,r2
 4000fa0:	10c4b03a 	or	r2,r2,r3
 4000fa4:	1823883a 	mov	r17,r3
 4000fa8:	103fef1e 	bne	r2,zero,4000f68 <__ram_exceptions_end+0xfabfcddc>
 4000fac:	d8c02817 	ldw	r3,160(sp)
 4000fb0:	dc402a17 	ldw	r17,168(sp)
 4000fb4:	b011883a 	mov	r8,r22
 4000fb8:	1c07c83a 	sub	r3,r3,r16
 4000fbc:	d8c02e15 	stw	r3,184(sp)
 4000fc0:	00005906 	br	4001128 <___vfprintf_internal_r+0x71c>
 4000fc4:	18c03fcc 	andi	r3,r3,255
 4000fc8:	1806fa1e 	bne	r3,zero,4002bb4 <___vfprintf_internal_r+0x21a8>
 4000fcc:	9080020c 	andi	r2,r18,8
 4000fd0:	10048a26 	beq	r2,zero,40021fc <___vfprintf_internal_r+0x17f0>
 4000fd4:	d8c02d17 	ldw	r3,180(sp)
 4000fd8:	d9002d17 	ldw	r4,180(sp)
 4000fdc:	d9402d17 	ldw	r5,180(sp)
 4000fe0:	18c00017 	ldw	r3,0(r3)
 4000fe4:	21000117 	ldw	r4,4(r4)
 4000fe8:	29400204 	addi	r5,r5,8
 4000fec:	d8c03615 	stw	r3,216(sp)
 4000ff0:	d9003815 	stw	r4,224(sp)
 4000ff4:	d9402d15 	stw	r5,180(sp)
 4000ff8:	d9003617 	ldw	r4,216(sp)
 4000ffc:	d9403817 	ldw	r5,224(sp)
 4001000:	da003d15 	stw	r8,244(sp)
 4001004:	04000044 	movi	r16,1
 4001008:	40070b00 	call	40070b0 <__fpclassifyd>
 400100c:	da003d17 	ldw	r8,244(sp)
 4001010:	14041f1e 	bne	r2,r16,4002090 <___vfprintf_internal_r+0x1684>
 4001014:	d9003617 	ldw	r4,216(sp)
 4001018:	d9403817 	ldw	r5,224(sp)
 400101c:	000d883a 	mov	r6,zero
 4001020:	000f883a 	mov	r7,zero
 4001024:	400bcc80 	call	400bcc8 <__ledf2>
 4001028:	da003d17 	ldw	r8,244(sp)
 400102c:	1005be16 	blt	r2,zero,4002728 <___vfprintf_internal_r+0x1d1c>
 4001030:	df002783 	ldbu	fp,158(sp)
 4001034:	008011c4 	movi	r2,71
 4001038:	1445330e 	bge	r2,r17,4002508 <___vfprintf_internal_r+0x1afc>
 400103c:	04010074 	movhi	r16,1025
 4001040:	843ea304 	addi	r16,r16,-1396
 4001044:	00c000c4 	movi	r3,3
 4001048:	00bfdfc4 	movi	r2,-129
 400104c:	d8c02a15 	stw	r3,168(sp)
 4001050:	90a4703a 	and	r18,r18,r2
 4001054:	d8c02e15 	stw	r3,184(sp)
 4001058:	d8002915 	stw	zero,164(sp)
 400105c:	d8003215 	stw	zero,200(sp)
 4001060:	00003706 	br	4001140 <___vfprintf_internal_r+0x734>
 4001064:	94800214 	ori	r18,r18,8
 4001068:	ac400007 	ldb	r17,0(r21)
 400106c:	003ec806 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4001070:	18c03fcc 	andi	r3,r3,255
 4001074:	1806db1e 	bne	r3,zero,4002be4 <___vfprintf_internal_r+0x21d8>
 4001078:	94800414 	ori	r18,r18,16
 400107c:	9080080c 	andi	r2,r18,32
 4001080:	1002d826 	beq	r2,zero,4001be4 <___vfprintf_internal_r+0x11d8>
 4001084:	d9402d17 	ldw	r5,180(sp)
 4001088:	d8c02917 	ldw	r3,164(sp)
 400108c:	d8002785 	stb	zero,158(sp)
 4001090:	28800204 	addi	r2,r5,8
 4001094:	2cc00017 	ldw	r19,0(r5)
 4001098:	2d800117 	ldw	r22,4(r5)
 400109c:	18048f16 	blt	r3,zero,40022dc <___vfprintf_internal_r+0x18d0>
 40010a0:	013fdfc4 	movi	r4,-129
 40010a4:	9d86b03a 	or	r3,r19,r22
 40010a8:	d8802d15 	stw	r2,180(sp)
 40010ac:	9124703a 	and	r18,r18,r4
 40010b0:	1802d91e 	bne	r3,zero,4001c18 <___vfprintf_internal_r+0x120c>
 40010b4:	d8c02917 	ldw	r3,164(sp)
 40010b8:	0039883a 	mov	fp,zero
 40010bc:	1805c326 	beq	r3,zero,40027cc <___vfprintf_internal_r+0x1dc0>
 40010c0:	0027883a 	mov	r19,zero
 40010c4:	002d883a 	mov	r22,zero
 40010c8:	dc001e04 	addi	r16,sp,120
 40010cc:	9806d0fa 	srli	r3,r19,3
 40010d0:	b008977a 	slli	r4,r22,29
 40010d4:	b02cd0fa 	srli	r22,r22,3
 40010d8:	9cc001cc 	andi	r19,r19,7
 40010dc:	98800c04 	addi	r2,r19,48
 40010e0:	843fffc4 	addi	r16,r16,-1
 40010e4:	20e6b03a 	or	r19,r4,r3
 40010e8:	80800005 	stb	r2,0(r16)
 40010ec:	9d86b03a 	or	r3,r19,r22
 40010f0:	183ff61e 	bne	r3,zero,40010cc <__ram_exceptions_end+0xfabfcf40>
 40010f4:	90c0004c 	andi	r3,r18,1
 40010f8:	18013b26 	beq	r3,zero,40015e8 <___vfprintf_internal_r+0xbdc>
 40010fc:	10803fcc 	andi	r2,r2,255
 4001100:	1080201c 	xori	r2,r2,128
 4001104:	10bfe004 	addi	r2,r2,-128
 4001108:	00c00c04 	movi	r3,48
 400110c:	10c13626 	beq	r2,r3,40015e8 <___vfprintf_internal_r+0xbdc>
 4001110:	80ffffc5 	stb	r3,-1(r16)
 4001114:	d8c02817 	ldw	r3,160(sp)
 4001118:	80bfffc4 	addi	r2,r16,-1
 400111c:	1021883a 	mov	r16,r2
 4001120:	1887c83a 	sub	r3,r3,r2
 4001124:	d8c02e15 	stw	r3,184(sp)
 4001128:	d8802e17 	ldw	r2,184(sp)
 400112c:	d9002917 	ldw	r4,164(sp)
 4001130:	1100010e 	bge	r2,r4,4001138 <___vfprintf_internal_r+0x72c>
 4001134:	2005883a 	mov	r2,r4
 4001138:	d8802a15 	stw	r2,168(sp)
 400113c:	d8003215 	stw	zero,200(sp)
 4001140:	e7003fcc 	andi	fp,fp,255
 4001144:	e700201c 	xori	fp,fp,128
 4001148:	e73fe004 	addi	fp,fp,-128
 400114c:	e0000326 	beq	fp,zero,400115c <___vfprintf_internal_r+0x750>
 4001150:	d8c02a17 	ldw	r3,168(sp)
 4001154:	18c00044 	addi	r3,r3,1
 4001158:	d8c02a15 	stw	r3,168(sp)
 400115c:	90c0008c 	andi	r3,r18,2
 4001160:	d8c02b15 	stw	r3,172(sp)
 4001164:	18000326 	beq	r3,zero,4001174 <___vfprintf_internal_r+0x768>
 4001168:	d8c02a17 	ldw	r3,168(sp)
 400116c:	18c00084 	addi	r3,r3,2
 4001170:	d8c02a15 	stw	r3,168(sp)
 4001174:	90c0210c 	andi	r3,r18,132
 4001178:	d8c03015 	stw	r3,192(sp)
 400117c:	1801a31e 	bne	r3,zero,400180c <___vfprintf_internal_r+0xe00>
 4001180:	d9003117 	ldw	r4,196(sp)
 4001184:	d8c02a17 	ldw	r3,168(sp)
 4001188:	20e7c83a 	sub	r19,r4,r3
 400118c:	04c19f0e 	bge	zero,r19,400180c <___vfprintf_internal_r+0xe00>
 4001190:	02400404 	movi	r9,16
 4001194:	d8c02017 	ldw	r3,128(sp)
 4001198:	d8801f17 	ldw	r2,124(sp)
 400119c:	4cc50d0e 	bge	r9,r19,40025d4 <___vfprintf_internal_r+0x1bc8>
 40011a0:	01410074 	movhi	r5,1025
 40011a4:	297eb684 	addi	r5,r5,-1318
 40011a8:	dc403b15 	stw	r17,236(sp)
 40011ac:	d9403515 	stw	r5,212(sp)
 40011b0:	9823883a 	mov	r17,r19
 40011b4:	482d883a 	mov	r22,r9
 40011b8:	9027883a 	mov	r19,r18
 40011bc:	070001c4 	movi	fp,7
 40011c0:	8025883a 	mov	r18,r16
 40011c4:	dc002c17 	ldw	r16,176(sp)
 40011c8:	00000306 	br	40011d8 <___vfprintf_internal_r+0x7cc>
 40011cc:	8c7ffc04 	addi	r17,r17,-16
 40011d0:	42000204 	addi	r8,r8,8
 40011d4:	b440130e 	bge	r22,r17,4001224 <___vfprintf_internal_r+0x818>
 40011d8:	01010074 	movhi	r4,1025
 40011dc:	18c00404 	addi	r3,r3,16
 40011e0:	10800044 	addi	r2,r2,1
 40011e4:	213eb684 	addi	r4,r4,-1318
 40011e8:	41000015 	stw	r4,0(r8)
 40011ec:	45800115 	stw	r22,4(r8)
 40011f0:	d8c02015 	stw	r3,128(sp)
 40011f4:	d8801f15 	stw	r2,124(sp)
 40011f8:	e0bff40e 	bge	fp,r2,40011cc <__ram_exceptions_end+0xfabfd040>
 40011fc:	d9801e04 	addi	r6,sp,120
 4001200:	b80b883a 	mov	r5,r23
 4001204:	8009883a 	mov	r4,r16
 4001208:	40075240 	call	4007524 <__sprint_r>
 400120c:	103f011e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001210:	8c7ffc04 	addi	r17,r17,-16
 4001214:	d8c02017 	ldw	r3,128(sp)
 4001218:	d8801f17 	ldw	r2,124(sp)
 400121c:	da000404 	addi	r8,sp,16
 4001220:	b47fed16 	blt	r22,r17,40011d8 <__ram_exceptions_end+0xfabfd04c>
 4001224:	9021883a 	mov	r16,r18
 4001228:	9825883a 	mov	r18,r19
 400122c:	8827883a 	mov	r19,r17
 4001230:	dc403b17 	ldw	r17,236(sp)
 4001234:	d9403517 	ldw	r5,212(sp)
 4001238:	98c7883a 	add	r3,r19,r3
 400123c:	10800044 	addi	r2,r2,1
 4001240:	41400015 	stw	r5,0(r8)
 4001244:	44c00115 	stw	r19,4(r8)
 4001248:	d8c02015 	stw	r3,128(sp)
 400124c:	d8801f15 	stw	r2,124(sp)
 4001250:	010001c4 	movi	r4,7
 4001254:	2082a316 	blt	r4,r2,4001ce4 <___vfprintf_internal_r+0x12d8>
 4001258:	df002787 	ldb	fp,158(sp)
 400125c:	42000204 	addi	r8,r8,8
 4001260:	e0000c26 	beq	fp,zero,4001294 <___vfprintf_internal_r+0x888>
 4001264:	d8801f17 	ldw	r2,124(sp)
 4001268:	d9002784 	addi	r4,sp,158
 400126c:	18c00044 	addi	r3,r3,1
 4001270:	10800044 	addi	r2,r2,1
 4001274:	41000015 	stw	r4,0(r8)
 4001278:	01000044 	movi	r4,1
 400127c:	41000115 	stw	r4,4(r8)
 4001280:	d8c02015 	stw	r3,128(sp)
 4001284:	d8801f15 	stw	r2,124(sp)
 4001288:	010001c4 	movi	r4,7
 400128c:	20823c16 	blt	r4,r2,4001b80 <___vfprintf_internal_r+0x1174>
 4001290:	42000204 	addi	r8,r8,8
 4001294:	d8802b17 	ldw	r2,172(sp)
 4001298:	10000c26 	beq	r2,zero,40012cc <___vfprintf_internal_r+0x8c0>
 400129c:	d8801f17 	ldw	r2,124(sp)
 40012a0:	d9002704 	addi	r4,sp,156
 40012a4:	18c00084 	addi	r3,r3,2
 40012a8:	10800044 	addi	r2,r2,1
 40012ac:	41000015 	stw	r4,0(r8)
 40012b0:	01000084 	movi	r4,2
 40012b4:	41000115 	stw	r4,4(r8)
 40012b8:	d8c02015 	stw	r3,128(sp)
 40012bc:	d8801f15 	stw	r2,124(sp)
 40012c0:	010001c4 	movi	r4,7
 40012c4:	20823616 	blt	r4,r2,4001ba0 <___vfprintf_internal_r+0x1194>
 40012c8:	42000204 	addi	r8,r8,8
 40012cc:	d9003017 	ldw	r4,192(sp)
 40012d0:	00802004 	movi	r2,128
 40012d4:	20819926 	beq	r4,r2,400193c <___vfprintf_internal_r+0xf30>
 40012d8:	d9402917 	ldw	r5,164(sp)
 40012dc:	d8802e17 	ldw	r2,184(sp)
 40012e0:	28adc83a 	sub	r22,r5,r2
 40012e4:	0580310e 	bge	zero,r22,40013ac <___vfprintf_internal_r+0x9a0>
 40012e8:	07000404 	movi	fp,16
 40012ec:	d8801f17 	ldw	r2,124(sp)
 40012f0:	e584140e 	bge	fp,r22,4002344 <___vfprintf_internal_r+0x1938>
 40012f4:	01410074 	movhi	r5,1025
 40012f8:	297eb284 	addi	r5,r5,-1334
 40012fc:	dc402915 	stw	r17,164(sp)
 4001300:	d9402b15 	stw	r5,172(sp)
 4001304:	b023883a 	mov	r17,r22
 4001308:	04c001c4 	movi	r19,7
 400130c:	a82d883a 	mov	r22,r21
 4001310:	902b883a 	mov	r21,r18
 4001314:	8025883a 	mov	r18,r16
 4001318:	dc002c17 	ldw	r16,176(sp)
 400131c:	00000306 	br	400132c <___vfprintf_internal_r+0x920>
 4001320:	8c7ffc04 	addi	r17,r17,-16
 4001324:	42000204 	addi	r8,r8,8
 4001328:	e440110e 	bge	fp,r17,4001370 <___vfprintf_internal_r+0x964>
 400132c:	18c00404 	addi	r3,r3,16
 4001330:	10800044 	addi	r2,r2,1
 4001334:	45000015 	stw	r20,0(r8)
 4001338:	47000115 	stw	fp,4(r8)
 400133c:	d8c02015 	stw	r3,128(sp)
 4001340:	d8801f15 	stw	r2,124(sp)
 4001344:	98bff60e 	bge	r19,r2,4001320 <__ram_exceptions_end+0xfabfd194>
 4001348:	d9801e04 	addi	r6,sp,120
 400134c:	b80b883a 	mov	r5,r23
 4001350:	8009883a 	mov	r4,r16
 4001354:	40075240 	call	4007524 <__sprint_r>
 4001358:	103eae1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 400135c:	8c7ffc04 	addi	r17,r17,-16
 4001360:	d8c02017 	ldw	r3,128(sp)
 4001364:	d8801f17 	ldw	r2,124(sp)
 4001368:	da000404 	addi	r8,sp,16
 400136c:	e47fef16 	blt	fp,r17,400132c <__ram_exceptions_end+0xfabfd1a0>
 4001370:	9021883a 	mov	r16,r18
 4001374:	a825883a 	mov	r18,r21
 4001378:	b02b883a 	mov	r21,r22
 400137c:	882d883a 	mov	r22,r17
 4001380:	dc402917 	ldw	r17,164(sp)
 4001384:	d9002b17 	ldw	r4,172(sp)
 4001388:	1d87883a 	add	r3,r3,r22
 400138c:	10800044 	addi	r2,r2,1
 4001390:	41000015 	stw	r4,0(r8)
 4001394:	45800115 	stw	r22,4(r8)
 4001398:	d8c02015 	stw	r3,128(sp)
 400139c:	d8801f15 	stw	r2,124(sp)
 40013a0:	010001c4 	movi	r4,7
 40013a4:	2081ee16 	blt	r4,r2,4001b60 <___vfprintf_internal_r+0x1154>
 40013a8:	42000204 	addi	r8,r8,8
 40013ac:	9080400c 	andi	r2,r18,256
 40013b0:	1001181e 	bne	r2,zero,4001814 <___vfprintf_internal_r+0xe08>
 40013b4:	d9402e17 	ldw	r5,184(sp)
 40013b8:	d8801f17 	ldw	r2,124(sp)
 40013bc:	44000015 	stw	r16,0(r8)
 40013c0:	1947883a 	add	r3,r3,r5
 40013c4:	10800044 	addi	r2,r2,1
 40013c8:	41400115 	stw	r5,4(r8)
 40013cc:	d8c02015 	stw	r3,128(sp)
 40013d0:	d8801f15 	stw	r2,124(sp)
 40013d4:	010001c4 	movi	r4,7
 40013d8:	2081d316 	blt	r4,r2,4001b28 <___vfprintf_internal_r+0x111c>
 40013dc:	42000204 	addi	r8,r8,8
 40013e0:	9480010c 	andi	r18,r18,4
 40013e4:	90003226 	beq	r18,zero,40014b0 <___vfprintf_internal_r+0xaa4>
 40013e8:	d9403117 	ldw	r5,196(sp)
 40013ec:	d8802a17 	ldw	r2,168(sp)
 40013f0:	28a1c83a 	sub	r16,r5,r2
 40013f4:	04002e0e 	bge	zero,r16,40014b0 <___vfprintf_internal_r+0xaa4>
 40013f8:	04400404 	movi	r17,16
 40013fc:	d8801f17 	ldw	r2,124(sp)
 4001400:	8c04a20e 	bge	r17,r16,400268c <___vfprintf_internal_r+0x1c80>
 4001404:	01410074 	movhi	r5,1025
 4001408:	297eb684 	addi	r5,r5,-1318
 400140c:	d9403515 	stw	r5,212(sp)
 4001410:	048001c4 	movi	r18,7
 4001414:	dcc02c17 	ldw	r19,176(sp)
 4001418:	00000306 	br	4001428 <___vfprintf_internal_r+0xa1c>
 400141c:	843ffc04 	addi	r16,r16,-16
 4001420:	42000204 	addi	r8,r8,8
 4001424:	8c00130e 	bge	r17,r16,4001474 <___vfprintf_internal_r+0xa68>
 4001428:	01010074 	movhi	r4,1025
 400142c:	18c00404 	addi	r3,r3,16
 4001430:	10800044 	addi	r2,r2,1
 4001434:	213eb684 	addi	r4,r4,-1318
 4001438:	41000015 	stw	r4,0(r8)
 400143c:	44400115 	stw	r17,4(r8)
 4001440:	d8c02015 	stw	r3,128(sp)
 4001444:	d8801f15 	stw	r2,124(sp)
 4001448:	90bff40e 	bge	r18,r2,400141c <__ram_exceptions_end+0xfabfd290>
 400144c:	d9801e04 	addi	r6,sp,120
 4001450:	b80b883a 	mov	r5,r23
 4001454:	9809883a 	mov	r4,r19
 4001458:	40075240 	call	4007524 <__sprint_r>
 400145c:	103e6d1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001460:	843ffc04 	addi	r16,r16,-16
 4001464:	d8c02017 	ldw	r3,128(sp)
 4001468:	d8801f17 	ldw	r2,124(sp)
 400146c:	da000404 	addi	r8,sp,16
 4001470:	8c3fed16 	blt	r17,r16,4001428 <__ram_exceptions_end+0xfabfd29c>
 4001474:	d9403517 	ldw	r5,212(sp)
 4001478:	1c07883a 	add	r3,r3,r16
 400147c:	10800044 	addi	r2,r2,1
 4001480:	41400015 	stw	r5,0(r8)
 4001484:	44000115 	stw	r16,4(r8)
 4001488:	d8c02015 	stw	r3,128(sp)
 400148c:	d8801f15 	stw	r2,124(sp)
 4001490:	010001c4 	movi	r4,7
 4001494:	2080060e 	bge	r4,r2,40014b0 <___vfprintf_internal_r+0xaa4>
 4001498:	d9002c17 	ldw	r4,176(sp)
 400149c:	d9801e04 	addi	r6,sp,120
 40014a0:	b80b883a 	mov	r5,r23
 40014a4:	40075240 	call	4007524 <__sprint_r>
 40014a8:	103e5a1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 40014ac:	d8c02017 	ldw	r3,128(sp)
 40014b0:	d8803117 	ldw	r2,196(sp)
 40014b4:	d9002a17 	ldw	r4,168(sp)
 40014b8:	1100010e 	bge	r2,r4,40014c0 <___vfprintf_internal_r+0xab4>
 40014bc:	2005883a 	mov	r2,r4
 40014c0:	d9402f17 	ldw	r5,188(sp)
 40014c4:	288b883a 	add	r5,r5,r2
 40014c8:	d9402f15 	stw	r5,188(sp)
 40014cc:	18019e1e 	bne	r3,zero,4001b48 <___vfprintf_internal_r+0x113c>
 40014d0:	a8800007 	ldb	r2,0(r21)
 40014d4:	d8001f15 	stw	zero,124(sp)
 40014d8:	da000404 	addi	r8,sp,16
 40014dc:	103d851e 	bne	r2,zero,4000af4 <__ram_exceptions_end+0xfabfc968>
 40014e0:	a821883a 	mov	r16,r21
 40014e4:	003d9b06 	br	4000b54 <__ram_exceptions_end+0xfabfc9c8>
 40014e8:	18c03fcc 	andi	r3,r3,255
 40014ec:	1805c11e 	bne	r3,zero,4002bf4 <___vfprintf_internal_r+0x21e8>
 40014f0:	94800414 	ori	r18,r18,16
 40014f4:	9080080c 	andi	r2,r18,32
 40014f8:	10020c26 	beq	r2,zero,4001d2c <___vfprintf_internal_r+0x1320>
 40014fc:	d8802d17 	ldw	r2,180(sp)
 4001500:	d9002917 	ldw	r4,164(sp)
 4001504:	d8002785 	stb	zero,158(sp)
 4001508:	10c00204 	addi	r3,r2,8
 400150c:	14c00017 	ldw	r19,0(r2)
 4001510:	15800117 	ldw	r22,4(r2)
 4001514:	20040f16 	blt	r4,zero,4002554 <___vfprintf_internal_r+0x1b48>
 4001518:	013fdfc4 	movi	r4,-129
 400151c:	9d84b03a 	or	r2,r19,r22
 4001520:	d8c02d15 	stw	r3,180(sp)
 4001524:	9124703a 	and	r18,r18,r4
 4001528:	0039883a 	mov	fp,zero
 400152c:	103e891e 	bne	r2,zero,4000f54 <__ram_exceptions_end+0xfabfcdc8>
 4001530:	d9002917 	ldw	r4,164(sp)
 4001534:	2002c11e 	bne	r4,zero,400203c <___vfprintf_internal_r+0x1630>
 4001538:	d8002915 	stw	zero,164(sp)
 400153c:	d8002e15 	stw	zero,184(sp)
 4001540:	dc001e04 	addi	r16,sp,120
 4001544:	003ef806 	br	4001128 <__ram_exceptions_end+0xfabfcf9c>
 4001548:	18c03fcc 	andi	r3,r3,255
 400154c:	18059d1e 	bne	r3,zero,4002bc4 <___vfprintf_internal_r+0x21b8>
 4001550:	01410074 	movhi	r5,1025
 4001554:	297ea604 	addi	r5,r5,-1384
 4001558:	d9403915 	stw	r5,228(sp)
 400155c:	9080080c 	andi	r2,r18,32
 4001560:	10005226 	beq	r2,zero,40016ac <___vfprintf_internal_r+0xca0>
 4001564:	d8802d17 	ldw	r2,180(sp)
 4001568:	14c00017 	ldw	r19,0(r2)
 400156c:	15800117 	ldw	r22,4(r2)
 4001570:	10800204 	addi	r2,r2,8
 4001574:	d8802d15 	stw	r2,180(sp)
 4001578:	9080004c 	andi	r2,r18,1
 400157c:	10019026 	beq	r2,zero,4001bc0 <___vfprintf_internal_r+0x11b4>
 4001580:	9d84b03a 	or	r2,r19,r22
 4001584:	10036926 	beq	r2,zero,400232c <___vfprintf_internal_r+0x1920>
 4001588:	d8c02917 	ldw	r3,164(sp)
 400158c:	00800c04 	movi	r2,48
 4001590:	d8802705 	stb	r2,156(sp)
 4001594:	dc402745 	stb	r17,157(sp)
 4001598:	d8002785 	stb	zero,158(sp)
 400159c:	90800094 	ori	r2,r18,2
 40015a0:	18045d16 	blt	r3,zero,4002718 <___vfprintf_internal_r+0x1d0c>
 40015a4:	00bfdfc4 	movi	r2,-129
 40015a8:	90a4703a 	and	r18,r18,r2
 40015ac:	94800094 	ori	r18,r18,2
 40015b0:	0039883a 	mov	fp,zero
 40015b4:	d9003917 	ldw	r4,228(sp)
 40015b8:	dc001e04 	addi	r16,sp,120
 40015bc:	988003cc 	andi	r2,r19,15
 40015c0:	b006973a 	slli	r3,r22,28
 40015c4:	2085883a 	add	r2,r4,r2
 40015c8:	9826d13a 	srli	r19,r19,4
 40015cc:	10800003 	ldbu	r2,0(r2)
 40015d0:	b02cd13a 	srli	r22,r22,4
 40015d4:	843fffc4 	addi	r16,r16,-1
 40015d8:	1ce6b03a 	or	r19,r3,r19
 40015dc:	80800005 	stb	r2,0(r16)
 40015e0:	9d84b03a 	or	r2,r19,r22
 40015e4:	103ff51e 	bne	r2,zero,40015bc <__ram_exceptions_end+0xfabfd430>
 40015e8:	d8c02817 	ldw	r3,160(sp)
 40015ec:	1c07c83a 	sub	r3,r3,r16
 40015f0:	d8c02e15 	stw	r3,184(sp)
 40015f4:	003ecc06 	br	4001128 <__ram_exceptions_end+0xfabfcf9c>
 40015f8:	18c03fcc 	andi	r3,r3,255
 40015fc:	183e9f26 	beq	r3,zero,400107c <__ram_exceptions_end+0xfabfcef0>
 4001600:	d9c02785 	stb	r7,158(sp)
 4001604:	003e9d06 	br	400107c <__ram_exceptions_end+0xfabfcef0>
 4001608:	00c00044 	movi	r3,1
 400160c:	01c00ac4 	movi	r7,43
 4001610:	ac400007 	ldb	r17,0(r21)
 4001614:	003d5e06 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4001618:	94800814 	ori	r18,r18,32
 400161c:	ac400007 	ldb	r17,0(r21)
 4001620:	003d5b06 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4001624:	d8c02d17 	ldw	r3,180(sp)
 4001628:	d8002785 	stb	zero,158(sp)
 400162c:	1c000017 	ldw	r16,0(r3)
 4001630:	1cc00104 	addi	r19,r3,4
 4001634:	80041926 	beq	r16,zero,400269c <___vfprintf_internal_r+0x1c90>
 4001638:	d9002917 	ldw	r4,164(sp)
 400163c:	2003d016 	blt	r4,zero,4002580 <___vfprintf_internal_r+0x1b74>
 4001640:	200d883a 	mov	r6,r4
 4001644:	000b883a 	mov	r5,zero
 4001648:	8009883a 	mov	r4,r16
 400164c:	da003d15 	stw	r8,244(sp)
 4001650:	4005d600 	call	4005d60 <memchr>
 4001654:	da003d17 	ldw	r8,244(sp)
 4001658:	10045426 	beq	r2,zero,40027ac <___vfprintf_internal_r+0x1da0>
 400165c:	1405c83a 	sub	r2,r2,r16
 4001660:	d8802e15 	stw	r2,184(sp)
 4001664:	1003cc16 	blt	r2,zero,4002598 <___vfprintf_internal_r+0x1b8c>
 4001668:	df002783 	ldbu	fp,158(sp)
 400166c:	d8802a15 	stw	r2,168(sp)
 4001670:	dcc02d15 	stw	r19,180(sp)
 4001674:	d8002915 	stw	zero,164(sp)
 4001678:	d8003215 	stw	zero,200(sp)
 400167c:	003eb006 	br	4001140 <__ram_exceptions_end+0xfabfcfb4>
 4001680:	18c03fcc 	andi	r3,r3,255
 4001684:	183f9b26 	beq	r3,zero,40014f4 <__ram_exceptions_end+0xfabfd368>
 4001688:	d9c02785 	stb	r7,158(sp)
 400168c:	003f9906 	br	40014f4 <__ram_exceptions_end+0xfabfd368>
 4001690:	18c03fcc 	andi	r3,r3,255
 4001694:	1805551e 	bne	r3,zero,4002bec <___vfprintf_internal_r+0x21e0>
 4001698:	01410074 	movhi	r5,1025
 400169c:	297eab04 	addi	r5,r5,-1364
 40016a0:	d9403915 	stw	r5,228(sp)
 40016a4:	9080080c 	andi	r2,r18,32
 40016a8:	103fae1e 	bne	r2,zero,4001564 <__ram_exceptions_end+0xfabfd3d8>
 40016ac:	9080040c 	andi	r2,r18,16
 40016b0:	1002de26 	beq	r2,zero,400222c <___vfprintf_internal_r+0x1820>
 40016b4:	d8c02d17 	ldw	r3,180(sp)
 40016b8:	002d883a 	mov	r22,zero
 40016bc:	1cc00017 	ldw	r19,0(r3)
 40016c0:	18c00104 	addi	r3,r3,4
 40016c4:	d8c02d15 	stw	r3,180(sp)
 40016c8:	003fab06 	br	4001578 <__ram_exceptions_end+0xfabfd3ec>
 40016cc:	38803fcc 	andi	r2,r7,255
 40016d0:	1080201c 	xori	r2,r2,128
 40016d4:	10bfe004 	addi	r2,r2,-128
 40016d8:	1002d21e 	bne	r2,zero,4002224 <___vfprintf_internal_r+0x1818>
 40016dc:	00c00044 	movi	r3,1
 40016e0:	01c00804 	movi	r7,32
 40016e4:	ac400007 	ldb	r17,0(r21)
 40016e8:	003d2906 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 40016ec:	94800054 	ori	r18,r18,1
 40016f0:	ac400007 	ldb	r17,0(r21)
 40016f4:	003d2606 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 40016f8:	18c03fcc 	andi	r3,r3,255
 40016fc:	183e0526 	beq	r3,zero,4000f14 <__ram_exceptions_end+0xfabfcd88>
 4001700:	d9c02785 	stb	r7,158(sp)
 4001704:	003e0306 	br	4000f14 <__ram_exceptions_end+0xfabfcd88>
 4001708:	94801014 	ori	r18,r18,64
 400170c:	ac400007 	ldb	r17,0(r21)
 4001710:	003d1f06 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4001714:	ac400007 	ldb	r17,0(r21)
 4001718:	8a438726 	beq	r17,r9,4002538 <___vfprintf_internal_r+0x1b2c>
 400171c:	94800414 	ori	r18,r18,16
 4001720:	003d1b06 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4001724:	18c03fcc 	andi	r3,r3,255
 4001728:	1805341e 	bne	r3,zero,4002bfc <___vfprintf_internal_r+0x21f0>
 400172c:	9080080c 	andi	r2,r18,32
 4001730:	1002cd26 	beq	r2,zero,4002268 <___vfprintf_internal_r+0x185c>
 4001734:	d9402d17 	ldw	r5,180(sp)
 4001738:	d9002f17 	ldw	r4,188(sp)
 400173c:	28800017 	ldw	r2,0(r5)
 4001740:	2007d7fa 	srai	r3,r4,31
 4001744:	29400104 	addi	r5,r5,4
 4001748:	d9402d15 	stw	r5,180(sp)
 400174c:	11000015 	stw	r4,0(r2)
 4001750:	10c00115 	stw	r3,4(r2)
 4001754:	003ce506 	br	4000aec <__ram_exceptions_end+0xfabfc960>
 4001758:	d8c02d17 	ldw	r3,180(sp)
 400175c:	d9002d17 	ldw	r4,180(sp)
 4001760:	d8002785 	stb	zero,158(sp)
 4001764:	18800017 	ldw	r2,0(r3)
 4001768:	21000104 	addi	r4,r4,4
 400176c:	00c00044 	movi	r3,1
 4001770:	d8c02a15 	stw	r3,168(sp)
 4001774:	d8801405 	stb	r2,80(sp)
 4001778:	d9002d15 	stw	r4,180(sp)
 400177c:	d8c02e15 	stw	r3,184(sp)
 4001780:	d8002915 	stw	zero,164(sp)
 4001784:	d8003215 	stw	zero,200(sp)
 4001788:	dc001404 	addi	r16,sp,80
 400178c:	0039883a 	mov	fp,zero
 4001790:	003e7206 	br	400115c <__ram_exceptions_end+0xfabfcfd0>
 4001794:	01010074 	movhi	r4,1025
 4001798:	213eab04 	addi	r4,r4,-1364
 400179c:	0039883a 	mov	fp,zero
 40017a0:	d9003915 	stw	r4,228(sp)
 40017a4:	04401e04 	movi	r17,120
 40017a8:	003f8206 	br	40015b4 <__ram_exceptions_end+0xfabfd428>
 40017ac:	18c03fcc 	andi	r3,r3,255
 40017b0:	1805061e 	bne	r3,zero,4002bcc <___vfprintf_internal_r+0x21c0>
 40017b4:	883d9126 	beq	r17,zero,4000dfc <__ram_exceptions_end+0xfabfcc70>
 40017b8:	00c00044 	movi	r3,1
 40017bc:	d8c02a15 	stw	r3,168(sp)
 40017c0:	dc401405 	stb	r17,80(sp)
 40017c4:	d8002785 	stb	zero,158(sp)
 40017c8:	003fec06 	br	400177c <__ram_exceptions_end+0xfabfd5f0>
 40017cc:	01410074 	movhi	r5,1025
 40017d0:	297eab04 	addi	r5,r5,-1364
 40017d4:	d9403915 	stw	r5,228(sp)
 40017d8:	d8c02d15 	stw	r3,180(sp)
 40017dc:	1025883a 	mov	r18,r2
 40017e0:	04401e04 	movi	r17,120
 40017e4:	9d84b03a 	or	r2,r19,r22
 40017e8:	1000fc1e 	bne	r2,zero,4001bdc <___vfprintf_internal_r+0x11d0>
 40017ec:	0039883a 	mov	fp,zero
 40017f0:	00800084 	movi	r2,2
 40017f4:	10803fcc 	andi	r2,r2,255
 40017f8:	00c00044 	movi	r3,1
 40017fc:	10c20f26 	beq	r2,r3,400203c <___vfprintf_internal_r+0x1630>
 4001800:	00c00084 	movi	r3,2
 4001804:	10fd6326 	beq	r2,r3,4000d94 <__ram_exceptions_end+0xfabfcc08>
 4001808:	003e2d06 	br	40010c0 <__ram_exceptions_end+0xfabfcf34>
 400180c:	d8c02017 	ldw	r3,128(sp)
 4001810:	003e9306 	br	4001260 <__ram_exceptions_end+0xfabfd0d4>
 4001814:	00801944 	movi	r2,101
 4001818:	14407e0e 	bge	r2,r17,4001a14 <___vfprintf_internal_r+0x1008>
 400181c:	d9003617 	ldw	r4,216(sp)
 4001820:	d9403817 	ldw	r5,224(sp)
 4001824:	000d883a 	mov	r6,zero
 4001828:	000f883a 	mov	r7,zero
 400182c:	d8c03c15 	stw	r3,240(sp)
 4001830:	da003d15 	stw	r8,244(sp)
 4001834:	400bb640 	call	400bb64 <__eqdf2>
 4001838:	d8c03c17 	ldw	r3,240(sp)
 400183c:	da003d17 	ldw	r8,244(sp)
 4001840:	1000f71e 	bne	r2,zero,4001c20 <___vfprintf_internal_r+0x1214>
 4001844:	d8801f17 	ldw	r2,124(sp)
 4001848:	01010074 	movhi	r4,1025
 400184c:	213eb204 	addi	r4,r4,-1336
 4001850:	18c00044 	addi	r3,r3,1
 4001854:	10800044 	addi	r2,r2,1
 4001858:	41000015 	stw	r4,0(r8)
 400185c:	01000044 	movi	r4,1
 4001860:	41000115 	stw	r4,4(r8)
 4001864:	d8c02015 	stw	r3,128(sp)
 4001868:	d8801f15 	stw	r2,124(sp)
 400186c:	010001c4 	movi	r4,7
 4001870:	2082b816 	blt	r4,r2,4002354 <___vfprintf_internal_r+0x1948>
 4001874:	42000204 	addi	r8,r8,8
 4001878:	d8802617 	ldw	r2,152(sp)
 400187c:	d9403317 	ldw	r5,204(sp)
 4001880:	11400216 	blt	r2,r5,400188c <___vfprintf_internal_r+0xe80>
 4001884:	9080004c 	andi	r2,r18,1
 4001888:	103ed526 	beq	r2,zero,40013e0 <__ram_exceptions_end+0xfabfd254>
 400188c:	d8803717 	ldw	r2,220(sp)
 4001890:	d9003417 	ldw	r4,208(sp)
 4001894:	d9403717 	ldw	r5,220(sp)
 4001898:	1887883a 	add	r3,r3,r2
 400189c:	d8801f17 	ldw	r2,124(sp)
 40018a0:	41000015 	stw	r4,0(r8)
 40018a4:	41400115 	stw	r5,4(r8)
 40018a8:	10800044 	addi	r2,r2,1
 40018ac:	d8c02015 	stw	r3,128(sp)
 40018b0:	d8801f15 	stw	r2,124(sp)
 40018b4:	010001c4 	movi	r4,7
 40018b8:	20832916 	blt	r4,r2,4002560 <___vfprintf_internal_r+0x1b54>
 40018bc:	42000204 	addi	r8,r8,8
 40018c0:	d8803317 	ldw	r2,204(sp)
 40018c4:	143fffc4 	addi	r16,r2,-1
 40018c8:	043ec50e 	bge	zero,r16,40013e0 <__ram_exceptions_end+0xfabfd254>
 40018cc:	04400404 	movi	r17,16
 40018d0:	d8801f17 	ldw	r2,124(sp)
 40018d4:	8c00880e 	bge	r17,r16,4001af8 <___vfprintf_internal_r+0x10ec>
 40018d8:	01410074 	movhi	r5,1025
 40018dc:	297eb284 	addi	r5,r5,-1334
 40018e0:	d9402b15 	stw	r5,172(sp)
 40018e4:	058001c4 	movi	r22,7
 40018e8:	dcc02c17 	ldw	r19,176(sp)
 40018ec:	00000306 	br	40018fc <___vfprintf_internal_r+0xef0>
 40018f0:	42000204 	addi	r8,r8,8
 40018f4:	843ffc04 	addi	r16,r16,-16
 40018f8:	8c00820e 	bge	r17,r16,4001b04 <___vfprintf_internal_r+0x10f8>
 40018fc:	18c00404 	addi	r3,r3,16
 4001900:	10800044 	addi	r2,r2,1
 4001904:	45000015 	stw	r20,0(r8)
 4001908:	44400115 	stw	r17,4(r8)
 400190c:	d8c02015 	stw	r3,128(sp)
 4001910:	d8801f15 	stw	r2,124(sp)
 4001914:	b0bff60e 	bge	r22,r2,40018f0 <__ram_exceptions_end+0xfabfd764>
 4001918:	d9801e04 	addi	r6,sp,120
 400191c:	b80b883a 	mov	r5,r23
 4001920:	9809883a 	mov	r4,r19
 4001924:	40075240 	call	4007524 <__sprint_r>
 4001928:	103d3a1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 400192c:	d8c02017 	ldw	r3,128(sp)
 4001930:	d8801f17 	ldw	r2,124(sp)
 4001934:	da000404 	addi	r8,sp,16
 4001938:	003fee06 	br	40018f4 <__ram_exceptions_end+0xfabfd768>
 400193c:	d9403117 	ldw	r5,196(sp)
 4001940:	d8802a17 	ldw	r2,168(sp)
 4001944:	28adc83a 	sub	r22,r5,r2
 4001948:	05be630e 	bge	zero,r22,40012d8 <__ram_exceptions_end+0xfabfd14c>
 400194c:	07000404 	movi	fp,16
 4001950:	d8801f17 	ldw	r2,124(sp)
 4001954:	e5838f0e 	bge	fp,r22,4002794 <___vfprintf_internal_r+0x1d88>
 4001958:	01410074 	movhi	r5,1025
 400195c:	297eb284 	addi	r5,r5,-1334
 4001960:	dc403015 	stw	r17,192(sp)
 4001964:	d9402b15 	stw	r5,172(sp)
 4001968:	b023883a 	mov	r17,r22
 400196c:	04c001c4 	movi	r19,7
 4001970:	a82d883a 	mov	r22,r21
 4001974:	902b883a 	mov	r21,r18
 4001978:	8025883a 	mov	r18,r16
 400197c:	dc002c17 	ldw	r16,176(sp)
 4001980:	00000306 	br	4001990 <___vfprintf_internal_r+0xf84>
 4001984:	8c7ffc04 	addi	r17,r17,-16
 4001988:	42000204 	addi	r8,r8,8
 400198c:	e440110e 	bge	fp,r17,40019d4 <___vfprintf_internal_r+0xfc8>
 4001990:	18c00404 	addi	r3,r3,16
 4001994:	10800044 	addi	r2,r2,1
 4001998:	45000015 	stw	r20,0(r8)
 400199c:	47000115 	stw	fp,4(r8)
 40019a0:	d8c02015 	stw	r3,128(sp)
 40019a4:	d8801f15 	stw	r2,124(sp)
 40019a8:	98bff60e 	bge	r19,r2,4001984 <__ram_exceptions_end+0xfabfd7f8>
 40019ac:	d9801e04 	addi	r6,sp,120
 40019b0:	b80b883a 	mov	r5,r23
 40019b4:	8009883a 	mov	r4,r16
 40019b8:	40075240 	call	4007524 <__sprint_r>
 40019bc:	103d151e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 40019c0:	8c7ffc04 	addi	r17,r17,-16
 40019c4:	d8c02017 	ldw	r3,128(sp)
 40019c8:	d8801f17 	ldw	r2,124(sp)
 40019cc:	da000404 	addi	r8,sp,16
 40019d0:	e47fef16 	blt	fp,r17,4001990 <__ram_exceptions_end+0xfabfd804>
 40019d4:	9021883a 	mov	r16,r18
 40019d8:	a825883a 	mov	r18,r21
 40019dc:	b02b883a 	mov	r21,r22
 40019e0:	882d883a 	mov	r22,r17
 40019e4:	dc403017 	ldw	r17,192(sp)
 40019e8:	d9002b17 	ldw	r4,172(sp)
 40019ec:	1d87883a 	add	r3,r3,r22
 40019f0:	10800044 	addi	r2,r2,1
 40019f4:	41000015 	stw	r4,0(r8)
 40019f8:	45800115 	stw	r22,4(r8)
 40019fc:	d8c02015 	stw	r3,128(sp)
 4001a00:	d8801f15 	stw	r2,124(sp)
 4001a04:	010001c4 	movi	r4,7
 4001a08:	20818e16 	blt	r4,r2,4002044 <___vfprintf_internal_r+0x1638>
 4001a0c:	42000204 	addi	r8,r8,8
 4001a10:	003e3106 	br	40012d8 <__ram_exceptions_end+0xfabfd14c>
 4001a14:	d9403317 	ldw	r5,204(sp)
 4001a18:	00800044 	movi	r2,1
 4001a1c:	18c00044 	addi	r3,r3,1
 4001a20:	1141530e 	bge	r2,r5,4001f70 <___vfprintf_internal_r+0x1564>
 4001a24:	dc401f17 	ldw	r17,124(sp)
 4001a28:	00800044 	movi	r2,1
 4001a2c:	40800115 	stw	r2,4(r8)
 4001a30:	8c400044 	addi	r17,r17,1
 4001a34:	44000015 	stw	r16,0(r8)
 4001a38:	d8c02015 	stw	r3,128(sp)
 4001a3c:	dc401f15 	stw	r17,124(sp)
 4001a40:	008001c4 	movi	r2,7
 4001a44:	14416b16 	blt	r2,r17,4001ff4 <___vfprintf_internal_r+0x15e8>
 4001a48:	42000204 	addi	r8,r8,8
 4001a4c:	d8803717 	ldw	r2,220(sp)
 4001a50:	d9003417 	ldw	r4,208(sp)
 4001a54:	8c400044 	addi	r17,r17,1
 4001a58:	10c7883a 	add	r3,r2,r3
 4001a5c:	40800115 	stw	r2,4(r8)
 4001a60:	41000015 	stw	r4,0(r8)
 4001a64:	d8c02015 	stw	r3,128(sp)
 4001a68:	dc401f15 	stw	r17,124(sp)
 4001a6c:	008001c4 	movi	r2,7
 4001a70:	14416916 	blt	r2,r17,4002018 <___vfprintf_internal_r+0x160c>
 4001a74:	45800204 	addi	r22,r8,8
 4001a78:	d9003617 	ldw	r4,216(sp)
 4001a7c:	d9403817 	ldw	r5,224(sp)
 4001a80:	000d883a 	mov	r6,zero
 4001a84:	000f883a 	mov	r7,zero
 4001a88:	d8c03c15 	stw	r3,240(sp)
 4001a8c:	400bb640 	call	400bb64 <__eqdf2>
 4001a90:	d8c03c17 	ldw	r3,240(sp)
 4001a94:	1000bc26 	beq	r2,zero,4001d88 <___vfprintf_internal_r+0x137c>
 4001a98:	d9403317 	ldw	r5,204(sp)
 4001a9c:	84000044 	addi	r16,r16,1
 4001aa0:	8c400044 	addi	r17,r17,1
 4001aa4:	28bfffc4 	addi	r2,r5,-1
 4001aa8:	1887883a 	add	r3,r3,r2
 4001aac:	b0800115 	stw	r2,4(r22)
 4001ab0:	b4000015 	stw	r16,0(r22)
 4001ab4:	d8c02015 	stw	r3,128(sp)
 4001ab8:	dc401f15 	stw	r17,124(sp)
 4001abc:	008001c4 	movi	r2,7
 4001ac0:	14414316 	blt	r2,r17,4001fd0 <___vfprintf_internal_r+0x15c4>
 4001ac4:	b5800204 	addi	r22,r22,8
 4001ac8:	d9003a17 	ldw	r4,232(sp)
 4001acc:	df0022c4 	addi	fp,sp,139
 4001ad0:	8c400044 	addi	r17,r17,1
 4001ad4:	20c7883a 	add	r3,r4,r3
 4001ad8:	b7000015 	stw	fp,0(r22)
 4001adc:	b1000115 	stw	r4,4(r22)
 4001ae0:	d8c02015 	stw	r3,128(sp)
 4001ae4:	dc401f15 	stw	r17,124(sp)
 4001ae8:	008001c4 	movi	r2,7
 4001aec:	14400e16 	blt	r2,r17,4001b28 <___vfprintf_internal_r+0x111c>
 4001af0:	b2000204 	addi	r8,r22,8
 4001af4:	003e3a06 	br	40013e0 <__ram_exceptions_end+0xfabfd254>
 4001af8:	01010074 	movhi	r4,1025
 4001afc:	213eb284 	addi	r4,r4,-1334
 4001b00:	d9002b15 	stw	r4,172(sp)
 4001b04:	d9002b17 	ldw	r4,172(sp)
 4001b08:	1c07883a 	add	r3,r3,r16
 4001b0c:	44000115 	stw	r16,4(r8)
 4001b10:	41000015 	stw	r4,0(r8)
 4001b14:	10800044 	addi	r2,r2,1
 4001b18:	d8c02015 	stw	r3,128(sp)
 4001b1c:	d8801f15 	stw	r2,124(sp)
 4001b20:	010001c4 	movi	r4,7
 4001b24:	20be2d0e 	bge	r4,r2,40013dc <__ram_exceptions_end+0xfabfd250>
 4001b28:	d9002c17 	ldw	r4,176(sp)
 4001b2c:	d9801e04 	addi	r6,sp,120
 4001b30:	b80b883a 	mov	r5,r23
 4001b34:	40075240 	call	4007524 <__sprint_r>
 4001b38:	103cb61e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001b3c:	d8c02017 	ldw	r3,128(sp)
 4001b40:	da000404 	addi	r8,sp,16
 4001b44:	003e2606 	br	40013e0 <__ram_exceptions_end+0xfabfd254>
 4001b48:	d9002c17 	ldw	r4,176(sp)
 4001b4c:	d9801e04 	addi	r6,sp,120
 4001b50:	b80b883a 	mov	r5,r23
 4001b54:	40075240 	call	4007524 <__sprint_r>
 4001b58:	103e5d26 	beq	r2,zero,40014d0 <__ram_exceptions_end+0xfabfd344>
 4001b5c:	003cad06 	br	4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001b60:	d9002c17 	ldw	r4,176(sp)
 4001b64:	d9801e04 	addi	r6,sp,120
 4001b68:	b80b883a 	mov	r5,r23
 4001b6c:	40075240 	call	4007524 <__sprint_r>
 4001b70:	103ca81e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001b74:	d8c02017 	ldw	r3,128(sp)
 4001b78:	da000404 	addi	r8,sp,16
 4001b7c:	003e0b06 	br	40013ac <__ram_exceptions_end+0xfabfd220>
 4001b80:	d9002c17 	ldw	r4,176(sp)
 4001b84:	d9801e04 	addi	r6,sp,120
 4001b88:	b80b883a 	mov	r5,r23
 4001b8c:	40075240 	call	4007524 <__sprint_r>
 4001b90:	103ca01e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001b94:	d8c02017 	ldw	r3,128(sp)
 4001b98:	da000404 	addi	r8,sp,16
 4001b9c:	003dbd06 	br	4001294 <__ram_exceptions_end+0xfabfd108>
 4001ba0:	d9002c17 	ldw	r4,176(sp)
 4001ba4:	d9801e04 	addi	r6,sp,120
 4001ba8:	b80b883a 	mov	r5,r23
 4001bac:	40075240 	call	4007524 <__sprint_r>
 4001bb0:	103c981e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001bb4:	d8c02017 	ldw	r3,128(sp)
 4001bb8:	da000404 	addi	r8,sp,16
 4001bbc:	003dc306 	br	40012cc <__ram_exceptions_end+0xfabfd140>
 4001bc0:	d8802917 	ldw	r2,164(sp)
 4001bc4:	d8002785 	stb	zero,158(sp)
 4001bc8:	103f0616 	blt	r2,zero,40017e4 <__ram_exceptions_end+0xfabfd658>
 4001bcc:	00ffdfc4 	movi	r3,-129
 4001bd0:	9d84b03a 	or	r2,r19,r22
 4001bd4:	90e4703a 	and	r18,r18,r3
 4001bd8:	103c6b26 	beq	r2,zero,4000d88 <__ram_exceptions_end+0xfabfcbfc>
 4001bdc:	0039883a 	mov	fp,zero
 4001be0:	003e7406 	br	40015b4 <__ram_exceptions_end+0xfabfd428>
 4001be4:	9080040c 	andi	r2,r18,16
 4001be8:	1001b326 	beq	r2,zero,40022b8 <___vfprintf_internal_r+0x18ac>
 4001bec:	d9002d17 	ldw	r4,180(sp)
 4001bf0:	d9402917 	ldw	r5,164(sp)
 4001bf4:	d8002785 	stb	zero,158(sp)
 4001bf8:	20800104 	addi	r2,r4,4
 4001bfc:	24c00017 	ldw	r19,0(r4)
 4001c00:	002d883a 	mov	r22,zero
 4001c04:	2801b516 	blt	r5,zero,40022dc <___vfprintf_internal_r+0x18d0>
 4001c08:	00ffdfc4 	movi	r3,-129
 4001c0c:	d8802d15 	stw	r2,180(sp)
 4001c10:	90e4703a 	and	r18,r18,r3
 4001c14:	983d2726 	beq	r19,zero,40010b4 <__ram_exceptions_end+0xfabfcf28>
 4001c18:	0039883a 	mov	fp,zero
 4001c1c:	003d2a06 	br	40010c8 <__ram_exceptions_end+0xfabfcf3c>
 4001c20:	dc402617 	ldw	r17,152(sp)
 4001c24:	0441d30e 	bge	zero,r17,4002374 <___vfprintf_internal_r+0x1968>
 4001c28:	dc403217 	ldw	r17,200(sp)
 4001c2c:	d8803317 	ldw	r2,204(sp)
 4001c30:	1440010e 	bge	r2,r17,4001c38 <___vfprintf_internal_r+0x122c>
 4001c34:	1023883a 	mov	r17,r2
 4001c38:	04400a0e 	bge	zero,r17,4001c64 <___vfprintf_internal_r+0x1258>
 4001c3c:	d8801f17 	ldw	r2,124(sp)
 4001c40:	1c47883a 	add	r3,r3,r17
 4001c44:	44000015 	stw	r16,0(r8)
 4001c48:	10800044 	addi	r2,r2,1
 4001c4c:	44400115 	stw	r17,4(r8)
 4001c50:	d8c02015 	stw	r3,128(sp)
 4001c54:	d8801f15 	stw	r2,124(sp)
 4001c58:	010001c4 	movi	r4,7
 4001c5c:	20826516 	blt	r4,r2,40025f4 <___vfprintf_internal_r+0x1be8>
 4001c60:	42000204 	addi	r8,r8,8
 4001c64:	88026116 	blt	r17,zero,40025ec <___vfprintf_internal_r+0x1be0>
 4001c68:	d9003217 	ldw	r4,200(sp)
 4001c6c:	2463c83a 	sub	r17,r4,r17
 4001c70:	04407b0e 	bge	zero,r17,4001e60 <___vfprintf_internal_r+0x1454>
 4001c74:	05800404 	movi	r22,16
 4001c78:	d8801f17 	ldw	r2,124(sp)
 4001c7c:	b4419d0e 	bge	r22,r17,40022f4 <___vfprintf_internal_r+0x18e8>
 4001c80:	01010074 	movhi	r4,1025
 4001c84:	213eb284 	addi	r4,r4,-1334
 4001c88:	d9002b15 	stw	r4,172(sp)
 4001c8c:	070001c4 	movi	fp,7
 4001c90:	dcc02c17 	ldw	r19,176(sp)
 4001c94:	00000306 	br	4001ca4 <___vfprintf_internal_r+0x1298>
 4001c98:	42000204 	addi	r8,r8,8
 4001c9c:	8c7ffc04 	addi	r17,r17,-16
 4001ca0:	b441970e 	bge	r22,r17,4002300 <___vfprintf_internal_r+0x18f4>
 4001ca4:	18c00404 	addi	r3,r3,16
 4001ca8:	10800044 	addi	r2,r2,1
 4001cac:	45000015 	stw	r20,0(r8)
 4001cb0:	45800115 	stw	r22,4(r8)
 4001cb4:	d8c02015 	stw	r3,128(sp)
 4001cb8:	d8801f15 	stw	r2,124(sp)
 4001cbc:	e0bff60e 	bge	fp,r2,4001c98 <__ram_exceptions_end+0xfabfdb0c>
 4001cc0:	d9801e04 	addi	r6,sp,120
 4001cc4:	b80b883a 	mov	r5,r23
 4001cc8:	9809883a 	mov	r4,r19
 4001ccc:	40075240 	call	4007524 <__sprint_r>
 4001cd0:	103c501e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001cd4:	d8c02017 	ldw	r3,128(sp)
 4001cd8:	d8801f17 	ldw	r2,124(sp)
 4001cdc:	da000404 	addi	r8,sp,16
 4001ce0:	003fee06 	br	4001c9c <__ram_exceptions_end+0xfabfdb10>
 4001ce4:	d9002c17 	ldw	r4,176(sp)
 4001ce8:	d9801e04 	addi	r6,sp,120
 4001cec:	b80b883a 	mov	r5,r23
 4001cf0:	40075240 	call	4007524 <__sprint_r>
 4001cf4:	103c471e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001cf8:	d8c02017 	ldw	r3,128(sp)
 4001cfc:	df002787 	ldb	fp,158(sp)
 4001d00:	da000404 	addi	r8,sp,16
 4001d04:	003d5606 	br	4001260 <__ram_exceptions_end+0xfabfd0d4>
 4001d08:	9080040c 	andi	r2,r18,16
 4001d0c:	10016126 	beq	r2,zero,4002294 <___vfprintf_internal_r+0x1888>
 4001d10:	d8802d17 	ldw	r2,180(sp)
 4001d14:	14c00017 	ldw	r19,0(r2)
 4001d18:	10800104 	addi	r2,r2,4
 4001d1c:	d8802d15 	stw	r2,180(sp)
 4001d20:	982dd7fa 	srai	r22,r19,31
 4001d24:	b005883a 	mov	r2,r22
 4001d28:	003c8206 	br	4000f34 <__ram_exceptions_end+0xfabfcda8>
 4001d2c:	9080040c 	andi	r2,r18,16
 4001d30:	10003526 	beq	r2,zero,4001e08 <___vfprintf_internal_r+0x13fc>
 4001d34:	d9402d17 	ldw	r5,180(sp)
 4001d38:	d8c02917 	ldw	r3,164(sp)
 4001d3c:	d8002785 	stb	zero,158(sp)
 4001d40:	28800104 	addi	r2,r5,4
 4001d44:	2cc00017 	ldw	r19,0(r5)
 4001d48:	002d883a 	mov	r22,zero
 4001d4c:	18003716 	blt	r3,zero,4001e2c <___vfprintf_internal_r+0x1420>
 4001d50:	00ffdfc4 	movi	r3,-129
 4001d54:	d8802d15 	stw	r2,180(sp)
 4001d58:	90e4703a 	and	r18,r18,r3
 4001d5c:	0039883a 	mov	fp,zero
 4001d60:	983df326 	beq	r19,zero,4001530 <__ram_exceptions_end+0xfabfd3a4>
 4001d64:	00800244 	movi	r2,9
 4001d68:	14fc7b36 	bltu	r2,r19,4000f58 <__ram_exceptions_end+0xfabfcdcc>
 4001d6c:	d8c02817 	ldw	r3,160(sp)
 4001d70:	dc001dc4 	addi	r16,sp,119
 4001d74:	9cc00c04 	addi	r19,r19,48
 4001d78:	1c07c83a 	sub	r3,r3,r16
 4001d7c:	dcc01dc5 	stb	r19,119(sp)
 4001d80:	d8c02e15 	stw	r3,184(sp)
 4001d84:	003ce806 	br	4001128 <__ram_exceptions_end+0xfabfcf9c>
 4001d88:	d8803317 	ldw	r2,204(sp)
 4001d8c:	143fffc4 	addi	r16,r2,-1
 4001d90:	043f4d0e 	bge	zero,r16,4001ac8 <__ram_exceptions_end+0xfabfd93c>
 4001d94:	07000404 	movi	fp,16
 4001d98:	e400810e 	bge	fp,r16,4001fa0 <___vfprintf_internal_r+0x1594>
 4001d9c:	01410074 	movhi	r5,1025
 4001da0:	297eb284 	addi	r5,r5,-1334
 4001da4:	d9402b15 	stw	r5,172(sp)
 4001da8:	01c001c4 	movi	r7,7
 4001dac:	dcc02c17 	ldw	r19,176(sp)
 4001db0:	00000306 	br	4001dc0 <___vfprintf_internal_r+0x13b4>
 4001db4:	b5800204 	addi	r22,r22,8
 4001db8:	843ffc04 	addi	r16,r16,-16
 4001dbc:	e4007b0e 	bge	fp,r16,4001fac <___vfprintf_internal_r+0x15a0>
 4001dc0:	18c00404 	addi	r3,r3,16
 4001dc4:	8c400044 	addi	r17,r17,1
 4001dc8:	b5000015 	stw	r20,0(r22)
 4001dcc:	b7000115 	stw	fp,4(r22)
 4001dd0:	d8c02015 	stw	r3,128(sp)
 4001dd4:	dc401f15 	stw	r17,124(sp)
 4001dd8:	3c7ff60e 	bge	r7,r17,4001db4 <__ram_exceptions_end+0xfabfdc28>
 4001ddc:	d9801e04 	addi	r6,sp,120
 4001de0:	b80b883a 	mov	r5,r23
 4001de4:	9809883a 	mov	r4,r19
 4001de8:	d9c03c15 	stw	r7,240(sp)
 4001dec:	40075240 	call	4007524 <__sprint_r>
 4001df0:	d9c03c17 	ldw	r7,240(sp)
 4001df4:	103c071e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001df8:	d8c02017 	ldw	r3,128(sp)
 4001dfc:	dc401f17 	ldw	r17,124(sp)
 4001e00:	dd800404 	addi	r22,sp,16
 4001e04:	003fec06 	br	4001db8 <__ram_exceptions_end+0xfabfdc2c>
 4001e08:	9080100c 	andi	r2,r18,64
 4001e0c:	d8002785 	stb	zero,158(sp)
 4001e10:	10010e26 	beq	r2,zero,400224c <___vfprintf_internal_r+0x1840>
 4001e14:	d9002d17 	ldw	r4,180(sp)
 4001e18:	d9402917 	ldw	r5,164(sp)
 4001e1c:	002d883a 	mov	r22,zero
 4001e20:	20800104 	addi	r2,r4,4
 4001e24:	24c0000b 	ldhu	r19,0(r4)
 4001e28:	283fc90e 	bge	r5,zero,4001d50 <__ram_exceptions_end+0xfabfdbc4>
 4001e2c:	d8802d15 	stw	r2,180(sp)
 4001e30:	0039883a 	mov	fp,zero
 4001e34:	9d84b03a 	or	r2,r19,r22
 4001e38:	103c461e 	bne	r2,zero,4000f54 <__ram_exceptions_end+0xfabfcdc8>
 4001e3c:	00800044 	movi	r2,1
 4001e40:	003e6c06 	br	40017f4 <__ram_exceptions_end+0xfabfd668>
 4001e44:	d9002c17 	ldw	r4,176(sp)
 4001e48:	d9801e04 	addi	r6,sp,120
 4001e4c:	b80b883a 	mov	r5,r23
 4001e50:	40075240 	call	4007524 <__sprint_r>
 4001e54:	103bef1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001e58:	d8c02017 	ldw	r3,128(sp)
 4001e5c:	da000404 	addi	r8,sp,16
 4001e60:	d9003217 	ldw	r4,200(sp)
 4001e64:	d8802617 	ldw	r2,152(sp)
 4001e68:	d9403317 	ldw	r5,204(sp)
 4001e6c:	8123883a 	add	r17,r16,r4
 4001e70:	11400216 	blt	r2,r5,4001e7c <___vfprintf_internal_r+0x1470>
 4001e74:	9100004c 	andi	r4,r18,1
 4001e78:	20000d26 	beq	r4,zero,4001eb0 <___vfprintf_internal_r+0x14a4>
 4001e7c:	d9003717 	ldw	r4,220(sp)
 4001e80:	d9403417 	ldw	r5,208(sp)
 4001e84:	1907883a 	add	r3,r3,r4
 4001e88:	d9001f17 	ldw	r4,124(sp)
 4001e8c:	41400015 	stw	r5,0(r8)
 4001e90:	d9403717 	ldw	r5,220(sp)
 4001e94:	21000044 	addi	r4,r4,1
 4001e98:	d8c02015 	stw	r3,128(sp)
 4001e9c:	41400115 	stw	r5,4(r8)
 4001ea0:	d9001f15 	stw	r4,124(sp)
 4001ea4:	014001c4 	movi	r5,7
 4001ea8:	2901e816 	blt	r5,r4,400264c <___vfprintf_internal_r+0x1c40>
 4001eac:	42000204 	addi	r8,r8,8
 4001eb0:	d9003317 	ldw	r4,204(sp)
 4001eb4:	8121883a 	add	r16,r16,r4
 4001eb8:	2085c83a 	sub	r2,r4,r2
 4001ebc:	8461c83a 	sub	r16,r16,r17
 4001ec0:	1400010e 	bge	r2,r16,4001ec8 <___vfprintf_internal_r+0x14bc>
 4001ec4:	1021883a 	mov	r16,r2
 4001ec8:	04000a0e 	bge	zero,r16,4001ef4 <___vfprintf_internal_r+0x14e8>
 4001ecc:	d9001f17 	ldw	r4,124(sp)
 4001ed0:	1c07883a 	add	r3,r3,r16
 4001ed4:	44400015 	stw	r17,0(r8)
 4001ed8:	21000044 	addi	r4,r4,1
 4001edc:	44000115 	stw	r16,4(r8)
 4001ee0:	d8c02015 	stw	r3,128(sp)
 4001ee4:	d9001f15 	stw	r4,124(sp)
 4001ee8:	014001c4 	movi	r5,7
 4001eec:	2901fb16 	blt	r5,r4,40026dc <___vfprintf_internal_r+0x1cd0>
 4001ef0:	42000204 	addi	r8,r8,8
 4001ef4:	8001f716 	blt	r16,zero,40026d4 <___vfprintf_internal_r+0x1cc8>
 4001ef8:	1421c83a 	sub	r16,r2,r16
 4001efc:	043d380e 	bge	zero,r16,40013e0 <__ram_exceptions_end+0xfabfd254>
 4001f00:	04400404 	movi	r17,16
 4001f04:	d8801f17 	ldw	r2,124(sp)
 4001f08:	8c3efb0e 	bge	r17,r16,4001af8 <__ram_exceptions_end+0xfabfd96c>
 4001f0c:	01410074 	movhi	r5,1025
 4001f10:	297eb284 	addi	r5,r5,-1334
 4001f14:	d9402b15 	stw	r5,172(sp)
 4001f18:	058001c4 	movi	r22,7
 4001f1c:	dcc02c17 	ldw	r19,176(sp)
 4001f20:	00000306 	br	4001f30 <___vfprintf_internal_r+0x1524>
 4001f24:	42000204 	addi	r8,r8,8
 4001f28:	843ffc04 	addi	r16,r16,-16
 4001f2c:	8c3ef50e 	bge	r17,r16,4001b04 <__ram_exceptions_end+0xfabfd978>
 4001f30:	18c00404 	addi	r3,r3,16
 4001f34:	10800044 	addi	r2,r2,1
 4001f38:	45000015 	stw	r20,0(r8)
 4001f3c:	44400115 	stw	r17,4(r8)
 4001f40:	d8c02015 	stw	r3,128(sp)
 4001f44:	d8801f15 	stw	r2,124(sp)
 4001f48:	b0bff60e 	bge	r22,r2,4001f24 <__ram_exceptions_end+0xfabfdd98>
 4001f4c:	d9801e04 	addi	r6,sp,120
 4001f50:	b80b883a 	mov	r5,r23
 4001f54:	9809883a 	mov	r4,r19
 4001f58:	40075240 	call	4007524 <__sprint_r>
 4001f5c:	103bad1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001f60:	d8c02017 	ldw	r3,128(sp)
 4001f64:	d8801f17 	ldw	r2,124(sp)
 4001f68:	da000404 	addi	r8,sp,16
 4001f6c:	003fee06 	br	4001f28 <__ram_exceptions_end+0xfabfdd9c>
 4001f70:	9088703a 	and	r4,r18,r2
 4001f74:	203eab1e 	bne	r4,zero,4001a24 <__ram_exceptions_end+0xfabfd898>
 4001f78:	dc401f17 	ldw	r17,124(sp)
 4001f7c:	40800115 	stw	r2,4(r8)
 4001f80:	44000015 	stw	r16,0(r8)
 4001f84:	8c400044 	addi	r17,r17,1
 4001f88:	d8c02015 	stw	r3,128(sp)
 4001f8c:	dc401f15 	stw	r17,124(sp)
 4001f90:	008001c4 	movi	r2,7
 4001f94:	14400e16 	blt	r2,r17,4001fd0 <___vfprintf_internal_r+0x15c4>
 4001f98:	45800204 	addi	r22,r8,8
 4001f9c:	003eca06 	br	4001ac8 <__ram_exceptions_end+0xfabfd93c>
 4001fa0:	01010074 	movhi	r4,1025
 4001fa4:	213eb284 	addi	r4,r4,-1334
 4001fa8:	d9002b15 	stw	r4,172(sp)
 4001fac:	d8802b17 	ldw	r2,172(sp)
 4001fb0:	1c07883a 	add	r3,r3,r16
 4001fb4:	8c400044 	addi	r17,r17,1
 4001fb8:	b0800015 	stw	r2,0(r22)
 4001fbc:	b4000115 	stw	r16,4(r22)
 4001fc0:	d8c02015 	stw	r3,128(sp)
 4001fc4:	dc401f15 	stw	r17,124(sp)
 4001fc8:	008001c4 	movi	r2,7
 4001fcc:	147ebd0e 	bge	r2,r17,4001ac4 <__ram_exceptions_end+0xfabfd938>
 4001fd0:	d9002c17 	ldw	r4,176(sp)
 4001fd4:	d9801e04 	addi	r6,sp,120
 4001fd8:	b80b883a 	mov	r5,r23
 4001fdc:	40075240 	call	4007524 <__sprint_r>
 4001fe0:	103b8c1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4001fe4:	d8c02017 	ldw	r3,128(sp)
 4001fe8:	dc401f17 	ldw	r17,124(sp)
 4001fec:	dd800404 	addi	r22,sp,16
 4001ff0:	003eb506 	br	4001ac8 <__ram_exceptions_end+0xfabfd93c>
 4001ff4:	d9002c17 	ldw	r4,176(sp)
 4001ff8:	d9801e04 	addi	r6,sp,120
 4001ffc:	b80b883a 	mov	r5,r23
 4002000:	40075240 	call	4007524 <__sprint_r>
 4002004:	103b831e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4002008:	d8c02017 	ldw	r3,128(sp)
 400200c:	dc401f17 	ldw	r17,124(sp)
 4002010:	da000404 	addi	r8,sp,16
 4002014:	003e8d06 	br	4001a4c <__ram_exceptions_end+0xfabfd8c0>
 4002018:	d9002c17 	ldw	r4,176(sp)
 400201c:	d9801e04 	addi	r6,sp,120
 4002020:	b80b883a 	mov	r5,r23
 4002024:	40075240 	call	4007524 <__sprint_r>
 4002028:	103b7a1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 400202c:	d8c02017 	ldw	r3,128(sp)
 4002030:	dc401f17 	ldw	r17,124(sp)
 4002034:	dd800404 	addi	r22,sp,16
 4002038:	003e8f06 	br	4001a78 <__ram_exceptions_end+0xfabfd8ec>
 400203c:	0027883a 	mov	r19,zero
 4002040:	003f4a06 	br	4001d6c <__ram_exceptions_end+0xfabfdbe0>
 4002044:	d9002c17 	ldw	r4,176(sp)
 4002048:	d9801e04 	addi	r6,sp,120
 400204c:	b80b883a 	mov	r5,r23
 4002050:	40075240 	call	4007524 <__sprint_r>
 4002054:	103b6f1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4002058:	d8c02017 	ldw	r3,128(sp)
 400205c:	da000404 	addi	r8,sp,16
 4002060:	003c9d06 	br	40012d8 <__ram_exceptions_end+0xfabfd14c>
 4002064:	04e7c83a 	sub	r19,zero,r19
 4002068:	9804c03a 	cmpne	r2,r19,zero
 400206c:	05adc83a 	sub	r22,zero,r22
 4002070:	b0adc83a 	sub	r22,r22,r2
 4002074:	d8802917 	ldw	r2,164(sp)
 4002078:	07000b44 	movi	fp,45
 400207c:	df002785 	stb	fp,158(sp)
 4002080:	10017b16 	blt	r2,zero,4002670 <___vfprintf_internal_r+0x1c64>
 4002084:	00bfdfc4 	movi	r2,-129
 4002088:	90a4703a 	and	r18,r18,r2
 400208c:	003bb106 	br	4000f54 <__ram_exceptions_end+0xfabfcdc8>
 4002090:	d9003617 	ldw	r4,216(sp)
 4002094:	d9403817 	ldw	r5,224(sp)
 4002098:	da003d15 	stw	r8,244(sp)
 400209c:	40070b00 	call	40070b0 <__fpclassifyd>
 40020a0:	da003d17 	ldw	r8,244(sp)
 40020a4:	1000f026 	beq	r2,zero,4002468 <___vfprintf_internal_r+0x1a5c>
 40020a8:	d9002917 	ldw	r4,164(sp)
 40020ac:	05bff7c4 	movi	r22,-33
 40020b0:	00bfffc4 	movi	r2,-1
 40020b4:	8dac703a 	and	r22,r17,r22
 40020b8:	20820026 	beq	r4,r2,40028bc <___vfprintf_internal_r+0x1eb0>
 40020bc:	008011c4 	movi	r2,71
 40020c0:	b081f726 	beq	r22,r2,40028a0 <___vfprintf_internal_r+0x1e94>
 40020c4:	d9003817 	ldw	r4,224(sp)
 40020c8:	90c04014 	ori	r3,r18,256
 40020cc:	d8c02b15 	stw	r3,172(sp)
 40020d0:	20021516 	blt	r4,zero,4002928 <___vfprintf_internal_r+0x1f1c>
 40020d4:	dcc03817 	ldw	r19,224(sp)
 40020d8:	d8002a05 	stb	zero,168(sp)
 40020dc:	00801984 	movi	r2,102
 40020e0:	8881f926 	beq	r17,r2,40028c8 <___vfprintf_internal_r+0x1ebc>
 40020e4:	00801184 	movi	r2,70
 40020e8:	88821c26 	beq	r17,r2,400295c <___vfprintf_internal_r+0x1f50>
 40020ec:	00801144 	movi	r2,69
 40020f0:	b081ef26 	beq	r22,r2,40028b0 <___vfprintf_internal_r+0x1ea4>
 40020f4:	d8c02917 	ldw	r3,164(sp)
 40020f8:	d8802104 	addi	r2,sp,132
 40020fc:	d8800315 	stw	r2,12(sp)
 4002100:	d9403617 	ldw	r5,216(sp)
 4002104:	d8802504 	addi	r2,sp,148
 4002108:	d9002c17 	ldw	r4,176(sp)
 400210c:	d8800215 	stw	r2,8(sp)
 4002110:	d8802604 	addi	r2,sp,152
 4002114:	d8c00015 	stw	r3,0(sp)
 4002118:	d8800115 	stw	r2,4(sp)
 400211c:	01c00084 	movi	r7,2
 4002120:	980d883a 	mov	r6,r19
 4002124:	d8c03c15 	stw	r3,240(sp)
 4002128:	da003d15 	stw	r8,244(sp)
 400212c:	40030300 	call	4003030 <_dtoa_r>
 4002130:	1021883a 	mov	r16,r2
 4002134:	008019c4 	movi	r2,103
 4002138:	d8c03c17 	ldw	r3,240(sp)
 400213c:	da003d17 	ldw	r8,244(sp)
 4002140:	88817126 	beq	r17,r2,4002708 <___vfprintf_internal_r+0x1cfc>
 4002144:	008011c4 	movi	r2,71
 4002148:	88829226 	beq	r17,r2,4002b94 <___vfprintf_internal_r+0x2188>
 400214c:	80f9883a 	add	fp,r16,r3
 4002150:	d9003617 	ldw	r4,216(sp)
 4002154:	000d883a 	mov	r6,zero
 4002158:	000f883a 	mov	r7,zero
 400215c:	980b883a 	mov	r5,r19
 4002160:	da003d15 	stw	r8,244(sp)
 4002164:	400bb640 	call	400bb64 <__eqdf2>
 4002168:	da003d17 	ldw	r8,244(sp)
 400216c:	10018d26 	beq	r2,zero,40027a4 <___vfprintf_internal_r+0x1d98>
 4002170:	d8802117 	ldw	r2,132(sp)
 4002174:	1700062e 	bgeu	r2,fp,4002190 <___vfprintf_internal_r+0x1784>
 4002178:	01000c04 	movi	r4,48
 400217c:	10c00044 	addi	r3,r2,1
 4002180:	d8c02115 	stw	r3,132(sp)
 4002184:	11000005 	stb	r4,0(r2)
 4002188:	d8802117 	ldw	r2,132(sp)
 400218c:	173ffb36 	bltu	r2,fp,400217c <__ram_exceptions_end+0xfabfdff0>
 4002190:	1405c83a 	sub	r2,r2,r16
 4002194:	d8803315 	stw	r2,204(sp)
 4002198:	008011c4 	movi	r2,71
 400219c:	b0817626 	beq	r22,r2,4002778 <___vfprintf_internal_r+0x1d6c>
 40021a0:	00801944 	movi	r2,101
 40021a4:	1442810e 	bge	r2,r17,4002bac <___vfprintf_internal_r+0x21a0>
 40021a8:	d8c02617 	ldw	r3,152(sp)
 40021ac:	00801984 	movi	r2,102
 40021b0:	d8c03215 	stw	r3,200(sp)
 40021b4:	8881fe26 	beq	r17,r2,40029b0 <___vfprintf_internal_r+0x1fa4>
 40021b8:	d8c03217 	ldw	r3,200(sp)
 40021bc:	d9003317 	ldw	r4,204(sp)
 40021c0:	1901dd16 	blt	r3,r4,4002938 <___vfprintf_internal_r+0x1f2c>
 40021c4:	9480004c 	andi	r18,r18,1
 40021c8:	90022b1e 	bne	r18,zero,4002a78 <___vfprintf_internal_r+0x206c>
 40021cc:	1805883a 	mov	r2,r3
 40021d0:	18028016 	blt	r3,zero,4002bd4 <___vfprintf_internal_r+0x21c8>
 40021d4:	d8c03217 	ldw	r3,200(sp)
 40021d8:	044019c4 	movi	r17,103
 40021dc:	d8c02e15 	stw	r3,184(sp)
 40021e0:	df002a07 	ldb	fp,168(sp)
 40021e4:	e001531e 	bne	fp,zero,4002734 <___vfprintf_internal_r+0x1d28>
 40021e8:	df002783 	ldbu	fp,158(sp)
 40021ec:	d8802a15 	stw	r2,168(sp)
 40021f0:	dc802b17 	ldw	r18,172(sp)
 40021f4:	d8002915 	stw	zero,164(sp)
 40021f8:	003bd106 	br	4001140 <__ram_exceptions_end+0xfabfcfb4>
 40021fc:	d8802d17 	ldw	r2,180(sp)
 4002200:	d8c02d17 	ldw	r3,180(sp)
 4002204:	d9002d17 	ldw	r4,180(sp)
 4002208:	10800017 	ldw	r2,0(r2)
 400220c:	18c00117 	ldw	r3,4(r3)
 4002210:	21000204 	addi	r4,r4,8
 4002214:	d8803615 	stw	r2,216(sp)
 4002218:	d8c03815 	stw	r3,224(sp)
 400221c:	d9002d15 	stw	r4,180(sp)
 4002220:	003b7506 	br	4000ff8 <__ram_exceptions_end+0xfabfce6c>
 4002224:	ac400007 	ldb	r17,0(r21)
 4002228:	003a5906 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 400222c:	9080100c 	andi	r2,r18,64
 4002230:	1000a826 	beq	r2,zero,40024d4 <___vfprintf_internal_r+0x1ac8>
 4002234:	d9002d17 	ldw	r4,180(sp)
 4002238:	002d883a 	mov	r22,zero
 400223c:	24c0000b 	ldhu	r19,0(r4)
 4002240:	21000104 	addi	r4,r4,4
 4002244:	d9002d15 	stw	r4,180(sp)
 4002248:	003ccb06 	br	4001578 <__ram_exceptions_end+0xfabfd3ec>
 400224c:	d8c02d17 	ldw	r3,180(sp)
 4002250:	d9002917 	ldw	r4,164(sp)
 4002254:	002d883a 	mov	r22,zero
 4002258:	18800104 	addi	r2,r3,4
 400225c:	1cc00017 	ldw	r19,0(r3)
 4002260:	203ebb0e 	bge	r4,zero,4001d50 <__ram_exceptions_end+0xfabfdbc4>
 4002264:	003ef106 	br	4001e2c <__ram_exceptions_end+0xfabfdca0>
 4002268:	9080040c 	andi	r2,r18,16
 400226c:	1000921e 	bne	r2,zero,40024b8 <___vfprintf_internal_r+0x1aac>
 4002270:	9480100c 	andi	r18,r18,64
 4002274:	90013926 	beq	r18,zero,400275c <___vfprintf_internal_r+0x1d50>
 4002278:	d9002d17 	ldw	r4,180(sp)
 400227c:	d9402f17 	ldw	r5,188(sp)
 4002280:	20800017 	ldw	r2,0(r4)
 4002284:	21000104 	addi	r4,r4,4
 4002288:	d9002d15 	stw	r4,180(sp)
 400228c:	1140000d 	sth	r5,0(r2)
 4002290:	003a1606 	br	4000aec <__ram_exceptions_end+0xfabfc960>
 4002294:	9080100c 	andi	r2,r18,64
 4002298:	10008026 	beq	r2,zero,400249c <___vfprintf_internal_r+0x1a90>
 400229c:	d8c02d17 	ldw	r3,180(sp)
 40022a0:	1cc0000f 	ldh	r19,0(r3)
 40022a4:	18c00104 	addi	r3,r3,4
 40022a8:	d8c02d15 	stw	r3,180(sp)
 40022ac:	982dd7fa 	srai	r22,r19,31
 40022b0:	b005883a 	mov	r2,r22
 40022b4:	003b1f06 	br	4000f34 <__ram_exceptions_end+0xfabfcda8>
 40022b8:	9080100c 	andi	r2,r18,64
 40022bc:	d8002785 	stb	zero,158(sp)
 40022c0:	10008a1e 	bne	r2,zero,40024ec <___vfprintf_internal_r+0x1ae0>
 40022c4:	d9402d17 	ldw	r5,180(sp)
 40022c8:	d8c02917 	ldw	r3,164(sp)
 40022cc:	002d883a 	mov	r22,zero
 40022d0:	28800104 	addi	r2,r5,4
 40022d4:	2cc00017 	ldw	r19,0(r5)
 40022d8:	183e4b0e 	bge	r3,zero,4001c08 <__ram_exceptions_end+0xfabfda7c>
 40022dc:	9d86b03a 	or	r3,r19,r22
 40022e0:	d8802d15 	stw	r2,180(sp)
 40022e4:	183e4c1e 	bne	r3,zero,4001c18 <__ram_exceptions_end+0xfabfda8c>
 40022e8:	0039883a 	mov	fp,zero
 40022ec:	0005883a 	mov	r2,zero
 40022f0:	003d4006 	br	40017f4 <__ram_exceptions_end+0xfabfd668>
 40022f4:	01410074 	movhi	r5,1025
 40022f8:	297eb284 	addi	r5,r5,-1334
 40022fc:	d9402b15 	stw	r5,172(sp)
 4002300:	d9402b17 	ldw	r5,172(sp)
 4002304:	1c47883a 	add	r3,r3,r17
 4002308:	10800044 	addi	r2,r2,1
 400230c:	41400015 	stw	r5,0(r8)
 4002310:	44400115 	stw	r17,4(r8)
 4002314:	d8c02015 	stw	r3,128(sp)
 4002318:	d8801f15 	stw	r2,124(sp)
 400231c:	010001c4 	movi	r4,7
 4002320:	20bec816 	blt	r4,r2,4001e44 <__ram_exceptions_end+0xfabfdcb8>
 4002324:	42000204 	addi	r8,r8,8
 4002328:	003ecd06 	br	4001e60 <__ram_exceptions_end+0xfabfdcd4>
 400232c:	d9002917 	ldw	r4,164(sp)
 4002330:	d8002785 	stb	zero,158(sp)
 4002334:	203d2d16 	blt	r4,zero,40017ec <__ram_exceptions_end+0xfabfd660>
 4002338:	00bfdfc4 	movi	r2,-129
 400233c:	90a4703a 	and	r18,r18,r2
 4002340:	003a9106 	br	4000d88 <__ram_exceptions_end+0xfabfcbfc>
 4002344:	01010074 	movhi	r4,1025
 4002348:	213eb284 	addi	r4,r4,-1334
 400234c:	d9002b15 	stw	r4,172(sp)
 4002350:	003c0c06 	br	4001384 <__ram_exceptions_end+0xfabfd1f8>
 4002354:	d9002c17 	ldw	r4,176(sp)
 4002358:	d9801e04 	addi	r6,sp,120
 400235c:	b80b883a 	mov	r5,r23
 4002360:	40075240 	call	4007524 <__sprint_r>
 4002364:	103aab1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4002368:	d8c02017 	ldw	r3,128(sp)
 400236c:	da000404 	addi	r8,sp,16
 4002370:	003d4106 	br	4001878 <__ram_exceptions_end+0xfabfd6ec>
 4002374:	d8801f17 	ldw	r2,124(sp)
 4002378:	01410074 	movhi	r5,1025
 400237c:	01000044 	movi	r4,1
 4002380:	18c00044 	addi	r3,r3,1
 4002384:	10800044 	addi	r2,r2,1
 4002388:	297eb204 	addi	r5,r5,-1336
 400238c:	41000115 	stw	r4,4(r8)
 4002390:	41400015 	stw	r5,0(r8)
 4002394:	d8c02015 	stw	r3,128(sp)
 4002398:	d8801f15 	stw	r2,124(sp)
 400239c:	010001c4 	movi	r4,7
 40023a0:	20805c16 	blt	r4,r2,4002514 <___vfprintf_internal_r+0x1b08>
 40023a4:	42000204 	addi	r8,r8,8
 40023a8:	8800041e 	bne	r17,zero,40023bc <___vfprintf_internal_r+0x19b0>
 40023ac:	d8803317 	ldw	r2,204(sp)
 40023b0:	1000021e 	bne	r2,zero,40023bc <___vfprintf_internal_r+0x19b0>
 40023b4:	9080004c 	andi	r2,r18,1
 40023b8:	103c0926 	beq	r2,zero,40013e0 <__ram_exceptions_end+0xfabfd254>
 40023bc:	d9003717 	ldw	r4,220(sp)
 40023c0:	d8801f17 	ldw	r2,124(sp)
 40023c4:	d9403417 	ldw	r5,208(sp)
 40023c8:	20c7883a 	add	r3,r4,r3
 40023cc:	10800044 	addi	r2,r2,1
 40023d0:	41000115 	stw	r4,4(r8)
 40023d4:	41400015 	stw	r5,0(r8)
 40023d8:	d8c02015 	stw	r3,128(sp)
 40023dc:	d8801f15 	stw	r2,124(sp)
 40023e0:	010001c4 	movi	r4,7
 40023e4:	20812116 	blt	r4,r2,400286c <___vfprintf_internal_r+0x1e60>
 40023e8:	42000204 	addi	r8,r8,8
 40023ec:	0463c83a 	sub	r17,zero,r17
 40023f0:	0440730e 	bge	zero,r17,40025c0 <___vfprintf_internal_r+0x1bb4>
 40023f4:	05800404 	movi	r22,16
 40023f8:	b440860e 	bge	r22,r17,4002614 <___vfprintf_internal_r+0x1c08>
 40023fc:	01410074 	movhi	r5,1025
 4002400:	297eb284 	addi	r5,r5,-1334
 4002404:	d9402b15 	stw	r5,172(sp)
 4002408:	070001c4 	movi	fp,7
 400240c:	dcc02c17 	ldw	r19,176(sp)
 4002410:	00000306 	br	4002420 <___vfprintf_internal_r+0x1a14>
 4002414:	42000204 	addi	r8,r8,8
 4002418:	8c7ffc04 	addi	r17,r17,-16
 400241c:	b440800e 	bge	r22,r17,4002620 <___vfprintf_internal_r+0x1c14>
 4002420:	18c00404 	addi	r3,r3,16
 4002424:	10800044 	addi	r2,r2,1
 4002428:	45000015 	stw	r20,0(r8)
 400242c:	45800115 	stw	r22,4(r8)
 4002430:	d8c02015 	stw	r3,128(sp)
 4002434:	d8801f15 	stw	r2,124(sp)
 4002438:	e0bff60e 	bge	fp,r2,4002414 <__ram_exceptions_end+0xfabfe288>
 400243c:	d9801e04 	addi	r6,sp,120
 4002440:	b80b883a 	mov	r5,r23
 4002444:	9809883a 	mov	r4,r19
 4002448:	40075240 	call	4007524 <__sprint_r>
 400244c:	103a711e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4002450:	d8c02017 	ldw	r3,128(sp)
 4002454:	d8801f17 	ldw	r2,124(sp)
 4002458:	da000404 	addi	r8,sp,16
 400245c:	003fee06 	br	4002418 <__ram_exceptions_end+0xfabfe28c>
 4002460:	00bfffc4 	movi	r2,-1
 4002464:	003a6f06 	br	4000e24 <__ram_exceptions_end+0xfabfcc98>
 4002468:	008011c4 	movi	r2,71
 400246c:	1440b816 	blt	r2,r17,4002750 <___vfprintf_internal_r+0x1d44>
 4002470:	04010074 	movhi	r16,1025
 4002474:	843ea404 	addi	r16,r16,-1392
 4002478:	00c000c4 	movi	r3,3
 400247c:	00bfdfc4 	movi	r2,-129
 4002480:	d8c02a15 	stw	r3,168(sp)
 4002484:	90a4703a 	and	r18,r18,r2
 4002488:	df002783 	ldbu	fp,158(sp)
 400248c:	d8c02e15 	stw	r3,184(sp)
 4002490:	d8002915 	stw	zero,164(sp)
 4002494:	d8003215 	stw	zero,200(sp)
 4002498:	003b2906 	br	4001140 <__ram_exceptions_end+0xfabfcfb4>
 400249c:	d9002d17 	ldw	r4,180(sp)
 40024a0:	24c00017 	ldw	r19,0(r4)
 40024a4:	21000104 	addi	r4,r4,4
 40024a8:	d9002d15 	stw	r4,180(sp)
 40024ac:	982dd7fa 	srai	r22,r19,31
 40024b0:	b005883a 	mov	r2,r22
 40024b4:	003a9f06 	br	4000f34 <__ram_exceptions_end+0xfabfcda8>
 40024b8:	d9402d17 	ldw	r5,180(sp)
 40024bc:	d8c02f17 	ldw	r3,188(sp)
 40024c0:	28800017 	ldw	r2,0(r5)
 40024c4:	29400104 	addi	r5,r5,4
 40024c8:	d9402d15 	stw	r5,180(sp)
 40024cc:	10c00015 	stw	r3,0(r2)
 40024d0:	00398606 	br	4000aec <__ram_exceptions_end+0xfabfc960>
 40024d4:	d9402d17 	ldw	r5,180(sp)
 40024d8:	002d883a 	mov	r22,zero
 40024dc:	2cc00017 	ldw	r19,0(r5)
 40024e0:	29400104 	addi	r5,r5,4
 40024e4:	d9402d15 	stw	r5,180(sp)
 40024e8:	003c2306 	br	4001578 <__ram_exceptions_end+0xfabfd3ec>
 40024ec:	d8c02d17 	ldw	r3,180(sp)
 40024f0:	d9002917 	ldw	r4,164(sp)
 40024f4:	002d883a 	mov	r22,zero
 40024f8:	18800104 	addi	r2,r3,4
 40024fc:	1cc0000b 	ldhu	r19,0(r3)
 4002500:	203dc10e 	bge	r4,zero,4001c08 <__ram_exceptions_end+0xfabfda7c>
 4002504:	003f7506 	br	40022dc <__ram_exceptions_end+0xfabfe150>
 4002508:	04010074 	movhi	r16,1025
 400250c:	843ea204 	addi	r16,r16,-1400
 4002510:	003acc06 	br	4001044 <__ram_exceptions_end+0xfabfceb8>
 4002514:	d9002c17 	ldw	r4,176(sp)
 4002518:	d9801e04 	addi	r6,sp,120
 400251c:	b80b883a 	mov	r5,r23
 4002520:	40075240 	call	4007524 <__sprint_r>
 4002524:	103a3b1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4002528:	dc402617 	ldw	r17,152(sp)
 400252c:	d8c02017 	ldw	r3,128(sp)
 4002530:	da000404 	addi	r8,sp,16
 4002534:	003f9c06 	br	40023a8 <__ram_exceptions_end+0xfabfe21c>
 4002538:	ac400043 	ldbu	r17,1(r21)
 400253c:	94800814 	ori	r18,r18,32
 4002540:	ad400044 	addi	r21,r21,1
 4002544:	8c403fcc 	andi	r17,r17,255
 4002548:	8c40201c 	xori	r17,r17,128
 400254c:	8c7fe004 	addi	r17,r17,-128
 4002550:	00398f06 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4002554:	d8c02d15 	stw	r3,180(sp)
 4002558:	0039883a 	mov	fp,zero
 400255c:	003e3506 	br	4001e34 <__ram_exceptions_end+0xfabfdca8>
 4002560:	d9002c17 	ldw	r4,176(sp)
 4002564:	d9801e04 	addi	r6,sp,120
 4002568:	b80b883a 	mov	r5,r23
 400256c:	40075240 	call	4007524 <__sprint_r>
 4002570:	103a281e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4002574:	d8c02017 	ldw	r3,128(sp)
 4002578:	da000404 	addi	r8,sp,16
 400257c:	003cd006 	br	40018c0 <__ram_exceptions_end+0xfabfd734>
 4002580:	8009883a 	mov	r4,r16
 4002584:	da003d15 	stw	r8,244(sp)
 4002588:	40073900 	call	4007390 <strlen>
 400258c:	d8802e15 	stw	r2,184(sp)
 4002590:	da003d17 	ldw	r8,244(sp)
 4002594:	103c340e 	bge	r2,zero,4001668 <__ram_exceptions_end+0xfabfd4dc>
 4002598:	0005883a 	mov	r2,zero
 400259c:	003c3206 	br	4001668 <__ram_exceptions_end+0xfabfd4dc>
 40025a0:	d9002c17 	ldw	r4,176(sp)
 40025a4:	d9801e04 	addi	r6,sp,120
 40025a8:	b80b883a 	mov	r5,r23
 40025ac:	40075240 	call	4007524 <__sprint_r>
 40025b0:	103a181e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 40025b4:	d8c02017 	ldw	r3,128(sp)
 40025b8:	d8801f17 	ldw	r2,124(sp)
 40025bc:	da000404 	addi	r8,sp,16
 40025c0:	d9403317 	ldw	r5,204(sp)
 40025c4:	10800044 	addi	r2,r2,1
 40025c8:	44000015 	stw	r16,0(r8)
 40025cc:	28c7883a 	add	r3,r5,r3
 40025d0:	003b7d06 	br	40013c8 <__ram_exceptions_end+0xfabfd23c>
 40025d4:	01010074 	movhi	r4,1025
 40025d8:	213eb684 	addi	r4,r4,-1318
 40025dc:	d9003515 	stw	r4,212(sp)
 40025e0:	003b1406 	br	4001234 <__ram_exceptions_end+0xfabfd0a8>
 40025e4:	013fffc4 	movi	r4,-1
 40025e8:	003a3506 	br	4000ec0 <__ram_exceptions_end+0xfabfcd34>
 40025ec:	0023883a 	mov	r17,zero
 40025f0:	003d9d06 	br	4001c68 <__ram_exceptions_end+0xfabfdadc>
 40025f4:	d9002c17 	ldw	r4,176(sp)
 40025f8:	d9801e04 	addi	r6,sp,120
 40025fc:	b80b883a 	mov	r5,r23
 4002600:	40075240 	call	4007524 <__sprint_r>
 4002604:	103a031e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4002608:	d8c02017 	ldw	r3,128(sp)
 400260c:	da000404 	addi	r8,sp,16
 4002610:	003d9406 	br	4001c64 <__ram_exceptions_end+0xfabfdad8>
 4002614:	01010074 	movhi	r4,1025
 4002618:	213eb284 	addi	r4,r4,-1334
 400261c:	d9002b15 	stw	r4,172(sp)
 4002620:	d9002b17 	ldw	r4,172(sp)
 4002624:	1c47883a 	add	r3,r3,r17
 4002628:	10800044 	addi	r2,r2,1
 400262c:	41000015 	stw	r4,0(r8)
 4002630:	44400115 	stw	r17,4(r8)
 4002634:	d8c02015 	stw	r3,128(sp)
 4002638:	d8801f15 	stw	r2,124(sp)
 400263c:	010001c4 	movi	r4,7
 4002640:	20bfd716 	blt	r4,r2,40025a0 <__ram_exceptions_end+0xfabfe414>
 4002644:	42000204 	addi	r8,r8,8
 4002648:	003fdd06 	br	40025c0 <__ram_exceptions_end+0xfabfe434>
 400264c:	d9002c17 	ldw	r4,176(sp)
 4002650:	d9801e04 	addi	r6,sp,120
 4002654:	b80b883a 	mov	r5,r23
 4002658:	40075240 	call	4007524 <__sprint_r>
 400265c:	1039ed1e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4002660:	d8802617 	ldw	r2,152(sp)
 4002664:	d8c02017 	ldw	r3,128(sp)
 4002668:	da000404 	addi	r8,sp,16
 400266c:	003e1006 	br	4001eb0 <__ram_exceptions_end+0xfabfdd24>
 4002670:	00800044 	movi	r2,1
 4002674:	10803fcc 	andi	r2,r2,255
 4002678:	00c00044 	movi	r3,1
 400267c:	10fa3526 	beq	r2,r3,4000f54 <__ram_exceptions_end+0xfabfcdc8>
 4002680:	00c00084 	movi	r3,2
 4002684:	10fbcb26 	beq	r2,r3,40015b4 <__ram_exceptions_end+0xfabfd428>
 4002688:	003a8f06 	br	40010c8 <__ram_exceptions_end+0xfabfcf3c>
 400268c:	01010074 	movhi	r4,1025
 4002690:	213eb684 	addi	r4,r4,-1318
 4002694:	d9003515 	stw	r4,212(sp)
 4002698:	003b7606 	br	4001474 <__ram_exceptions_end+0xfabfd2e8>
 400269c:	d8802917 	ldw	r2,164(sp)
 40026a0:	00c00184 	movi	r3,6
 40026a4:	1880012e 	bgeu	r3,r2,40026ac <___vfprintf_internal_r+0x1ca0>
 40026a8:	1805883a 	mov	r2,r3
 40026ac:	d8802e15 	stw	r2,184(sp)
 40026b0:	1000ef16 	blt	r2,zero,4002a70 <___vfprintf_internal_r+0x2064>
 40026b4:	04010074 	movhi	r16,1025
 40026b8:	d8802a15 	stw	r2,168(sp)
 40026bc:	dcc02d15 	stw	r19,180(sp)
 40026c0:	d8002915 	stw	zero,164(sp)
 40026c4:	d8003215 	stw	zero,200(sp)
 40026c8:	843eb004 	addi	r16,r16,-1344
 40026cc:	0039883a 	mov	fp,zero
 40026d0:	003aa206 	br	400115c <__ram_exceptions_end+0xfabfcfd0>
 40026d4:	0021883a 	mov	r16,zero
 40026d8:	003e0706 	br	4001ef8 <__ram_exceptions_end+0xfabfdd6c>
 40026dc:	d9002c17 	ldw	r4,176(sp)
 40026e0:	d9801e04 	addi	r6,sp,120
 40026e4:	b80b883a 	mov	r5,r23
 40026e8:	40075240 	call	4007524 <__sprint_r>
 40026ec:	1039c91e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 40026f0:	d8802617 	ldw	r2,152(sp)
 40026f4:	d9403317 	ldw	r5,204(sp)
 40026f8:	d8c02017 	ldw	r3,128(sp)
 40026fc:	da000404 	addi	r8,sp,16
 4002700:	2885c83a 	sub	r2,r5,r2
 4002704:	003dfb06 	br	4001ef4 <__ram_exceptions_end+0xfabfdd68>
 4002708:	9080004c 	andi	r2,r18,1
 400270c:	103e8f1e 	bne	r2,zero,400214c <__ram_exceptions_end+0xfabfdfc0>
 4002710:	d8802117 	ldw	r2,132(sp)
 4002714:	003e9e06 	br	4002190 <__ram_exceptions_end+0xfabfe004>
 4002718:	1025883a 	mov	r18,r2
 400271c:	0039883a 	mov	fp,zero
 4002720:	00800084 	movi	r2,2
 4002724:	003fd306 	br	4002674 <__ram_exceptions_end+0xfabfe4e8>
 4002728:	07000b44 	movi	fp,45
 400272c:	df002785 	stb	fp,158(sp)
 4002730:	003a4006 	br	4001034 <__ram_exceptions_end+0xfabfcea8>
 4002734:	00c00b44 	movi	r3,45
 4002738:	d8c02785 	stb	r3,158(sp)
 400273c:	d8802a15 	stw	r2,168(sp)
 4002740:	dc802b17 	ldw	r18,172(sp)
 4002744:	d8002915 	stw	zero,164(sp)
 4002748:	07000b44 	movi	fp,45
 400274c:	003a8006 	br	4001150 <__ram_exceptions_end+0xfabfcfc4>
 4002750:	04010074 	movhi	r16,1025
 4002754:	843ea504 	addi	r16,r16,-1388
 4002758:	003f4706 	br	4002478 <__ram_exceptions_end+0xfabfe2ec>
 400275c:	d8c02d17 	ldw	r3,180(sp)
 4002760:	d9002f17 	ldw	r4,188(sp)
 4002764:	18800017 	ldw	r2,0(r3)
 4002768:	18c00104 	addi	r3,r3,4
 400276c:	d8c02d15 	stw	r3,180(sp)
 4002770:	11000015 	stw	r4,0(r2)
 4002774:	0038dd06 	br	4000aec <__ram_exceptions_end+0xfabfc960>
 4002778:	dd802617 	ldw	r22,152(sp)
 400277c:	00bfff44 	movi	r2,-3
 4002780:	b0801c16 	blt	r22,r2,40027f4 <___vfprintf_internal_r+0x1de8>
 4002784:	d9402917 	ldw	r5,164(sp)
 4002788:	2d801a16 	blt	r5,r22,40027f4 <___vfprintf_internal_r+0x1de8>
 400278c:	dd803215 	stw	r22,200(sp)
 4002790:	003e8906 	br	40021b8 <__ram_exceptions_end+0xfabfe02c>
 4002794:	01010074 	movhi	r4,1025
 4002798:	213eb284 	addi	r4,r4,-1334
 400279c:	d9002b15 	stw	r4,172(sp)
 40027a0:	003c9106 	br	40019e8 <__ram_exceptions_end+0xfabfd85c>
 40027a4:	e005883a 	mov	r2,fp
 40027a8:	003e7906 	br	4002190 <__ram_exceptions_end+0xfabfe004>
 40027ac:	d9402917 	ldw	r5,164(sp)
 40027b0:	df002783 	ldbu	fp,158(sp)
 40027b4:	dcc02d15 	stw	r19,180(sp)
 40027b8:	d9402a15 	stw	r5,168(sp)
 40027bc:	d9402e15 	stw	r5,184(sp)
 40027c0:	d8002915 	stw	zero,164(sp)
 40027c4:	d8003215 	stw	zero,200(sp)
 40027c8:	003a5d06 	br	4001140 <__ram_exceptions_end+0xfabfcfb4>
 40027cc:	9080004c 	andi	r2,r18,1
 40027d0:	0039883a 	mov	fp,zero
 40027d4:	10000426 	beq	r2,zero,40027e8 <___vfprintf_internal_r+0x1ddc>
 40027d8:	00800c04 	movi	r2,48
 40027dc:	dc001dc4 	addi	r16,sp,119
 40027e0:	d8801dc5 	stb	r2,119(sp)
 40027e4:	003b8006 	br	40015e8 <__ram_exceptions_end+0xfabfd45c>
 40027e8:	d8002e15 	stw	zero,184(sp)
 40027ec:	dc001e04 	addi	r16,sp,120
 40027f0:	003a4d06 	br	4001128 <__ram_exceptions_end+0xfabfcf9c>
 40027f4:	8c7fff84 	addi	r17,r17,-2
 40027f8:	b5bfffc4 	addi	r22,r22,-1
 40027fc:	dd802615 	stw	r22,152(sp)
 4002800:	dc4022c5 	stb	r17,139(sp)
 4002804:	b000bf16 	blt	r22,zero,4002b04 <___vfprintf_internal_r+0x20f8>
 4002808:	00800ac4 	movi	r2,43
 400280c:	d8802305 	stb	r2,140(sp)
 4002810:	00800244 	movi	r2,9
 4002814:	15807016 	blt	r2,r22,40029d8 <___vfprintf_internal_r+0x1fcc>
 4002818:	00800c04 	movi	r2,48
 400281c:	b5800c04 	addi	r22,r22,48
 4002820:	d8802345 	stb	r2,141(sp)
 4002824:	dd802385 	stb	r22,142(sp)
 4002828:	d88023c4 	addi	r2,sp,143
 400282c:	df0022c4 	addi	fp,sp,139
 4002830:	d8c03317 	ldw	r3,204(sp)
 4002834:	1739c83a 	sub	fp,r2,fp
 4002838:	d9003317 	ldw	r4,204(sp)
 400283c:	e0c7883a 	add	r3,fp,r3
 4002840:	df003a15 	stw	fp,232(sp)
 4002844:	d8c02e15 	stw	r3,184(sp)
 4002848:	00800044 	movi	r2,1
 400284c:	1100b30e 	bge	r2,r4,4002b1c <___vfprintf_internal_r+0x2110>
 4002850:	d8c02e17 	ldw	r3,184(sp)
 4002854:	18c00044 	addi	r3,r3,1
 4002858:	d8c02e15 	stw	r3,184(sp)
 400285c:	1805883a 	mov	r2,r3
 4002860:	1800ac16 	blt	r3,zero,4002b14 <___vfprintf_internal_r+0x2108>
 4002864:	d8003215 	stw	zero,200(sp)
 4002868:	003e5d06 	br	40021e0 <__ram_exceptions_end+0xfabfe054>
 400286c:	d9002c17 	ldw	r4,176(sp)
 4002870:	d9801e04 	addi	r6,sp,120
 4002874:	b80b883a 	mov	r5,r23
 4002878:	40075240 	call	4007524 <__sprint_r>
 400287c:	1039651e 	bne	r2,zero,4000e14 <__ram_exceptions_end+0xfabfcc88>
 4002880:	dc402617 	ldw	r17,152(sp)
 4002884:	d8c02017 	ldw	r3,128(sp)
 4002888:	d8801f17 	ldw	r2,124(sp)
 400288c:	da000404 	addi	r8,sp,16
 4002890:	003ed606 	br	40023ec <__ram_exceptions_end+0xfabfe260>
 4002894:	582b883a 	mov	r21,r11
 4002898:	d8002915 	stw	zero,164(sp)
 400289c:	0038bd06 	br	4000b94 <__ram_exceptions_end+0xfabfca08>
 40028a0:	d8802917 	ldw	r2,164(sp)
 40028a4:	103e071e 	bne	r2,zero,40020c4 <__ram_exceptions_end+0xfabfdf38>
 40028a8:	dc002915 	stw	r16,164(sp)
 40028ac:	003e0506 	br	40020c4 <__ram_exceptions_end+0xfabfdf38>
 40028b0:	d9002917 	ldw	r4,164(sp)
 40028b4:	20c00044 	addi	r3,r4,1
 40028b8:	003e0f06 	br	40020f8 <__ram_exceptions_end+0xfabfdf6c>
 40028bc:	01400184 	movi	r5,6
 40028c0:	d9402915 	stw	r5,164(sp)
 40028c4:	003dff06 	br	40020c4 <__ram_exceptions_end+0xfabfdf38>
 40028c8:	d8802104 	addi	r2,sp,132
 40028cc:	d8800315 	stw	r2,12(sp)
 40028d0:	d8802504 	addi	r2,sp,148
 40028d4:	d8800215 	stw	r2,8(sp)
 40028d8:	d8802604 	addi	r2,sp,152
 40028dc:	d8800115 	stw	r2,4(sp)
 40028e0:	d8802917 	ldw	r2,164(sp)
 40028e4:	d9403617 	ldw	r5,216(sp)
 40028e8:	d9002c17 	ldw	r4,176(sp)
 40028ec:	d8800015 	stw	r2,0(sp)
 40028f0:	01c000c4 	movi	r7,3
 40028f4:	980d883a 	mov	r6,r19
 40028f8:	da003d15 	stw	r8,244(sp)
 40028fc:	40030300 	call	4003030 <_dtoa_r>
 4002900:	d8c02917 	ldw	r3,164(sp)
 4002904:	da003d17 	ldw	r8,244(sp)
 4002908:	1021883a 	mov	r16,r2
 400290c:	10f9883a 	add	fp,r2,r3
 4002910:	81000007 	ldb	r4,0(r16)
 4002914:	00800c04 	movi	r2,48
 4002918:	20805e26 	beq	r4,r2,4002a94 <___vfprintf_internal_r+0x2088>
 400291c:	d8c02617 	ldw	r3,152(sp)
 4002920:	e0f9883a 	add	fp,fp,r3
 4002924:	003e0a06 	br	4002150 <__ram_exceptions_end+0xfabfdfc4>
 4002928:	00c00b44 	movi	r3,45
 400292c:	24e0003c 	xorhi	r19,r4,32768
 4002930:	d8c02a05 	stb	r3,168(sp)
 4002934:	003de906 	br	40020dc <__ram_exceptions_end+0xfabfdf50>
 4002938:	d8c03217 	ldw	r3,200(sp)
 400293c:	00c07a0e 	bge	zero,r3,4002b28 <___vfprintf_internal_r+0x211c>
 4002940:	00800044 	movi	r2,1
 4002944:	d9003317 	ldw	r4,204(sp)
 4002948:	1105883a 	add	r2,r2,r4
 400294c:	d8802e15 	stw	r2,184(sp)
 4002950:	10004e16 	blt	r2,zero,4002a8c <___vfprintf_internal_r+0x2080>
 4002954:	044019c4 	movi	r17,103
 4002958:	003e2106 	br	40021e0 <__ram_exceptions_end+0xfabfe054>
 400295c:	d9002917 	ldw	r4,164(sp)
 4002960:	d8802104 	addi	r2,sp,132
 4002964:	d8800315 	stw	r2,12(sp)
 4002968:	d9000015 	stw	r4,0(sp)
 400296c:	d8802504 	addi	r2,sp,148
 4002970:	d9403617 	ldw	r5,216(sp)
 4002974:	d9002c17 	ldw	r4,176(sp)
 4002978:	d8800215 	stw	r2,8(sp)
 400297c:	d8802604 	addi	r2,sp,152
 4002980:	d8800115 	stw	r2,4(sp)
 4002984:	01c000c4 	movi	r7,3
 4002988:	980d883a 	mov	r6,r19
 400298c:	da003d15 	stw	r8,244(sp)
 4002990:	40030300 	call	4003030 <_dtoa_r>
 4002994:	d8c02917 	ldw	r3,164(sp)
 4002998:	da003d17 	ldw	r8,244(sp)
 400299c:	1021883a 	mov	r16,r2
 40029a0:	00801184 	movi	r2,70
 40029a4:	80f9883a 	add	fp,r16,r3
 40029a8:	88bfd926 	beq	r17,r2,4002910 <__ram_exceptions_end+0xfabfe784>
 40029ac:	003de806 	br	4002150 <__ram_exceptions_end+0xfabfdfc4>
 40029b0:	d9002917 	ldw	r4,164(sp)
 40029b4:	00c04d0e 	bge	zero,r3,4002aec <___vfprintf_internal_r+0x20e0>
 40029b8:	2000441e 	bne	r4,zero,4002acc <___vfprintf_internal_r+0x20c0>
 40029bc:	9480004c 	andi	r18,r18,1
 40029c0:	9000421e 	bne	r18,zero,4002acc <___vfprintf_internal_r+0x20c0>
 40029c4:	1805883a 	mov	r2,r3
 40029c8:	18007016 	blt	r3,zero,4002b8c <___vfprintf_internal_r+0x2180>
 40029cc:	d8c03217 	ldw	r3,200(sp)
 40029d0:	d8c02e15 	stw	r3,184(sp)
 40029d4:	003e0206 	br	40021e0 <__ram_exceptions_end+0xfabfe054>
 40029d8:	df0022c4 	addi	fp,sp,139
 40029dc:	dc002915 	stw	r16,164(sp)
 40029e0:	4027883a 	mov	r19,r8
 40029e4:	e021883a 	mov	r16,fp
 40029e8:	b009883a 	mov	r4,r22
 40029ec:	01400284 	movi	r5,10
 40029f0:	40008700 	call	4000870 <__modsi3>
 40029f4:	10800c04 	addi	r2,r2,48
 40029f8:	843fffc4 	addi	r16,r16,-1
 40029fc:	b009883a 	mov	r4,r22
 4002a00:	01400284 	movi	r5,10
 4002a04:	80800005 	stb	r2,0(r16)
 4002a08:	40007ec0 	call	40007ec <__divsi3>
 4002a0c:	102d883a 	mov	r22,r2
 4002a10:	00800244 	movi	r2,9
 4002a14:	15bff416 	blt	r2,r22,40029e8 <__ram_exceptions_end+0xfabfe85c>
 4002a18:	9811883a 	mov	r8,r19
 4002a1c:	b0800c04 	addi	r2,r22,48
 4002a20:	8027883a 	mov	r19,r16
 4002a24:	997fffc4 	addi	r5,r19,-1
 4002a28:	98bfffc5 	stb	r2,-1(r19)
 4002a2c:	dc002917 	ldw	r16,164(sp)
 4002a30:	2f006a2e 	bgeu	r5,fp,4002bdc <___vfprintf_internal_r+0x21d0>
 4002a34:	d9c02384 	addi	r7,sp,142
 4002a38:	3ccfc83a 	sub	r7,r7,r19
 4002a3c:	d9002344 	addi	r4,sp,141
 4002a40:	e1cf883a 	add	r7,fp,r7
 4002a44:	00000106 	br	4002a4c <___vfprintf_internal_r+0x2040>
 4002a48:	28800003 	ldbu	r2,0(r5)
 4002a4c:	20800005 	stb	r2,0(r4)
 4002a50:	21000044 	addi	r4,r4,1
 4002a54:	29400044 	addi	r5,r5,1
 4002a58:	393ffb1e 	bne	r7,r4,4002a48 <__ram_exceptions_end+0xfabfe8bc>
 4002a5c:	d8802304 	addi	r2,sp,140
 4002a60:	14c5c83a 	sub	r2,r2,r19
 4002a64:	d8c02344 	addi	r3,sp,141
 4002a68:	1885883a 	add	r2,r3,r2
 4002a6c:	003f7006 	br	4002830 <__ram_exceptions_end+0xfabfe6a4>
 4002a70:	0005883a 	mov	r2,zero
 4002a74:	003f0f06 	br	40026b4 <__ram_exceptions_end+0xfabfe528>
 4002a78:	d8c03217 	ldw	r3,200(sp)
 4002a7c:	18c00044 	addi	r3,r3,1
 4002a80:	d8c02e15 	stw	r3,184(sp)
 4002a84:	1805883a 	mov	r2,r3
 4002a88:	183fb20e 	bge	r3,zero,4002954 <__ram_exceptions_end+0xfabfe7c8>
 4002a8c:	0005883a 	mov	r2,zero
 4002a90:	003fb006 	br	4002954 <__ram_exceptions_end+0xfabfe7c8>
 4002a94:	d9003617 	ldw	r4,216(sp)
 4002a98:	000d883a 	mov	r6,zero
 4002a9c:	000f883a 	mov	r7,zero
 4002aa0:	980b883a 	mov	r5,r19
 4002aa4:	d8c03c15 	stw	r3,240(sp)
 4002aa8:	da003d15 	stw	r8,244(sp)
 4002aac:	400bb640 	call	400bb64 <__eqdf2>
 4002ab0:	d8c03c17 	ldw	r3,240(sp)
 4002ab4:	da003d17 	ldw	r8,244(sp)
 4002ab8:	103f9826 	beq	r2,zero,400291c <__ram_exceptions_end+0xfabfe790>
 4002abc:	00800044 	movi	r2,1
 4002ac0:	10c7c83a 	sub	r3,r2,r3
 4002ac4:	d8c02615 	stw	r3,152(sp)
 4002ac8:	003f9506 	br	4002920 <__ram_exceptions_end+0xfabfe794>
 4002acc:	d9002917 	ldw	r4,164(sp)
 4002ad0:	d8c03217 	ldw	r3,200(sp)
 4002ad4:	20800044 	addi	r2,r4,1
 4002ad8:	1885883a 	add	r2,r3,r2
 4002adc:	d8802e15 	stw	r2,184(sp)
 4002ae0:	103dbf0e 	bge	r2,zero,40021e0 <__ram_exceptions_end+0xfabfe054>
 4002ae4:	0005883a 	mov	r2,zero
 4002ae8:	003dbd06 	br	40021e0 <__ram_exceptions_end+0xfabfe054>
 4002aec:	2000211e 	bne	r4,zero,4002b74 <___vfprintf_internal_r+0x2168>
 4002af0:	9480004c 	andi	r18,r18,1
 4002af4:	90001f1e 	bne	r18,zero,4002b74 <___vfprintf_internal_r+0x2168>
 4002af8:	00800044 	movi	r2,1
 4002afc:	d8802e15 	stw	r2,184(sp)
 4002b00:	003db706 	br	40021e0 <__ram_exceptions_end+0xfabfe054>
 4002b04:	00800b44 	movi	r2,45
 4002b08:	05adc83a 	sub	r22,zero,r22
 4002b0c:	d8802305 	stb	r2,140(sp)
 4002b10:	003f3f06 	br	4002810 <__ram_exceptions_end+0xfabfe684>
 4002b14:	0005883a 	mov	r2,zero
 4002b18:	003f5206 	br	4002864 <__ram_exceptions_end+0xfabfe6d8>
 4002b1c:	90a4703a 	and	r18,r18,r2
 4002b20:	903f4e26 	beq	r18,zero,400285c <__ram_exceptions_end+0xfabfe6d0>
 4002b24:	003f4a06 	br	4002850 <__ram_exceptions_end+0xfabfe6c4>
 4002b28:	00800084 	movi	r2,2
 4002b2c:	10c5c83a 	sub	r2,r2,r3
 4002b30:	003f8406 	br	4002944 <__ram_exceptions_end+0xfabfe7b8>
 4002b34:	d8802d17 	ldw	r2,180(sp)
 4002b38:	d9002d17 	ldw	r4,180(sp)
 4002b3c:	ac400043 	ldbu	r17,1(r21)
 4002b40:	10800017 	ldw	r2,0(r2)
 4002b44:	582b883a 	mov	r21,r11
 4002b48:	d8802915 	stw	r2,164(sp)
 4002b4c:	20800104 	addi	r2,r4,4
 4002b50:	d9002917 	ldw	r4,164(sp)
 4002b54:	d8802d15 	stw	r2,180(sp)
 4002b58:	203e7a0e 	bge	r4,zero,4002544 <__ram_exceptions_end+0xfabfe3b8>
 4002b5c:	8c403fcc 	andi	r17,r17,255
 4002b60:	00bfffc4 	movi	r2,-1
 4002b64:	8c40201c 	xori	r17,r17,128
 4002b68:	d8802915 	stw	r2,164(sp)
 4002b6c:	8c7fe004 	addi	r17,r17,-128
 4002b70:	00380706 	br	4000b90 <__ram_exceptions_end+0xfabfca04>
 4002b74:	d8c02917 	ldw	r3,164(sp)
 4002b78:	18c00084 	addi	r3,r3,2
 4002b7c:	d8c02e15 	stw	r3,184(sp)
 4002b80:	1805883a 	mov	r2,r3
 4002b84:	183d960e 	bge	r3,zero,40021e0 <__ram_exceptions_end+0xfabfe054>
 4002b88:	003fd606 	br	4002ae4 <__ram_exceptions_end+0xfabfe958>
 4002b8c:	0005883a 	mov	r2,zero
 4002b90:	003f8e06 	br	40029cc <__ram_exceptions_end+0xfabfe840>
 4002b94:	9080004c 	andi	r2,r18,1
 4002b98:	103f811e 	bne	r2,zero,40029a0 <__ram_exceptions_end+0xfabfe814>
 4002b9c:	d8802117 	ldw	r2,132(sp)
 4002ba0:	1405c83a 	sub	r2,r2,r16
 4002ba4:	d8803315 	stw	r2,204(sp)
 4002ba8:	b47ef326 	beq	r22,r17,4002778 <__ram_exceptions_end+0xfabfe5ec>
 4002bac:	dd802617 	ldw	r22,152(sp)
 4002bb0:	003f1106 	br	40027f8 <__ram_exceptions_end+0xfabfe66c>
 4002bb4:	d9c02785 	stb	r7,158(sp)
 4002bb8:	00390406 	br	4000fcc <__ram_exceptions_end+0xfabfce40>
 4002bbc:	d9c02785 	stb	r7,158(sp)
 4002bc0:	0038d306 	br	4000f10 <__ram_exceptions_end+0xfabfcd84>
 4002bc4:	d9c02785 	stb	r7,158(sp)
 4002bc8:	003a6106 	br	4001550 <__ram_exceptions_end+0xfabfd3c4>
 4002bcc:	d9c02785 	stb	r7,158(sp)
 4002bd0:	003af806 	br	40017b4 <__ram_exceptions_end+0xfabfd628>
 4002bd4:	0005883a 	mov	r2,zero
 4002bd8:	003d7e06 	br	40021d4 <__ram_exceptions_end+0xfabfe048>
 4002bdc:	d8802344 	addi	r2,sp,141
 4002be0:	003f1306 	br	4002830 <__ram_exceptions_end+0xfabfe6a4>
 4002be4:	d9c02785 	stb	r7,158(sp)
 4002be8:	00392306 	br	4001078 <__ram_exceptions_end+0xfabfceec>
 4002bec:	d9c02785 	stb	r7,158(sp)
 4002bf0:	003aa906 	br	4001698 <__ram_exceptions_end+0xfabfd50c>
 4002bf4:	d9c02785 	stb	r7,158(sp)
 4002bf8:	003a3d06 	br	40014f0 <__ram_exceptions_end+0xfabfd364>
 4002bfc:	d9c02785 	stb	r7,158(sp)
 4002c00:	003aca06 	br	400172c <__ram_exceptions_end+0xfabfd5a0>

04002c04 <__vfprintf_internal>:
 4002c04:	00810074 	movhi	r2,1025
 4002c08:	10826504 	addi	r2,r2,2452
 4002c0c:	300f883a 	mov	r7,r6
 4002c10:	280d883a 	mov	r6,r5
 4002c14:	200b883a 	mov	r5,r4
 4002c18:	11000017 	ldw	r4,0(r2)
 4002c1c:	4000a0c1 	jmpi	4000a0c <___vfprintf_internal_r>

04002c20 <__sbprintf>:
 4002c20:	2880030b 	ldhu	r2,12(r5)
 4002c24:	2ac01917 	ldw	r11,100(r5)
 4002c28:	2a80038b 	ldhu	r10,14(r5)
 4002c2c:	2a400717 	ldw	r9,28(r5)
 4002c30:	2a000917 	ldw	r8,36(r5)
 4002c34:	defee204 	addi	sp,sp,-1144
 4002c38:	00c10004 	movi	r3,1024
 4002c3c:	dc011a15 	stw	r16,1128(sp)
 4002c40:	10bfff4c 	andi	r2,r2,65533
 4002c44:	2821883a 	mov	r16,r5
 4002c48:	d8cb883a 	add	r5,sp,r3
 4002c4c:	dc811c15 	stw	r18,1136(sp)
 4002c50:	dc411b15 	stw	r17,1132(sp)
 4002c54:	dfc11d15 	stw	ra,1140(sp)
 4002c58:	2025883a 	mov	r18,r4
 4002c5c:	d881030d 	sth	r2,1036(sp)
 4002c60:	dac11915 	stw	r11,1124(sp)
 4002c64:	da81038d 	sth	r10,1038(sp)
 4002c68:	da410715 	stw	r9,1052(sp)
 4002c6c:	da010915 	stw	r8,1060(sp)
 4002c70:	dec10015 	stw	sp,1024(sp)
 4002c74:	dec10415 	stw	sp,1040(sp)
 4002c78:	d8c10215 	stw	r3,1032(sp)
 4002c7c:	d8c10515 	stw	r3,1044(sp)
 4002c80:	d8010615 	stw	zero,1048(sp)
 4002c84:	4000a0c0 	call	4000a0c <___vfprintf_internal_r>
 4002c88:	1023883a 	mov	r17,r2
 4002c8c:	10000416 	blt	r2,zero,4002ca0 <__sbprintf+0x80>
 4002c90:	d9410004 	addi	r5,sp,1024
 4002c94:	9009883a 	mov	r4,r18
 4002c98:	40048d40 	call	40048d4 <_fflush_r>
 4002c9c:	10000d1e 	bne	r2,zero,4002cd4 <__sbprintf+0xb4>
 4002ca0:	d881030b 	ldhu	r2,1036(sp)
 4002ca4:	1080100c 	andi	r2,r2,64
 4002ca8:	10000326 	beq	r2,zero,4002cb8 <__sbprintf+0x98>
 4002cac:	8080030b 	ldhu	r2,12(r16)
 4002cb0:	10801014 	ori	r2,r2,64
 4002cb4:	8080030d 	sth	r2,12(r16)
 4002cb8:	8805883a 	mov	r2,r17
 4002cbc:	dfc11d17 	ldw	ra,1140(sp)
 4002cc0:	dc811c17 	ldw	r18,1136(sp)
 4002cc4:	dc411b17 	ldw	r17,1132(sp)
 4002cc8:	dc011a17 	ldw	r16,1128(sp)
 4002ccc:	dec11e04 	addi	sp,sp,1144
 4002cd0:	f800283a 	ret
 4002cd4:	047fffc4 	movi	r17,-1
 4002cd8:	003ff106 	br	4002ca0 <__ram_exceptions_end+0xfabfeb14>

04002cdc <__swsetup_r>:
 4002cdc:	00810074 	movhi	r2,1025
 4002ce0:	defffd04 	addi	sp,sp,-12
 4002ce4:	10826504 	addi	r2,r2,2452
 4002ce8:	dc400115 	stw	r17,4(sp)
 4002cec:	2023883a 	mov	r17,r4
 4002cf0:	11000017 	ldw	r4,0(r2)
 4002cf4:	dc000015 	stw	r16,0(sp)
 4002cf8:	dfc00215 	stw	ra,8(sp)
 4002cfc:	2821883a 	mov	r16,r5
 4002d00:	20000226 	beq	r4,zero,4002d0c <__swsetup_r+0x30>
 4002d04:	20800e17 	ldw	r2,56(r4)
 4002d08:	10003126 	beq	r2,zero,4002dd0 <__swsetup_r+0xf4>
 4002d0c:	8080030b 	ldhu	r2,12(r16)
 4002d10:	10c0020c 	andi	r3,r2,8
 4002d14:	1009883a 	mov	r4,r2
 4002d18:	18000f26 	beq	r3,zero,4002d58 <__swsetup_r+0x7c>
 4002d1c:	80c00417 	ldw	r3,16(r16)
 4002d20:	18001526 	beq	r3,zero,4002d78 <__swsetup_r+0x9c>
 4002d24:	1100004c 	andi	r4,r2,1
 4002d28:	20001c1e 	bne	r4,zero,4002d9c <__swsetup_r+0xc0>
 4002d2c:	1080008c 	andi	r2,r2,2
 4002d30:	1000291e 	bne	r2,zero,4002dd8 <__swsetup_r+0xfc>
 4002d34:	80800517 	ldw	r2,20(r16)
 4002d38:	80800215 	stw	r2,8(r16)
 4002d3c:	18001c26 	beq	r3,zero,4002db0 <__swsetup_r+0xd4>
 4002d40:	0005883a 	mov	r2,zero
 4002d44:	dfc00217 	ldw	ra,8(sp)
 4002d48:	dc400117 	ldw	r17,4(sp)
 4002d4c:	dc000017 	ldw	r16,0(sp)
 4002d50:	dec00304 	addi	sp,sp,12
 4002d54:	f800283a 	ret
 4002d58:	2080040c 	andi	r2,r4,16
 4002d5c:	10002e26 	beq	r2,zero,4002e18 <__swsetup_r+0x13c>
 4002d60:	2080010c 	andi	r2,r4,4
 4002d64:	10001e1e 	bne	r2,zero,4002de0 <__swsetup_r+0x104>
 4002d68:	80c00417 	ldw	r3,16(r16)
 4002d6c:	20800214 	ori	r2,r4,8
 4002d70:	8080030d 	sth	r2,12(r16)
 4002d74:	183feb1e 	bne	r3,zero,4002d24 <__ram_exceptions_end+0xfabfeb98>
 4002d78:	1100a00c 	andi	r4,r2,640
 4002d7c:	01408004 	movi	r5,512
 4002d80:	217fe826 	beq	r4,r5,4002d24 <__ram_exceptions_end+0xfabfeb98>
 4002d84:	800b883a 	mov	r5,r16
 4002d88:	8809883a 	mov	r4,r17
 4002d8c:	40053980 	call	4005398 <__smakebuf_r>
 4002d90:	8080030b 	ldhu	r2,12(r16)
 4002d94:	80c00417 	ldw	r3,16(r16)
 4002d98:	003fe206 	br	4002d24 <__ram_exceptions_end+0xfabfeb98>
 4002d9c:	80800517 	ldw	r2,20(r16)
 4002da0:	80000215 	stw	zero,8(r16)
 4002da4:	0085c83a 	sub	r2,zero,r2
 4002da8:	80800615 	stw	r2,24(r16)
 4002dac:	183fe41e 	bne	r3,zero,4002d40 <__ram_exceptions_end+0xfabfebb4>
 4002db0:	80c0030b 	ldhu	r3,12(r16)
 4002db4:	0005883a 	mov	r2,zero
 4002db8:	1900200c 	andi	r4,r3,128
 4002dbc:	203fe126 	beq	r4,zero,4002d44 <__ram_exceptions_end+0xfabfebb8>
 4002dc0:	18c01014 	ori	r3,r3,64
 4002dc4:	80c0030d 	sth	r3,12(r16)
 4002dc8:	00bfffc4 	movi	r2,-1
 4002dcc:	003fdd06 	br	4002d44 <__ram_exceptions_end+0xfabfebb8>
 4002dd0:	4004cb00 	call	4004cb0 <__sinit>
 4002dd4:	003fcd06 	br	4002d0c <__ram_exceptions_end+0xfabfeb80>
 4002dd8:	0005883a 	mov	r2,zero
 4002ddc:	003fd606 	br	4002d38 <__ram_exceptions_end+0xfabfebac>
 4002de0:	81400c17 	ldw	r5,48(r16)
 4002de4:	28000626 	beq	r5,zero,4002e00 <__swsetup_r+0x124>
 4002de8:	80801004 	addi	r2,r16,64
 4002dec:	28800326 	beq	r5,r2,4002dfc <__swsetup_r+0x120>
 4002df0:	8809883a 	mov	r4,r17
 4002df4:	4004e240 	call	4004e24 <_free_r>
 4002df8:	8100030b 	ldhu	r4,12(r16)
 4002dfc:	80000c15 	stw	zero,48(r16)
 4002e00:	80c00417 	ldw	r3,16(r16)
 4002e04:	00bff6c4 	movi	r2,-37
 4002e08:	1108703a 	and	r4,r2,r4
 4002e0c:	80000115 	stw	zero,4(r16)
 4002e10:	80c00015 	stw	r3,0(r16)
 4002e14:	003fd506 	br	4002d6c <__ram_exceptions_end+0xfabfebe0>
 4002e18:	00800244 	movi	r2,9
 4002e1c:	88800015 	stw	r2,0(r17)
 4002e20:	20801014 	ori	r2,r4,64
 4002e24:	8080030d 	sth	r2,12(r16)
 4002e28:	00bfffc4 	movi	r2,-1
 4002e2c:	003fc506 	br	4002d44 <__ram_exceptions_end+0xfabfebb8>

04002e30 <quorem>:
 4002e30:	defff704 	addi	sp,sp,-36
 4002e34:	dc800215 	stw	r18,8(sp)
 4002e38:	20800417 	ldw	r2,16(r4)
 4002e3c:	2c800417 	ldw	r18,16(r5)
 4002e40:	dfc00815 	stw	ra,32(sp)
 4002e44:	ddc00715 	stw	r23,28(sp)
 4002e48:	dd800615 	stw	r22,24(sp)
 4002e4c:	dd400515 	stw	r21,20(sp)
 4002e50:	dd000415 	stw	r20,16(sp)
 4002e54:	dcc00315 	stw	r19,12(sp)
 4002e58:	dc400115 	stw	r17,4(sp)
 4002e5c:	dc000015 	stw	r16,0(sp)
 4002e60:	14807116 	blt	r2,r18,4003028 <quorem+0x1f8>
 4002e64:	94bfffc4 	addi	r18,r18,-1
 4002e68:	94ad883a 	add	r22,r18,r18
 4002e6c:	b5ad883a 	add	r22,r22,r22
 4002e70:	2c400504 	addi	r17,r5,20
 4002e74:	8da9883a 	add	r20,r17,r22
 4002e78:	25400504 	addi	r21,r4,20
 4002e7c:	282f883a 	mov	r23,r5
 4002e80:	adad883a 	add	r22,r21,r22
 4002e84:	a1400017 	ldw	r5,0(r20)
 4002e88:	2021883a 	mov	r16,r4
 4002e8c:	b1000017 	ldw	r4,0(r22)
 4002e90:	29400044 	addi	r5,r5,1
 4002e94:	40008e40 	call	40008e4 <__udivsi3>
 4002e98:	1027883a 	mov	r19,r2
 4002e9c:	10002c26 	beq	r2,zero,4002f50 <quorem+0x120>
 4002ea0:	a813883a 	mov	r9,r21
 4002ea4:	880b883a 	mov	r5,r17
 4002ea8:	0009883a 	mov	r4,zero
 4002eac:	000d883a 	mov	r6,zero
 4002eb0:	2a000017 	ldw	r8,0(r5)
 4002eb4:	49c00017 	ldw	r7,0(r9)
 4002eb8:	29400104 	addi	r5,r5,4
 4002ebc:	40bfffcc 	andi	r2,r8,65535
 4002ec0:	14c5383a 	mul	r2,r2,r19
 4002ec4:	4010d43a 	srli	r8,r8,16
 4002ec8:	38ffffcc 	andi	r3,r7,65535
 4002ecc:	1105883a 	add	r2,r2,r4
 4002ed0:	1008d43a 	srli	r4,r2,16
 4002ed4:	44d1383a 	mul	r8,r8,r19
 4002ed8:	198d883a 	add	r6,r3,r6
 4002edc:	10ffffcc 	andi	r3,r2,65535
 4002ee0:	30c7c83a 	sub	r3,r6,r3
 4002ee4:	380ed43a 	srli	r7,r7,16
 4002ee8:	4105883a 	add	r2,r8,r4
 4002eec:	180dd43a 	srai	r6,r3,16
 4002ef0:	113fffcc 	andi	r4,r2,65535
 4002ef4:	390fc83a 	sub	r7,r7,r4
 4002ef8:	398d883a 	add	r6,r7,r6
 4002efc:	300e943a 	slli	r7,r6,16
 4002f00:	18ffffcc 	andi	r3,r3,65535
 4002f04:	1008d43a 	srli	r4,r2,16
 4002f08:	38ceb03a 	or	r7,r7,r3
 4002f0c:	49c00015 	stw	r7,0(r9)
 4002f10:	300dd43a 	srai	r6,r6,16
 4002f14:	4a400104 	addi	r9,r9,4
 4002f18:	a17fe52e 	bgeu	r20,r5,4002eb0 <__ram_exceptions_end+0xfabfed24>
 4002f1c:	b0800017 	ldw	r2,0(r22)
 4002f20:	10000b1e 	bne	r2,zero,4002f50 <quorem+0x120>
 4002f24:	b0bfff04 	addi	r2,r22,-4
 4002f28:	a880082e 	bgeu	r21,r2,4002f4c <quorem+0x11c>
 4002f2c:	b0ffff17 	ldw	r3,-4(r22)
 4002f30:	18000326 	beq	r3,zero,4002f40 <quorem+0x110>
 4002f34:	00000506 	br	4002f4c <quorem+0x11c>
 4002f38:	10c00017 	ldw	r3,0(r2)
 4002f3c:	1800031e 	bne	r3,zero,4002f4c <quorem+0x11c>
 4002f40:	10bfff04 	addi	r2,r2,-4
 4002f44:	94bfffc4 	addi	r18,r18,-1
 4002f48:	a8bffb36 	bltu	r21,r2,4002f38 <__ram_exceptions_end+0xfabfedac>
 4002f4c:	84800415 	stw	r18,16(r16)
 4002f50:	b80b883a 	mov	r5,r23
 4002f54:	8009883a 	mov	r4,r16
 4002f58:	400697c0 	call	400697c <__mcmp>
 4002f5c:	10002616 	blt	r2,zero,4002ff8 <quorem+0x1c8>
 4002f60:	9cc00044 	addi	r19,r19,1
 4002f64:	a805883a 	mov	r2,r21
 4002f68:	000b883a 	mov	r5,zero
 4002f6c:	11000017 	ldw	r4,0(r2)
 4002f70:	89800017 	ldw	r6,0(r17)
 4002f74:	10800104 	addi	r2,r2,4
 4002f78:	20ffffcc 	andi	r3,r4,65535
 4002f7c:	194b883a 	add	r5,r3,r5
 4002f80:	30ffffcc 	andi	r3,r6,65535
 4002f84:	28c7c83a 	sub	r3,r5,r3
 4002f88:	300cd43a 	srli	r6,r6,16
 4002f8c:	2008d43a 	srli	r4,r4,16
 4002f90:	180bd43a 	srai	r5,r3,16
 4002f94:	18ffffcc 	andi	r3,r3,65535
 4002f98:	2189c83a 	sub	r4,r4,r6
 4002f9c:	2149883a 	add	r4,r4,r5
 4002fa0:	200c943a 	slli	r6,r4,16
 4002fa4:	8c400104 	addi	r17,r17,4
 4002fa8:	200bd43a 	srai	r5,r4,16
 4002fac:	30c6b03a 	or	r3,r6,r3
 4002fb0:	10ffff15 	stw	r3,-4(r2)
 4002fb4:	a47fed2e 	bgeu	r20,r17,4002f6c <__ram_exceptions_end+0xfabfede0>
 4002fb8:	9485883a 	add	r2,r18,r18
 4002fbc:	1085883a 	add	r2,r2,r2
 4002fc0:	a887883a 	add	r3,r21,r2
 4002fc4:	18800017 	ldw	r2,0(r3)
 4002fc8:	10000b1e 	bne	r2,zero,4002ff8 <quorem+0x1c8>
 4002fcc:	18bfff04 	addi	r2,r3,-4
 4002fd0:	a880082e 	bgeu	r21,r2,4002ff4 <quorem+0x1c4>
 4002fd4:	18ffff17 	ldw	r3,-4(r3)
 4002fd8:	18000326 	beq	r3,zero,4002fe8 <quorem+0x1b8>
 4002fdc:	00000506 	br	4002ff4 <quorem+0x1c4>
 4002fe0:	10c00017 	ldw	r3,0(r2)
 4002fe4:	1800031e 	bne	r3,zero,4002ff4 <quorem+0x1c4>
 4002fe8:	10bfff04 	addi	r2,r2,-4
 4002fec:	94bfffc4 	addi	r18,r18,-1
 4002ff0:	a8bffb36 	bltu	r21,r2,4002fe0 <__ram_exceptions_end+0xfabfee54>
 4002ff4:	84800415 	stw	r18,16(r16)
 4002ff8:	9805883a 	mov	r2,r19
 4002ffc:	dfc00817 	ldw	ra,32(sp)
 4003000:	ddc00717 	ldw	r23,28(sp)
 4003004:	dd800617 	ldw	r22,24(sp)
 4003008:	dd400517 	ldw	r21,20(sp)
 400300c:	dd000417 	ldw	r20,16(sp)
 4003010:	dcc00317 	ldw	r19,12(sp)
 4003014:	dc800217 	ldw	r18,8(sp)
 4003018:	dc400117 	ldw	r17,4(sp)
 400301c:	dc000017 	ldw	r16,0(sp)
 4003020:	dec00904 	addi	sp,sp,36
 4003024:	f800283a 	ret
 4003028:	0005883a 	mov	r2,zero
 400302c:	003ff306 	br	4002ffc <__ram_exceptions_end+0xfabfee70>

04003030 <_dtoa_r>:
 4003030:	20801017 	ldw	r2,64(r4)
 4003034:	deffde04 	addi	sp,sp,-136
 4003038:	df002015 	stw	fp,128(sp)
 400303c:	dcc01b15 	stw	r19,108(sp)
 4003040:	dc801a15 	stw	r18,104(sp)
 4003044:	dc401915 	stw	r17,100(sp)
 4003048:	dc001815 	stw	r16,96(sp)
 400304c:	dfc02115 	stw	ra,132(sp)
 4003050:	ddc01f15 	stw	r23,124(sp)
 4003054:	dd801e15 	stw	r22,120(sp)
 4003058:	dd401d15 	stw	r21,116(sp)
 400305c:	dd001c15 	stw	r20,112(sp)
 4003060:	d9c00315 	stw	r7,12(sp)
 4003064:	2039883a 	mov	fp,r4
 4003068:	3023883a 	mov	r17,r6
 400306c:	2825883a 	mov	r18,r5
 4003070:	dc002417 	ldw	r16,144(sp)
 4003074:	3027883a 	mov	r19,r6
 4003078:	10000826 	beq	r2,zero,400309c <_dtoa_r+0x6c>
 400307c:	21801117 	ldw	r6,68(r4)
 4003080:	00c00044 	movi	r3,1
 4003084:	100b883a 	mov	r5,r2
 4003088:	1986983a 	sll	r3,r3,r6
 400308c:	11800115 	stw	r6,4(r2)
 4003090:	10c00215 	stw	r3,8(r2)
 4003094:	400615c0 	call	400615c <_Bfree>
 4003098:	e0001015 	stw	zero,64(fp)
 400309c:	88002e16 	blt	r17,zero,4003158 <_dtoa_r+0x128>
 40030a0:	80000015 	stw	zero,0(r16)
 40030a4:	889ffc2c 	andhi	r2,r17,32752
 40030a8:	00dffc34 	movhi	r3,32752
 40030ac:	10c01c26 	beq	r2,r3,4003120 <_dtoa_r+0xf0>
 40030b0:	000d883a 	mov	r6,zero
 40030b4:	000f883a 	mov	r7,zero
 40030b8:	9009883a 	mov	r4,r18
 40030bc:	980b883a 	mov	r5,r19
 40030c0:	400bb640 	call	400bb64 <__eqdf2>
 40030c4:	10002b1e 	bne	r2,zero,4003174 <_dtoa_r+0x144>
 40030c8:	d9c02317 	ldw	r7,140(sp)
 40030cc:	00800044 	movi	r2,1
 40030d0:	38800015 	stw	r2,0(r7)
 40030d4:	d8802517 	ldw	r2,148(sp)
 40030d8:	10019e26 	beq	r2,zero,4003754 <_dtoa_r+0x724>
 40030dc:	d8c02517 	ldw	r3,148(sp)
 40030e0:	00810074 	movhi	r2,1025
 40030e4:	10beb244 	addi	r2,r2,-1335
 40030e8:	18800015 	stw	r2,0(r3)
 40030ec:	10bfffc4 	addi	r2,r2,-1
 40030f0:	dfc02117 	ldw	ra,132(sp)
 40030f4:	df002017 	ldw	fp,128(sp)
 40030f8:	ddc01f17 	ldw	r23,124(sp)
 40030fc:	dd801e17 	ldw	r22,120(sp)
 4003100:	dd401d17 	ldw	r21,116(sp)
 4003104:	dd001c17 	ldw	r20,112(sp)
 4003108:	dcc01b17 	ldw	r19,108(sp)
 400310c:	dc801a17 	ldw	r18,104(sp)
 4003110:	dc401917 	ldw	r17,100(sp)
 4003114:	dc001817 	ldw	r16,96(sp)
 4003118:	dec02204 	addi	sp,sp,136
 400311c:	f800283a 	ret
 4003120:	d8c02317 	ldw	r3,140(sp)
 4003124:	0089c3c4 	movi	r2,9999
 4003128:	18800015 	stw	r2,0(r3)
 400312c:	90017726 	beq	r18,zero,400370c <_dtoa_r+0x6dc>
 4003130:	00810074 	movhi	r2,1025
 4003134:	10bebe04 	addi	r2,r2,-1288
 4003138:	d9002517 	ldw	r4,148(sp)
 400313c:	203fec26 	beq	r4,zero,40030f0 <__ram_exceptions_end+0xfabfef64>
 4003140:	10c000c7 	ldb	r3,3(r2)
 4003144:	1801781e 	bne	r3,zero,4003728 <_dtoa_r+0x6f8>
 4003148:	10c000c4 	addi	r3,r2,3
 400314c:	d9802517 	ldw	r6,148(sp)
 4003150:	30c00015 	stw	r3,0(r6)
 4003154:	003fe606 	br	40030f0 <__ram_exceptions_end+0xfabfef64>
 4003158:	04e00034 	movhi	r19,32768
 400315c:	9cffffc4 	addi	r19,r19,-1
 4003160:	00800044 	movi	r2,1
 4003164:	8ce6703a 	and	r19,r17,r19
 4003168:	80800015 	stw	r2,0(r16)
 400316c:	9823883a 	mov	r17,r19
 4003170:	003fcc06 	br	40030a4 <__ram_exceptions_end+0xfabfef18>
 4003174:	d8800204 	addi	r2,sp,8
 4003178:	d8800015 	stw	r2,0(sp)
 400317c:	d9c00104 	addi	r7,sp,4
 4003180:	900b883a 	mov	r5,r18
 4003184:	980d883a 	mov	r6,r19
 4003188:	e009883a 	mov	r4,fp
 400318c:	8820d53a 	srli	r16,r17,20
 4003190:	4006d480 	call	4006d48 <__d2b>
 4003194:	d8800915 	stw	r2,36(sp)
 4003198:	8001651e 	bne	r16,zero,4003730 <_dtoa_r+0x700>
 400319c:	dd800217 	ldw	r22,8(sp)
 40031a0:	dc000117 	ldw	r16,4(sp)
 40031a4:	00800804 	movi	r2,32
 40031a8:	b421883a 	add	r16,r22,r16
 40031ac:	80c10c84 	addi	r3,r16,1074
 40031b0:	10c2d10e 	bge	r2,r3,4003cf8 <_dtoa_r+0xcc8>
 40031b4:	00801004 	movi	r2,64
 40031b8:	81010484 	addi	r4,r16,1042
 40031bc:	10c7c83a 	sub	r3,r2,r3
 40031c0:	9108d83a 	srl	r4,r18,r4
 40031c4:	88e2983a 	sll	r17,r17,r3
 40031c8:	2448b03a 	or	r4,r4,r17
 40031cc:	400cf2c0 	call	400cf2c <__floatunsidf>
 40031d0:	017f8434 	movhi	r5,65040
 40031d4:	01800044 	movi	r6,1
 40031d8:	1009883a 	mov	r4,r2
 40031dc:	194b883a 	add	r5,r3,r5
 40031e0:	843fffc4 	addi	r16,r16,-1
 40031e4:	d9801115 	stw	r6,68(sp)
 40031e8:	000d883a 	mov	r6,zero
 40031ec:	01cffe34 	movhi	r7,16376
 40031f0:	400c4d40 	call	400c4d4 <__subdf3>
 40031f4:	0198dbf4 	movhi	r6,25455
 40031f8:	01cff4f4 	movhi	r7,16339
 40031fc:	3190d844 	addi	r6,r6,17249
 4003200:	39e1e9c4 	addi	r7,r7,-30809
 4003204:	1009883a 	mov	r4,r2
 4003208:	180b883a 	mov	r5,r3
 400320c:	400bdbc0 	call	400bdbc <__muldf3>
 4003210:	01a2d874 	movhi	r6,35681
 4003214:	01cff1f4 	movhi	r7,16327
 4003218:	31b22cc4 	addi	r6,r6,-14157
 400321c:	39e28a04 	addi	r7,r7,-30168
 4003220:	180b883a 	mov	r5,r3
 4003224:	1009883a 	mov	r4,r2
 4003228:	400a9d00 	call	400a9d0 <__adddf3>
 400322c:	8009883a 	mov	r4,r16
 4003230:	1029883a 	mov	r20,r2
 4003234:	1823883a 	mov	r17,r3
 4003238:	400ce500 	call	400ce50 <__floatsidf>
 400323c:	019427f4 	movhi	r6,20639
 4003240:	01cff4f4 	movhi	r7,16339
 4003244:	319e7ec4 	addi	r6,r6,31227
 4003248:	39d104c4 	addi	r7,r7,17427
 400324c:	1009883a 	mov	r4,r2
 4003250:	180b883a 	mov	r5,r3
 4003254:	400bdbc0 	call	400bdbc <__muldf3>
 4003258:	100d883a 	mov	r6,r2
 400325c:	180f883a 	mov	r7,r3
 4003260:	a009883a 	mov	r4,r20
 4003264:	880b883a 	mov	r5,r17
 4003268:	400a9d00 	call	400a9d0 <__adddf3>
 400326c:	1009883a 	mov	r4,r2
 4003270:	180b883a 	mov	r5,r3
 4003274:	1029883a 	mov	r20,r2
 4003278:	1823883a 	mov	r17,r3
 400327c:	400cdd00 	call	400cdd0 <__fixdfsi>
 4003280:	000d883a 	mov	r6,zero
 4003284:	000f883a 	mov	r7,zero
 4003288:	a009883a 	mov	r4,r20
 400328c:	880b883a 	mov	r5,r17
 4003290:	d8800515 	stw	r2,20(sp)
 4003294:	400bcc80 	call	400bcc8 <__ledf2>
 4003298:	10028716 	blt	r2,zero,4003cb8 <_dtoa_r+0xc88>
 400329c:	d8c00517 	ldw	r3,20(sp)
 40032a0:	00800584 	movi	r2,22
 40032a4:	10c27536 	bltu	r2,r3,4003c7c <_dtoa_r+0xc4c>
 40032a8:	180490fa 	slli	r2,r3,3
 40032ac:	00c10074 	movhi	r3,1025
 40032b0:	18feda04 	addi	r3,r3,-1176
 40032b4:	1885883a 	add	r2,r3,r2
 40032b8:	11000017 	ldw	r4,0(r2)
 40032bc:	11400117 	ldw	r5,4(r2)
 40032c0:	900d883a 	mov	r6,r18
 40032c4:	980f883a 	mov	r7,r19
 40032c8:	400bbec0 	call	400bbec <__gedf2>
 40032cc:	00828d0e 	bge	zero,r2,4003d04 <_dtoa_r+0xcd4>
 40032d0:	d9000517 	ldw	r4,20(sp)
 40032d4:	d8000e15 	stw	zero,56(sp)
 40032d8:	213fffc4 	addi	r4,r4,-1
 40032dc:	d9000515 	stw	r4,20(sp)
 40032e0:	b42dc83a 	sub	r22,r22,r16
 40032e4:	b5bfffc4 	addi	r22,r22,-1
 40032e8:	b0026f16 	blt	r22,zero,4003ca8 <_dtoa_r+0xc78>
 40032ec:	d8000815 	stw	zero,32(sp)
 40032f0:	d9c00517 	ldw	r7,20(sp)
 40032f4:	38026416 	blt	r7,zero,4003c88 <_dtoa_r+0xc58>
 40032f8:	b1ed883a 	add	r22,r22,r7
 40032fc:	d9c00d15 	stw	r7,52(sp)
 4003300:	d8000a15 	stw	zero,40(sp)
 4003304:	d9800317 	ldw	r6,12(sp)
 4003308:	00800244 	movi	r2,9
 400330c:	11811436 	bltu	r2,r6,4003760 <_dtoa_r+0x730>
 4003310:	00800144 	movi	r2,5
 4003314:	1184e10e 	bge	r2,r6,400469c <_dtoa_r+0x166c>
 4003318:	31bfff04 	addi	r6,r6,-4
 400331c:	d9800315 	stw	r6,12(sp)
 4003320:	0023883a 	mov	r17,zero
 4003324:	d9800317 	ldw	r6,12(sp)
 4003328:	008000c4 	movi	r2,3
 400332c:	30836726 	beq	r6,r2,40040cc <_dtoa_r+0x109c>
 4003330:	1183410e 	bge	r2,r6,4004038 <_dtoa_r+0x1008>
 4003334:	d9c00317 	ldw	r7,12(sp)
 4003338:	00800104 	movi	r2,4
 400333c:	38827c26 	beq	r7,r2,4003d30 <_dtoa_r+0xd00>
 4003340:	00800144 	movi	r2,5
 4003344:	3884c41e 	bne	r7,r2,4004658 <_dtoa_r+0x1628>
 4003348:	00800044 	movi	r2,1
 400334c:	d8800b15 	stw	r2,44(sp)
 4003350:	d8c00517 	ldw	r3,20(sp)
 4003354:	d9002217 	ldw	r4,136(sp)
 4003358:	1907883a 	add	r3,r3,r4
 400335c:	19800044 	addi	r6,r3,1
 4003360:	d8c00c15 	stw	r3,48(sp)
 4003364:	d9800615 	stw	r6,24(sp)
 4003368:	0183a40e 	bge	zero,r6,40041fc <_dtoa_r+0x11cc>
 400336c:	d9800617 	ldw	r6,24(sp)
 4003370:	3021883a 	mov	r16,r6
 4003374:	e0001115 	stw	zero,68(fp)
 4003378:	008005c4 	movi	r2,23
 400337c:	1184c92e 	bgeu	r2,r6,40046a4 <_dtoa_r+0x1674>
 4003380:	00c00044 	movi	r3,1
 4003384:	00800104 	movi	r2,4
 4003388:	1085883a 	add	r2,r2,r2
 400338c:	11000504 	addi	r4,r2,20
 4003390:	180b883a 	mov	r5,r3
 4003394:	18c00044 	addi	r3,r3,1
 4003398:	313ffb2e 	bgeu	r6,r4,4003388 <__ram_exceptions_end+0xfabff1fc>
 400339c:	e1401115 	stw	r5,68(fp)
 40033a0:	e009883a 	mov	r4,fp
 40033a4:	40060b40 	call	40060b4 <_Balloc>
 40033a8:	d8800715 	stw	r2,28(sp)
 40033ac:	e0801015 	stw	r2,64(fp)
 40033b0:	00800384 	movi	r2,14
 40033b4:	1400f736 	bltu	r2,r16,4003794 <_dtoa_r+0x764>
 40033b8:	8800f626 	beq	r17,zero,4003794 <_dtoa_r+0x764>
 40033bc:	d9c00517 	ldw	r7,20(sp)
 40033c0:	01c39a0e 	bge	zero,r7,400422c <_dtoa_r+0x11fc>
 40033c4:	388003cc 	andi	r2,r7,15
 40033c8:	100490fa 	slli	r2,r2,3
 40033cc:	382bd13a 	srai	r21,r7,4
 40033d0:	00c10074 	movhi	r3,1025
 40033d4:	18feda04 	addi	r3,r3,-1176
 40033d8:	1885883a 	add	r2,r3,r2
 40033dc:	a8c0040c 	andi	r3,r21,16
 40033e0:	12400017 	ldw	r9,0(r2)
 40033e4:	12000117 	ldw	r8,4(r2)
 40033e8:	18037926 	beq	r3,zero,40041d0 <_dtoa_r+0x11a0>
 40033ec:	00810074 	movhi	r2,1025
 40033f0:	10bed004 	addi	r2,r2,-1216
 40033f4:	11800817 	ldw	r6,32(r2)
 40033f8:	11c00917 	ldw	r7,36(r2)
 40033fc:	9009883a 	mov	r4,r18
 4003400:	980b883a 	mov	r5,r19
 4003404:	da001715 	stw	r8,92(sp)
 4003408:	da401615 	stw	r9,88(sp)
 400340c:	400b27c0 	call	400b27c <__divdf3>
 4003410:	da001717 	ldw	r8,92(sp)
 4003414:	da401617 	ldw	r9,88(sp)
 4003418:	ad4003cc 	andi	r21,r21,15
 400341c:	040000c4 	movi	r16,3
 4003420:	1023883a 	mov	r17,r2
 4003424:	1829883a 	mov	r20,r3
 4003428:	a8001126 	beq	r21,zero,4003470 <_dtoa_r+0x440>
 400342c:	05c10074 	movhi	r23,1025
 4003430:	bdfed004 	addi	r23,r23,-1216
 4003434:	4805883a 	mov	r2,r9
 4003438:	4007883a 	mov	r3,r8
 400343c:	a980004c 	andi	r6,r21,1
 4003440:	1009883a 	mov	r4,r2
 4003444:	a82bd07a 	srai	r21,r21,1
 4003448:	180b883a 	mov	r5,r3
 400344c:	30000426 	beq	r6,zero,4003460 <_dtoa_r+0x430>
 4003450:	b9800017 	ldw	r6,0(r23)
 4003454:	b9c00117 	ldw	r7,4(r23)
 4003458:	84000044 	addi	r16,r16,1
 400345c:	400bdbc0 	call	400bdbc <__muldf3>
 4003460:	bdc00204 	addi	r23,r23,8
 4003464:	a83ff51e 	bne	r21,zero,400343c <__ram_exceptions_end+0xfabff2b0>
 4003468:	1013883a 	mov	r9,r2
 400346c:	1811883a 	mov	r8,r3
 4003470:	480d883a 	mov	r6,r9
 4003474:	400f883a 	mov	r7,r8
 4003478:	8809883a 	mov	r4,r17
 400347c:	a00b883a 	mov	r5,r20
 4003480:	400b27c0 	call	400b27c <__divdf3>
 4003484:	d8800f15 	stw	r2,60(sp)
 4003488:	d8c01015 	stw	r3,64(sp)
 400348c:	d8c00e17 	ldw	r3,56(sp)
 4003490:	18000626 	beq	r3,zero,40034ac <_dtoa_r+0x47c>
 4003494:	d9000f17 	ldw	r4,60(sp)
 4003498:	d9401017 	ldw	r5,64(sp)
 400349c:	000d883a 	mov	r6,zero
 40034a0:	01cffc34 	movhi	r7,16368
 40034a4:	400bcc80 	call	400bcc8 <__ledf2>
 40034a8:	10040b16 	blt	r2,zero,40044d8 <_dtoa_r+0x14a8>
 40034ac:	8009883a 	mov	r4,r16
 40034b0:	400ce500 	call	400ce50 <__floatsidf>
 40034b4:	d9800f17 	ldw	r6,60(sp)
 40034b8:	d9c01017 	ldw	r7,64(sp)
 40034bc:	1009883a 	mov	r4,r2
 40034c0:	180b883a 	mov	r5,r3
 40034c4:	400bdbc0 	call	400bdbc <__muldf3>
 40034c8:	000d883a 	mov	r6,zero
 40034cc:	01d00734 	movhi	r7,16412
 40034d0:	1009883a 	mov	r4,r2
 40034d4:	180b883a 	mov	r5,r3
 40034d8:	400a9d00 	call	400a9d0 <__adddf3>
 40034dc:	1021883a 	mov	r16,r2
 40034e0:	d8800617 	ldw	r2,24(sp)
 40034e4:	047f3034 	movhi	r17,64704
 40034e8:	1c63883a 	add	r17,r3,r17
 40034ec:	10031826 	beq	r2,zero,4004150 <_dtoa_r+0x1120>
 40034f0:	d8c00517 	ldw	r3,20(sp)
 40034f4:	db000617 	ldw	r12,24(sp)
 40034f8:	d8c01315 	stw	r3,76(sp)
 40034fc:	d9000b17 	ldw	r4,44(sp)
 4003500:	20038f26 	beq	r4,zero,4004340 <_dtoa_r+0x1310>
 4003504:	60bfffc4 	addi	r2,r12,-1
 4003508:	100490fa 	slli	r2,r2,3
 400350c:	00c10074 	movhi	r3,1025
 4003510:	18feda04 	addi	r3,r3,-1176
 4003514:	1885883a 	add	r2,r3,r2
 4003518:	11800017 	ldw	r6,0(r2)
 400351c:	11c00117 	ldw	r7,4(r2)
 4003520:	d8800717 	ldw	r2,28(sp)
 4003524:	0009883a 	mov	r4,zero
 4003528:	014ff834 	movhi	r5,16352
 400352c:	db001615 	stw	r12,88(sp)
 4003530:	15c00044 	addi	r23,r2,1
 4003534:	400b27c0 	call	400b27c <__divdf3>
 4003538:	800d883a 	mov	r6,r16
 400353c:	880f883a 	mov	r7,r17
 4003540:	1009883a 	mov	r4,r2
 4003544:	180b883a 	mov	r5,r3
 4003548:	400c4d40 	call	400c4d4 <__subdf3>
 400354c:	d9401017 	ldw	r5,64(sp)
 4003550:	d9000f17 	ldw	r4,60(sp)
 4003554:	102b883a 	mov	r21,r2
 4003558:	d8c01215 	stw	r3,72(sp)
 400355c:	400cdd00 	call	400cdd0 <__fixdfsi>
 4003560:	1009883a 	mov	r4,r2
 4003564:	1029883a 	mov	r20,r2
 4003568:	400ce500 	call	400ce50 <__floatsidf>
 400356c:	d9000f17 	ldw	r4,60(sp)
 4003570:	d9401017 	ldw	r5,64(sp)
 4003574:	100d883a 	mov	r6,r2
 4003578:	180f883a 	mov	r7,r3
 400357c:	400c4d40 	call	400c4d4 <__subdf3>
 4003580:	1823883a 	mov	r17,r3
 4003584:	d8c00717 	ldw	r3,28(sp)
 4003588:	d9401217 	ldw	r5,72(sp)
 400358c:	a2000c04 	addi	r8,r20,48
 4003590:	1021883a 	mov	r16,r2
 4003594:	1a000005 	stb	r8,0(r3)
 4003598:	800d883a 	mov	r6,r16
 400359c:	880f883a 	mov	r7,r17
 40035a0:	a809883a 	mov	r4,r21
 40035a4:	4029883a 	mov	r20,r8
 40035a8:	400bbec0 	call	400bbec <__gedf2>
 40035ac:	00841d16 	blt	zero,r2,4004624 <_dtoa_r+0x15f4>
 40035b0:	800d883a 	mov	r6,r16
 40035b4:	880f883a 	mov	r7,r17
 40035b8:	0009883a 	mov	r4,zero
 40035bc:	014ffc34 	movhi	r5,16368
 40035c0:	400c4d40 	call	400c4d4 <__subdf3>
 40035c4:	d9401217 	ldw	r5,72(sp)
 40035c8:	100d883a 	mov	r6,r2
 40035cc:	180f883a 	mov	r7,r3
 40035d0:	a809883a 	mov	r4,r21
 40035d4:	400bbec0 	call	400bbec <__gedf2>
 40035d8:	db001617 	ldw	r12,88(sp)
 40035dc:	00840e16 	blt	zero,r2,4004618 <_dtoa_r+0x15e8>
 40035e0:	00800044 	movi	r2,1
 40035e4:	13006b0e 	bge	r2,r12,4003794 <_dtoa_r+0x764>
 40035e8:	d9000717 	ldw	r4,28(sp)
 40035ec:	dd800f15 	stw	r22,60(sp)
 40035f0:	dcc01015 	stw	r19,64(sp)
 40035f4:	2319883a 	add	r12,r4,r12
 40035f8:	dcc01217 	ldw	r19,72(sp)
 40035fc:	602d883a 	mov	r22,r12
 4003600:	dc801215 	stw	r18,72(sp)
 4003604:	b825883a 	mov	r18,r23
 4003608:	00000906 	br	4003630 <_dtoa_r+0x600>
 400360c:	400c4d40 	call	400c4d4 <__subdf3>
 4003610:	a80d883a 	mov	r6,r21
 4003614:	980f883a 	mov	r7,r19
 4003618:	1009883a 	mov	r4,r2
 400361c:	180b883a 	mov	r5,r3
 4003620:	400bcc80 	call	400bcc8 <__ledf2>
 4003624:	1003e816 	blt	r2,zero,40045c8 <_dtoa_r+0x1598>
 4003628:	b825883a 	mov	r18,r23
 400362c:	bd83e926 	beq	r23,r22,40045d4 <_dtoa_r+0x15a4>
 4003630:	a809883a 	mov	r4,r21
 4003634:	980b883a 	mov	r5,r19
 4003638:	000d883a 	mov	r6,zero
 400363c:	01d00934 	movhi	r7,16420
 4003640:	400bdbc0 	call	400bdbc <__muldf3>
 4003644:	000d883a 	mov	r6,zero
 4003648:	01d00934 	movhi	r7,16420
 400364c:	8009883a 	mov	r4,r16
 4003650:	880b883a 	mov	r5,r17
 4003654:	102b883a 	mov	r21,r2
 4003658:	1827883a 	mov	r19,r3
 400365c:	400bdbc0 	call	400bdbc <__muldf3>
 4003660:	180b883a 	mov	r5,r3
 4003664:	1009883a 	mov	r4,r2
 4003668:	1821883a 	mov	r16,r3
 400366c:	1023883a 	mov	r17,r2
 4003670:	400cdd00 	call	400cdd0 <__fixdfsi>
 4003674:	1009883a 	mov	r4,r2
 4003678:	1029883a 	mov	r20,r2
 400367c:	400ce500 	call	400ce50 <__floatsidf>
 4003680:	8809883a 	mov	r4,r17
 4003684:	800b883a 	mov	r5,r16
 4003688:	100d883a 	mov	r6,r2
 400368c:	180f883a 	mov	r7,r3
 4003690:	400c4d40 	call	400c4d4 <__subdf3>
 4003694:	a5000c04 	addi	r20,r20,48
 4003698:	a80d883a 	mov	r6,r21
 400369c:	980f883a 	mov	r7,r19
 40036a0:	1009883a 	mov	r4,r2
 40036a4:	180b883a 	mov	r5,r3
 40036a8:	95000005 	stb	r20,0(r18)
 40036ac:	1021883a 	mov	r16,r2
 40036b0:	1823883a 	mov	r17,r3
 40036b4:	400bcc80 	call	400bcc8 <__ledf2>
 40036b8:	bdc00044 	addi	r23,r23,1
 40036bc:	800d883a 	mov	r6,r16
 40036c0:	880f883a 	mov	r7,r17
 40036c4:	0009883a 	mov	r4,zero
 40036c8:	014ffc34 	movhi	r5,16368
 40036cc:	103fcf0e 	bge	r2,zero,400360c <__ram_exceptions_end+0xfabff480>
 40036d0:	d8c01317 	ldw	r3,76(sp)
 40036d4:	d8c00515 	stw	r3,20(sp)
 40036d8:	d9400917 	ldw	r5,36(sp)
 40036dc:	e009883a 	mov	r4,fp
 40036e0:	400615c0 	call	400615c <_Bfree>
 40036e4:	d9000517 	ldw	r4,20(sp)
 40036e8:	d9802317 	ldw	r6,140(sp)
 40036ec:	d9c02517 	ldw	r7,148(sp)
 40036f0:	b8000005 	stb	zero,0(r23)
 40036f4:	20800044 	addi	r2,r4,1
 40036f8:	30800015 	stw	r2,0(r6)
 40036fc:	3802aa26 	beq	r7,zero,40041a8 <_dtoa_r+0x1178>
 4003700:	3dc00015 	stw	r23,0(r7)
 4003704:	d8800717 	ldw	r2,28(sp)
 4003708:	003e7906 	br	40030f0 <__ram_exceptions_end+0xfabfef64>
 400370c:	00800434 	movhi	r2,16
 4003710:	10bfffc4 	addi	r2,r2,-1
 4003714:	88a2703a 	and	r17,r17,r2
 4003718:	883e851e 	bne	r17,zero,4003130 <__ram_exceptions_end+0xfabfefa4>
 400371c:	00810074 	movhi	r2,1025
 4003720:	10bebb04 	addi	r2,r2,-1300
 4003724:	003e8406 	br	4003138 <__ram_exceptions_end+0xfabfefac>
 4003728:	10c00204 	addi	r3,r2,8
 400372c:	003e8706 	br	400314c <__ram_exceptions_end+0xfabfefc0>
 4003730:	01400434 	movhi	r5,16
 4003734:	297fffc4 	addi	r5,r5,-1
 4003738:	994a703a 	and	r5,r19,r5
 400373c:	9009883a 	mov	r4,r18
 4003740:	843f0044 	addi	r16,r16,-1023
 4003744:	294ffc34 	orhi	r5,r5,16368
 4003748:	dd800217 	ldw	r22,8(sp)
 400374c:	d8001115 	stw	zero,68(sp)
 4003750:	003ea506 	br	40031e8 <__ram_exceptions_end+0xfabff05c>
 4003754:	00810074 	movhi	r2,1025
 4003758:	10beb204 	addi	r2,r2,-1336
 400375c:	003e6406 	br	40030f0 <__ram_exceptions_end+0xfabfef64>
 4003760:	e0001115 	stw	zero,68(fp)
 4003764:	000b883a 	mov	r5,zero
 4003768:	e009883a 	mov	r4,fp
 400376c:	40060b40 	call	40060b4 <_Balloc>
 4003770:	01bfffc4 	movi	r6,-1
 4003774:	01c00044 	movi	r7,1
 4003778:	d8800715 	stw	r2,28(sp)
 400377c:	d9800c15 	stw	r6,48(sp)
 4003780:	e0801015 	stw	r2,64(fp)
 4003784:	d8000315 	stw	zero,12(sp)
 4003788:	d9c00b15 	stw	r7,44(sp)
 400378c:	d9800615 	stw	r6,24(sp)
 4003790:	d8002215 	stw	zero,136(sp)
 4003794:	d8800117 	ldw	r2,4(sp)
 4003798:	10008916 	blt	r2,zero,40039c0 <_dtoa_r+0x990>
 400379c:	d9000517 	ldw	r4,20(sp)
 40037a0:	00c00384 	movi	r3,14
 40037a4:	19008616 	blt	r3,r4,40039c0 <_dtoa_r+0x990>
 40037a8:	200490fa 	slli	r2,r4,3
 40037ac:	00c10074 	movhi	r3,1025
 40037b0:	d9802217 	ldw	r6,136(sp)
 40037b4:	18feda04 	addi	r3,r3,-1176
 40037b8:	1885883a 	add	r2,r3,r2
 40037bc:	14000017 	ldw	r16,0(r2)
 40037c0:	14400117 	ldw	r17,4(r2)
 40037c4:	30016316 	blt	r6,zero,4003d54 <_dtoa_r+0xd24>
 40037c8:	800d883a 	mov	r6,r16
 40037cc:	880f883a 	mov	r7,r17
 40037d0:	9009883a 	mov	r4,r18
 40037d4:	980b883a 	mov	r5,r19
 40037d8:	400b27c0 	call	400b27c <__divdf3>
 40037dc:	180b883a 	mov	r5,r3
 40037e0:	1009883a 	mov	r4,r2
 40037e4:	400cdd00 	call	400cdd0 <__fixdfsi>
 40037e8:	1009883a 	mov	r4,r2
 40037ec:	102b883a 	mov	r21,r2
 40037f0:	400ce500 	call	400ce50 <__floatsidf>
 40037f4:	800d883a 	mov	r6,r16
 40037f8:	880f883a 	mov	r7,r17
 40037fc:	1009883a 	mov	r4,r2
 4003800:	180b883a 	mov	r5,r3
 4003804:	400bdbc0 	call	400bdbc <__muldf3>
 4003808:	100d883a 	mov	r6,r2
 400380c:	180f883a 	mov	r7,r3
 4003810:	9009883a 	mov	r4,r18
 4003814:	980b883a 	mov	r5,r19
 4003818:	400c4d40 	call	400c4d4 <__subdf3>
 400381c:	d9c00717 	ldw	r7,28(sp)
 4003820:	1009883a 	mov	r4,r2
 4003824:	a8800c04 	addi	r2,r21,48
 4003828:	38800005 	stb	r2,0(r7)
 400382c:	3dc00044 	addi	r23,r7,1
 4003830:	d9c00617 	ldw	r7,24(sp)
 4003834:	01800044 	movi	r6,1
 4003838:	180b883a 	mov	r5,r3
 400383c:	2005883a 	mov	r2,r4
 4003840:	39803826 	beq	r7,r6,4003924 <_dtoa_r+0x8f4>
 4003844:	000d883a 	mov	r6,zero
 4003848:	01d00934 	movhi	r7,16420
 400384c:	400bdbc0 	call	400bdbc <__muldf3>
 4003850:	000d883a 	mov	r6,zero
 4003854:	000f883a 	mov	r7,zero
 4003858:	1009883a 	mov	r4,r2
 400385c:	180b883a 	mov	r5,r3
 4003860:	1025883a 	mov	r18,r2
 4003864:	1827883a 	mov	r19,r3
 4003868:	400bb640 	call	400bb64 <__eqdf2>
 400386c:	103f9a26 	beq	r2,zero,40036d8 <__ram_exceptions_end+0xfabff54c>
 4003870:	d9c00617 	ldw	r7,24(sp)
 4003874:	d8c00717 	ldw	r3,28(sp)
 4003878:	b829883a 	mov	r20,r23
 400387c:	38bfffc4 	addi	r2,r7,-1
 4003880:	18ad883a 	add	r22,r3,r2
 4003884:	00000a06 	br	40038b0 <_dtoa_r+0x880>
 4003888:	400bdbc0 	call	400bdbc <__muldf3>
 400388c:	000d883a 	mov	r6,zero
 4003890:	000f883a 	mov	r7,zero
 4003894:	1009883a 	mov	r4,r2
 4003898:	180b883a 	mov	r5,r3
 400389c:	1025883a 	mov	r18,r2
 40038a0:	1827883a 	mov	r19,r3
 40038a4:	b829883a 	mov	r20,r23
 40038a8:	400bb640 	call	400bb64 <__eqdf2>
 40038ac:	103f8a26 	beq	r2,zero,40036d8 <__ram_exceptions_end+0xfabff54c>
 40038b0:	800d883a 	mov	r6,r16
 40038b4:	880f883a 	mov	r7,r17
 40038b8:	9009883a 	mov	r4,r18
 40038bc:	980b883a 	mov	r5,r19
 40038c0:	400b27c0 	call	400b27c <__divdf3>
 40038c4:	180b883a 	mov	r5,r3
 40038c8:	1009883a 	mov	r4,r2
 40038cc:	400cdd00 	call	400cdd0 <__fixdfsi>
 40038d0:	1009883a 	mov	r4,r2
 40038d4:	102b883a 	mov	r21,r2
 40038d8:	400ce500 	call	400ce50 <__floatsidf>
 40038dc:	800d883a 	mov	r6,r16
 40038e0:	880f883a 	mov	r7,r17
 40038e4:	1009883a 	mov	r4,r2
 40038e8:	180b883a 	mov	r5,r3
 40038ec:	400bdbc0 	call	400bdbc <__muldf3>
 40038f0:	100d883a 	mov	r6,r2
 40038f4:	180f883a 	mov	r7,r3
 40038f8:	9009883a 	mov	r4,r18
 40038fc:	980b883a 	mov	r5,r19
 4003900:	400c4d40 	call	400c4d4 <__subdf3>
 4003904:	aa000c04 	addi	r8,r21,48
 4003908:	a2000005 	stb	r8,0(r20)
 400390c:	000d883a 	mov	r6,zero
 4003910:	01d00934 	movhi	r7,16420
 4003914:	1009883a 	mov	r4,r2
 4003918:	180b883a 	mov	r5,r3
 400391c:	a5c00044 	addi	r23,r20,1
 4003920:	b53fd91e 	bne	r22,r20,4003888 <__ram_exceptions_end+0xfabff6fc>
 4003924:	100d883a 	mov	r6,r2
 4003928:	180f883a 	mov	r7,r3
 400392c:	1009883a 	mov	r4,r2
 4003930:	180b883a 	mov	r5,r3
 4003934:	400a9d00 	call	400a9d0 <__adddf3>
 4003938:	100d883a 	mov	r6,r2
 400393c:	180f883a 	mov	r7,r3
 4003940:	8009883a 	mov	r4,r16
 4003944:	880b883a 	mov	r5,r17
 4003948:	1027883a 	mov	r19,r2
 400394c:	1825883a 	mov	r18,r3
 4003950:	400bcc80 	call	400bcc8 <__ledf2>
 4003954:	10000816 	blt	r2,zero,4003978 <_dtoa_r+0x948>
 4003958:	980d883a 	mov	r6,r19
 400395c:	900f883a 	mov	r7,r18
 4003960:	8009883a 	mov	r4,r16
 4003964:	880b883a 	mov	r5,r17
 4003968:	400bb640 	call	400bb64 <__eqdf2>
 400396c:	103f5a1e 	bne	r2,zero,40036d8 <__ram_exceptions_end+0xfabff54c>
 4003970:	ad40004c 	andi	r21,r21,1
 4003974:	a83f5826 	beq	r21,zero,40036d8 <__ram_exceptions_end+0xfabff54c>
 4003978:	bd3fffc3 	ldbu	r20,-1(r23)
 400397c:	b8bfffc4 	addi	r2,r23,-1
 4003980:	1007883a 	mov	r3,r2
 4003984:	01400e44 	movi	r5,57
 4003988:	d9800717 	ldw	r6,28(sp)
 400398c:	00000506 	br	40039a4 <_dtoa_r+0x974>
 4003990:	18ffffc4 	addi	r3,r3,-1
 4003994:	11824726 	beq	r2,r6,40042b4 <_dtoa_r+0x1284>
 4003998:	1d000003 	ldbu	r20,0(r3)
 400399c:	102f883a 	mov	r23,r2
 40039a0:	10bfffc4 	addi	r2,r2,-1
 40039a4:	a1003fcc 	andi	r4,r20,255
 40039a8:	2100201c 	xori	r4,r4,128
 40039ac:	213fe004 	addi	r4,r4,-128
 40039b0:	217ff726 	beq	r4,r5,4003990 <__ram_exceptions_end+0xfabff804>
 40039b4:	a2000044 	addi	r8,r20,1
 40039b8:	12000005 	stb	r8,0(r2)
 40039bc:	003f4606 	br	40036d8 <__ram_exceptions_end+0xfabff54c>
 40039c0:	d9000b17 	ldw	r4,44(sp)
 40039c4:	2000c826 	beq	r4,zero,4003ce8 <_dtoa_r+0xcb8>
 40039c8:	d9800317 	ldw	r6,12(sp)
 40039cc:	00c00044 	movi	r3,1
 40039d0:	1980f90e 	bge	r3,r6,4003db8 <_dtoa_r+0xd88>
 40039d4:	d8800617 	ldw	r2,24(sp)
 40039d8:	d8c00a17 	ldw	r3,40(sp)
 40039dc:	157fffc4 	addi	r21,r2,-1
 40039e0:	1d41f316 	blt	r3,r21,40041b0 <_dtoa_r+0x1180>
 40039e4:	1d6bc83a 	sub	r21,r3,r21
 40039e8:	d9c00617 	ldw	r7,24(sp)
 40039ec:	3802aa16 	blt	r7,zero,4004498 <_dtoa_r+0x1468>
 40039f0:	dd000817 	ldw	r20,32(sp)
 40039f4:	d8800617 	ldw	r2,24(sp)
 40039f8:	d8c00817 	ldw	r3,32(sp)
 40039fc:	01400044 	movi	r5,1
 4003a00:	e009883a 	mov	r4,fp
 4003a04:	1887883a 	add	r3,r3,r2
 4003a08:	d8c00815 	stw	r3,32(sp)
 4003a0c:	b0ad883a 	add	r22,r22,r2
 4003a10:	40064c00 	call	40064c0 <__i2b>
 4003a14:	1023883a 	mov	r17,r2
 4003a18:	a0000826 	beq	r20,zero,4003a3c <_dtoa_r+0xa0c>
 4003a1c:	0580070e 	bge	zero,r22,4003a3c <_dtoa_r+0xa0c>
 4003a20:	a005883a 	mov	r2,r20
 4003a24:	b500b916 	blt	r22,r20,4003d0c <_dtoa_r+0xcdc>
 4003a28:	d9000817 	ldw	r4,32(sp)
 4003a2c:	a0a9c83a 	sub	r20,r20,r2
 4003a30:	b0adc83a 	sub	r22,r22,r2
 4003a34:	2089c83a 	sub	r4,r4,r2
 4003a38:	d9000815 	stw	r4,32(sp)
 4003a3c:	d9800a17 	ldw	r6,40(sp)
 4003a40:	0181810e 	bge	zero,r6,4004048 <_dtoa_r+0x1018>
 4003a44:	d9c00b17 	ldw	r7,44(sp)
 4003a48:	3800b326 	beq	r7,zero,4003d18 <_dtoa_r+0xce8>
 4003a4c:	a800b226 	beq	r21,zero,4003d18 <_dtoa_r+0xce8>
 4003a50:	880b883a 	mov	r5,r17
 4003a54:	a80d883a 	mov	r6,r21
 4003a58:	e009883a 	mov	r4,fp
 4003a5c:	40066f40 	call	40066f4 <__pow5mult>
 4003a60:	d9800917 	ldw	r6,36(sp)
 4003a64:	100b883a 	mov	r5,r2
 4003a68:	e009883a 	mov	r4,fp
 4003a6c:	1023883a 	mov	r17,r2
 4003a70:	40064fc0 	call	40064fc <__multiply>
 4003a74:	1021883a 	mov	r16,r2
 4003a78:	d8800a17 	ldw	r2,40(sp)
 4003a7c:	d9400917 	ldw	r5,36(sp)
 4003a80:	e009883a 	mov	r4,fp
 4003a84:	1545c83a 	sub	r2,r2,r21
 4003a88:	d8800a15 	stw	r2,40(sp)
 4003a8c:	400615c0 	call	400615c <_Bfree>
 4003a90:	d8c00a17 	ldw	r3,40(sp)
 4003a94:	18009f1e 	bne	r3,zero,4003d14 <_dtoa_r+0xce4>
 4003a98:	05c00044 	movi	r23,1
 4003a9c:	e009883a 	mov	r4,fp
 4003aa0:	b80b883a 	mov	r5,r23
 4003aa4:	40064c00 	call	40064c0 <__i2b>
 4003aa8:	d9000d17 	ldw	r4,52(sp)
 4003aac:	102b883a 	mov	r21,r2
 4003ab0:	2000ce26 	beq	r4,zero,4003dec <_dtoa_r+0xdbc>
 4003ab4:	200d883a 	mov	r6,r4
 4003ab8:	100b883a 	mov	r5,r2
 4003abc:	e009883a 	mov	r4,fp
 4003ac0:	40066f40 	call	40066f4 <__pow5mult>
 4003ac4:	d9800317 	ldw	r6,12(sp)
 4003ac8:	102b883a 	mov	r21,r2
 4003acc:	b981810e 	bge	r23,r6,40040d4 <_dtoa_r+0x10a4>
 4003ad0:	0027883a 	mov	r19,zero
 4003ad4:	a8800417 	ldw	r2,16(r21)
 4003ad8:	05c00804 	movi	r23,32
 4003adc:	10800104 	addi	r2,r2,4
 4003ae0:	1085883a 	add	r2,r2,r2
 4003ae4:	1085883a 	add	r2,r2,r2
 4003ae8:	a885883a 	add	r2,r21,r2
 4003aec:	11000017 	ldw	r4,0(r2)
 4003af0:	40063a80 	call	40063a8 <__hi0bits>
 4003af4:	b885c83a 	sub	r2,r23,r2
 4003af8:	1585883a 	add	r2,r2,r22
 4003afc:	108007cc 	andi	r2,r2,31
 4003b00:	1000b326 	beq	r2,zero,4003dd0 <_dtoa_r+0xda0>
 4003b04:	00c00804 	movi	r3,32
 4003b08:	1887c83a 	sub	r3,r3,r2
 4003b0c:	01000104 	movi	r4,4
 4003b10:	20c2cd0e 	bge	r4,r3,4004648 <_dtoa_r+0x1618>
 4003b14:	00c00704 	movi	r3,28
 4003b18:	1885c83a 	sub	r2,r3,r2
 4003b1c:	d8c00817 	ldw	r3,32(sp)
 4003b20:	a0a9883a 	add	r20,r20,r2
 4003b24:	b0ad883a 	add	r22,r22,r2
 4003b28:	1887883a 	add	r3,r3,r2
 4003b2c:	d8c00815 	stw	r3,32(sp)
 4003b30:	d9800817 	ldw	r6,32(sp)
 4003b34:	0180040e 	bge	zero,r6,4003b48 <_dtoa_r+0xb18>
 4003b38:	800b883a 	mov	r5,r16
 4003b3c:	e009883a 	mov	r4,fp
 4003b40:	40068340 	call	4006834 <__lshift>
 4003b44:	1021883a 	mov	r16,r2
 4003b48:	0580050e 	bge	zero,r22,4003b60 <_dtoa_r+0xb30>
 4003b4c:	a80b883a 	mov	r5,r21
 4003b50:	b00d883a 	mov	r6,r22
 4003b54:	e009883a 	mov	r4,fp
 4003b58:	40068340 	call	4006834 <__lshift>
 4003b5c:	102b883a 	mov	r21,r2
 4003b60:	d9c00e17 	ldw	r7,56(sp)
 4003b64:	3801211e 	bne	r7,zero,4003fec <_dtoa_r+0xfbc>
 4003b68:	d9800617 	ldw	r6,24(sp)
 4003b6c:	0181380e 	bge	zero,r6,4004050 <_dtoa_r+0x1020>
 4003b70:	d8c00b17 	ldw	r3,44(sp)
 4003b74:	1800ab1e 	bne	r3,zero,4003e24 <_dtoa_r+0xdf4>
 4003b78:	dc800717 	ldw	r18,28(sp)
 4003b7c:	dcc00617 	ldw	r19,24(sp)
 4003b80:	9029883a 	mov	r20,r18
 4003b84:	00000206 	br	4003b90 <_dtoa_r+0xb60>
 4003b88:	40061840 	call	4006184 <__multadd>
 4003b8c:	1021883a 	mov	r16,r2
 4003b90:	a80b883a 	mov	r5,r21
 4003b94:	8009883a 	mov	r4,r16
 4003b98:	4002e300 	call	4002e30 <quorem>
 4003b9c:	10800c04 	addi	r2,r2,48
 4003ba0:	90800005 	stb	r2,0(r18)
 4003ba4:	94800044 	addi	r18,r18,1
 4003ba8:	9507c83a 	sub	r3,r18,r20
 4003bac:	000f883a 	mov	r7,zero
 4003bb0:	01800284 	movi	r6,10
 4003bb4:	800b883a 	mov	r5,r16
 4003bb8:	e009883a 	mov	r4,fp
 4003bbc:	1cfff216 	blt	r3,r19,4003b88 <__ram_exceptions_end+0xfabff9fc>
 4003bc0:	1011883a 	mov	r8,r2
 4003bc4:	d8800617 	ldw	r2,24(sp)
 4003bc8:	0082370e 	bge	zero,r2,40044a8 <_dtoa_r+0x1478>
 4003bcc:	d9000717 	ldw	r4,28(sp)
 4003bd0:	0025883a 	mov	r18,zero
 4003bd4:	20af883a 	add	r23,r4,r2
 4003bd8:	01800044 	movi	r6,1
 4003bdc:	800b883a 	mov	r5,r16
 4003be0:	e009883a 	mov	r4,fp
 4003be4:	da001715 	stw	r8,92(sp)
 4003be8:	40068340 	call	4006834 <__lshift>
 4003bec:	a80b883a 	mov	r5,r21
 4003bf0:	1009883a 	mov	r4,r2
 4003bf4:	d8800915 	stw	r2,36(sp)
 4003bf8:	400697c0 	call	400697c <__mcmp>
 4003bfc:	da001717 	ldw	r8,92(sp)
 4003c00:	0081800e 	bge	zero,r2,4004204 <_dtoa_r+0x11d4>
 4003c04:	b93fffc3 	ldbu	r4,-1(r23)
 4003c08:	b8bfffc4 	addi	r2,r23,-1
 4003c0c:	1007883a 	mov	r3,r2
 4003c10:	01800e44 	movi	r6,57
 4003c14:	d9c00717 	ldw	r7,28(sp)
 4003c18:	00000506 	br	4003c30 <_dtoa_r+0xc00>
 4003c1c:	18ffffc4 	addi	r3,r3,-1
 4003c20:	11c12326 	beq	r2,r7,40040b0 <_dtoa_r+0x1080>
 4003c24:	19000003 	ldbu	r4,0(r3)
 4003c28:	102f883a 	mov	r23,r2
 4003c2c:	10bfffc4 	addi	r2,r2,-1
 4003c30:	21403fcc 	andi	r5,r4,255
 4003c34:	2940201c 	xori	r5,r5,128
 4003c38:	297fe004 	addi	r5,r5,-128
 4003c3c:	29bff726 	beq	r5,r6,4003c1c <__ram_exceptions_end+0xfabffa90>
 4003c40:	21000044 	addi	r4,r4,1
 4003c44:	11000005 	stb	r4,0(r2)
 4003c48:	a80b883a 	mov	r5,r21
 4003c4c:	e009883a 	mov	r4,fp
 4003c50:	400615c0 	call	400615c <_Bfree>
 4003c54:	883ea026 	beq	r17,zero,40036d8 <__ram_exceptions_end+0xfabff54c>
 4003c58:	90000426 	beq	r18,zero,4003c6c <_dtoa_r+0xc3c>
 4003c5c:	94400326 	beq	r18,r17,4003c6c <_dtoa_r+0xc3c>
 4003c60:	900b883a 	mov	r5,r18
 4003c64:	e009883a 	mov	r4,fp
 4003c68:	400615c0 	call	400615c <_Bfree>
 4003c6c:	880b883a 	mov	r5,r17
 4003c70:	e009883a 	mov	r4,fp
 4003c74:	400615c0 	call	400615c <_Bfree>
 4003c78:	003e9706 	br	40036d8 <__ram_exceptions_end+0xfabff54c>
 4003c7c:	01800044 	movi	r6,1
 4003c80:	d9800e15 	stw	r6,56(sp)
 4003c84:	003d9606 	br	40032e0 <__ram_exceptions_end+0xfabff154>
 4003c88:	d8800817 	ldw	r2,32(sp)
 4003c8c:	d8c00517 	ldw	r3,20(sp)
 4003c90:	d8000d15 	stw	zero,52(sp)
 4003c94:	10c5c83a 	sub	r2,r2,r3
 4003c98:	00c9c83a 	sub	r4,zero,r3
 4003c9c:	d8800815 	stw	r2,32(sp)
 4003ca0:	d9000a15 	stw	r4,40(sp)
 4003ca4:	003d9706 	br	4003304 <__ram_exceptions_end+0xfabff178>
 4003ca8:	05adc83a 	sub	r22,zero,r22
 4003cac:	dd800815 	stw	r22,32(sp)
 4003cb0:	002d883a 	mov	r22,zero
 4003cb4:	003d8e06 	br	40032f0 <__ram_exceptions_end+0xfabff164>
 4003cb8:	d9000517 	ldw	r4,20(sp)
 4003cbc:	400ce500 	call	400ce50 <__floatsidf>
 4003cc0:	100d883a 	mov	r6,r2
 4003cc4:	180f883a 	mov	r7,r3
 4003cc8:	a009883a 	mov	r4,r20
 4003ccc:	880b883a 	mov	r5,r17
 4003cd0:	400bb640 	call	400bb64 <__eqdf2>
 4003cd4:	103d7126 	beq	r2,zero,400329c <__ram_exceptions_end+0xfabff110>
 4003cd8:	d9c00517 	ldw	r7,20(sp)
 4003cdc:	39ffffc4 	addi	r7,r7,-1
 4003ce0:	d9c00515 	stw	r7,20(sp)
 4003ce4:	003d6d06 	br	400329c <__ram_exceptions_end+0xfabff110>
 4003ce8:	dd400a17 	ldw	r21,40(sp)
 4003cec:	dd000817 	ldw	r20,32(sp)
 4003cf0:	0023883a 	mov	r17,zero
 4003cf4:	003f4806 	br	4003a18 <__ram_exceptions_end+0xfabff88c>
 4003cf8:	10e3c83a 	sub	r17,r2,r3
 4003cfc:	9448983a 	sll	r4,r18,r17
 4003d00:	003d3206 	br	40031cc <__ram_exceptions_end+0xfabff040>
 4003d04:	d8000e15 	stw	zero,56(sp)
 4003d08:	003d7506 	br	40032e0 <__ram_exceptions_end+0xfabff154>
 4003d0c:	b005883a 	mov	r2,r22
 4003d10:	003f4506 	br	4003a28 <__ram_exceptions_end+0xfabff89c>
 4003d14:	dc000915 	stw	r16,36(sp)
 4003d18:	d9800a17 	ldw	r6,40(sp)
 4003d1c:	d9400917 	ldw	r5,36(sp)
 4003d20:	e009883a 	mov	r4,fp
 4003d24:	40066f40 	call	40066f4 <__pow5mult>
 4003d28:	1021883a 	mov	r16,r2
 4003d2c:	003f5a06 	br	4003a98 <__ram_exceptions_end+0xfabff90c>
 4003d30:	01c00044 	movi	r7,1
 4003d34:	d9c00b15 	stw	r7,44(sp)
 4003d38:	d8802217 	ldw	r2,136(sp)
 4003d3c:	0081280e 	bge	zero,r2,40041e0 <_dtoa_r+0x11b0>
 4003d40:	100d883a 	mov	r6,r2
 4003d44:	1021883a 	mov	r16,r2
 4003d48:	d8800c15 	stw	r2,48(sp)
 4003d4c:	d8800615 	stw	r2,24(sp)
 4003d50:	003d8806 	br	4003374 <__ram_exceptions_end+0xfabff1e8>
 4003d54:	d8800617 	ldw	r2,24(sp)
 4003d58:	00be9b16 	blt	zero,r2,40037c8 <__ram_exceptions_end+0xfabff63c>
 4003d5c:	10010f1e 	bne	r2,zero,400419c <_dtoa_r+0x116c>
 4003d60:	880b883a 	mov	r5,r17
 4003d64:	000d883a 	mov	r6,zero
 4003d68:	01d00534 	movhi	r7,16404
 4003d6c:	8009883a 	mov	r4,r16
 4003d70:	400bdbc0 	call	400bdbc <__muldf3>
 4003d74:	900d883a 	mov	r6,r18
 4003d78:	980f883a 	mov	r7,r19
 4003d7c:	1009883a 	mov	r4,r2
 4003d80:	180b883a 	mov	r5,r3
 4003d84:	400bbec0 	call	400bbec <__gedf2>
 4003d88:	002b883a 	mov	r21,zero
 4003d8c:	0023883a 	mov	r17,zero
 4003d90:	1000bf16 	blt	r2,zero,4004090 <_dtoa_r+0x1060>
 4003d94:	d9802217 	ldw	r6,136(sp)
 4003d98:	ddc00717 	ldw	r23,28(sp)
 4003d9c:	018c303a 	nor	r6,zero,r6
 4003da0:	d9800515 	stw	r6,20(sp)
 4003da4:	a80b883a 	mov	r5,r21
 4003da8:	e009883a 	mov	r4,fp
 4003dac:	400615c0 	call	400615c <_Bfree>
 4003db0:	883e4926 	beq	r17,zero,40036d8 <__ram_exceptions_end+0xfabff54c>
 4003db4:	003fad06 	br	4003c6c <__ram_exceptions_end+0xfabffae0>
 4003db8:	d9c01117 	ldw	r7,68(sp)
 4003dbc:	3801bc26 	beq	r7,zero,40044b0 <_dtoa_r+0x1480>
 4003dc0:	10810cc4 	addi	r2,r2,1075
 4003dc4:	dd400a17 	ldw	r21,40(sp)
 4003dc8:	dd000817 	ldw	r20,32(sp)
 4003dcc:	003f0a06 	br	40039f8 <__ram_exceptions_end+0xfabff86c>
 4003dd0:	00800704 	movi	r2,28
 4003dd4:	d9000817 	ldw	r4,32(sp)
 4003dd8:	a0a9883a 	add	r20,r20,r2
 4003ddc:	b0ad883a 	add	r22,r22,r2
 4003de0:	2089883a 	add	r4,r4,r2
 4003de4:	d9000815 	stw	r4,32(sp)
 4003de8:	003f5106 	br	4003b30 <__ram_exceptions_end+0xfabff9a4>
 4003dec:	d8c00317 	ldw	r3,12(sp)
 4003df0:	b8c1fc0e 	bge	r23,r3,40045e4 <_dtoa_r+0x15b4>
 4003df4:	0027883a 	mov	r19,zero
 4003df8:	b805883a 	mov	r2,r23
 4003dfc:	003f3e06 	br	4003af8 <__ram_exceptions_end+0xfabff96c>
 4003e00:	880b883a 	mov	r5,r17
 4003e04:	e009883a 	mov	r4,fp
 4003e08:	000f883a 	mov	r7,zero
 4003e0c:	01800284 	movi	r6,10
 4003e10:	40061840 	call	4006184 <__multadd>
 4003e14:	d9000c17 	ldw	r4,48(sp)
 4003e18:	1023883a 	mov	r17,r2
 4003e1c:	0102040e 	bge	zero,r4,4004630 <_dtoa_r+0x1600>
 4003e20:	d9000615 	stw	r4,24(sp)
 4003e24:	0500050e 	bge	zero,r20,4003e3c <_dtoa_r+0xe0c>
 4003e28:	880b883a 	mov	r5,r17
 4003e2c:	a00d883a 	mov	r6,r20
 4003e30:	e009883a 	mov	r4,fp
 4003e34:	40068340 	call	4006834 <__lshift>
 4003e38:	1023883a 	mov	r17,r2
 4003e3c:	9801241e 	bne	r19,zero,40042d0 <_dtoa_r+0x12a0>
 4003e40:	8829883a 	mov	r20,r17
 4003e44:	d9000617 	ldw	r4,24(sp)
 4003e48:	dcc00717 	ldw	r19,28(sp)
 4003e4c:	9480004c 	andi	r18,r18,1
 4003e50:	20bfffc4 	addi	r2,r4,-1
 4003e54:	9885883a 	add	r2,r19,r2
 4003e58:	d8800415 	stw	r2,16(sp)
 4003e5c:	dc800615 	stw	r18,24(sp)
 4003e60:	a80b883a 	mov	r5,r21
 4003e64:	8009883a 	mov	r4,r16
 4003e68:	4002e300 	call	4002e30 <quorem>
 4003e6c:	880b883a 	mov	r5,r17
 4003e70:	8009883a 	mov	r4,r16
 4003e74:	102f883a 	mov	r23,r2
 4003e78:	400697c0 	call	400697c <__mcmp>
 4003e7c:	a80b883a 	mov	r5,r21
 4003e80:	a00d883a 	mov	r6,r20
 4003e84:	e009883a 	mov	r4,fp
 4003e88:	102d883a 	mov	r22,r2
 4003e8c:	40069dc0 	call	40069dc <__mdiff>
 4003e90:	1007883a 	mov	r3,r2
 4003e94:	10800317 	ldw	r2,12(r2)
 4003e98:	bc800c04 	addi	r18,r23,48
 4003e9c:	180b883a 	mov	r5,r3
 4003ea0:	10004e1e 	bne	r2,zero,4003fdc <_dtoa_r+0xfac>
 4003ea4:	8009883a 	mov	r4,r16
 4003ea8:	d8c01615 	stw	r3,88(sp)
 4003eac:	400697c0 	call	400697c <__mcmp>
 4003eb0:	d8c01617 	ldw	r3,88(sp)
 4003eb4:	e009883a 	mov	r4,fp
 4003eb8:	d8801615 	stw	r2,88(sp)
 4003ebc:	180b883a 	mov	r5,r3
 4003ec0:	400615c0 	call	400615c <_Bfree>
 4003ec4:	d8801617 	ldw	r2,88(sp)
 4003ec8:	1000041e 	bne	r2,zero,4003edc <_dtoa_r+0xeac>
 4003ecc:	d9800317 	ldw	r6,12(sp)
 4003ed0:	3000021e 	bne	r6,zero,4003edc <_dtoa_r+0xeac>
 4003ed4:	d8c00617 	ldw	r3,24(sp)
 4003ed8:	18003726 	beq	r3,zero,4003fb8 <_dtoa_r+0xf88>
 4003edc:	b0002016 	blt	r22,zero,4003f60 <_dtoa_r+0xf30>
 4003ee0:	b000041e 	bne	r22,zero,4003ef4 <_dtoa_r+0xec4>
 4003ee4:	d9000317 	ldw	r4,12(sp)
 4003ee8:	2000021e 	bne	r4,zero,4003ef4 <_dtoa_r+0xec4>
 4003eec:	d8c00617 	ldw	r3,24(sp)
 4003ef0:	18001b26 	beq	r3,zero,4003f60 <_dtoa_r+0xf30>
 4003ef4:	00810716 	blt	zero,r2,4004314 <_dtoa_r+0x12e4>
 4003ef8:	d8c00417 	ldw	r3,16(sp)
 4003efc:	9d800044 	addi	r22,r19,1
 4003f00:	9c800005 	stb	r18,0(r19)
 4003f04:	b02f883a 	mov	r23,r22
 4003f08:	98c10626 	beq	r19,r3,4004324 <_dtoa_r+0x12f4>
 4003f0c:	800b883a 	mov	r5,r16
 4003f10:	000f883a 	mov	r7,zero
 4003f14:	01800284 	movi	r6,10
 4003f18:	e009883a 	mov	r4,fp
 4003f1c:	40061840 	call	4006184 <__multadd>
 4003f20:	1021883a 	mov	r16,r2
 4003f24:	000f883a 	mov	r7,zero
 4003f28:	01800284 	movi	r6,10
 4003f2c:	880b883a 	mov	r5,r17
 4003f30:	e009883a 	mov	r4,fp
 4003f34:	8d002526 	beq	r17,r20,4003fcc <_dtoa_r+0xf9c>
 4003f38:	40061840 	call	4006184 <__multadd>
 4003f3c:	a00b883a 	mov	r5,r20
 4003f40:	000f883a 	mov	r7,zero
 4003f44:	01800284 	movi	r6,10
 4003f48:	e009883a 	mov	r4,fp
 4003f4c:	1023883a 	mov	r17,r2
 4003f50:	40061840 	call	4006184 <__multadd>
 4003f54:	1029883a 	mov	r20,r2
 4003f58:	b027883a 	mov	r19,r22
 4003f5c:	003fc006 	br	4003e60 <__ram_exceptions_end+0xfabffcd4>
 4003f60:	9011883a 	mov	r8,r18
 4003f64:	00800e0e 	bge	zero,r2,4003fa0 <_dtoa_r+0xf70>
 4003f68:	800b883a 	mov	r5,r16
 4003f6c:	01800044 	movi	r6,1
 4003f70:	e009883a 	mov	r4,fp
 4003f74:	da001715 	stw	r8,92(sp)
 4003f78:	40068340 	call	4006834 <__lshift>
 4003f7c:	a80b883a 	mov	r5,r21
 4003f80:	1009883a 	mov	r4,r2
 4003f84:	1021883a 	mov	r16,r2
 4003f88:	400697c0 	call	400697c <__mcmp>
 4003f8c:	da001717 	ldw	r8,92(sp)
 4003f90:	0081960e 	bge	zero,r2,40045ec <_dtoa_r+0x15bc>
 4003f94:	00800e44 	movi	r2,57
 4003f98:	40817026 	beq	r8,r2,400455c <_dtoa_r+0x152c>
 4003f9c:	ba000c44 	addi	r8,r23,49
 4003fa0:	8825883a 	mov	r18,r17
 4003fa4:	9dc00044 	addi	r23,r19,1
 4003fa8:	9a000005 	stb	r8,0(r19)
 4003fac:	a023883a 	mov	r17,r20
 4003fb0:	dc000915 	stw	r16,36(sp)
 4003fb4:	003f2406 	br	4003c48 <__ram_exceptions_end+0xfabffabc>
 4003fb8:	00800e44 	movi	r2,57
 4003fbc:	9011883a 	mov	r8,r18
 4003fc0:	90816626 	beq	r18,r2,400455c <_dtoa_r+0x152c>
 4003fc4:	05bff516 	blt	zero,r22,4003f9c <__ram_exceptions_end+0xfabffe10>
 4003fc8:	003ff506 	br	4003fa0 <__ram_exceptions_end+0xfabffe14>
 4003fcc:	40061840 	call	4006184 <__multadd>
 4003fd0:	1023883a 	mov	r17,r2
 4003fd4:	1029883a 	mov	r20,r2
 4003fd8:	003fdf06 	br	4003f58 <__ram_exceptions_end+0xfabffdcc>
 4003fdc:	e009883a 	mov	r4,fp
 4003fe0:	400615c0 	call	400615c <_Bfree>
 4003fe4:	00800044 	movi	r2,1
 4003fe8:	003fbc06 	br	4003edc <__ram_exceptions_end+0xfabffd50>
 4003fec:	a80b883a 	mov	r5,r21
 4003ff0:	8009883a 	mov	r4,r16
 4003ff4:	400697c0 	call	400697c <__mcmp>
 4003ff8:	103edb0e 	bge	r2,zero,4003b68 <__ram_exceptions_end+0xfabff9dc>
 4003ffc:	800b883a 	mov	r5,r16
 4004000:	000f883a 	mov	r7,zero
 4004004:	01800284 	movi	r6,10
 4004008:	e009883a 	mov	r4,fp
 400400c:	40061840 	call	4006184 <__multadd>
 4004010:	1021883a 	mov	r16,r2
 4004014:	d8800517 	ldw	r2,20(sp)
 4004018:	d8c00b17 	ldw	r3,44(sp)
 400401c:	10bfffc4 	addi	r2,r2,-1
 4004020:	d8800515 	stw	r2,20(sp)
 4004024:	183f761e 	bne	r3,zero,4003e00 <__ram_exceptions_end+0xfabffc74>
 4004028:	d9000c17 	ldw	r4,48(sp)
 400402c:	0101730e 	bge	zero,r4,40045fc <_dtoa_r+0x15cc>
 4004030:	d9000615 	stw	r4,24(sp)
 4004034:	003ed006 	br	4003b78 <__ram_exceptions_end+0xfabff9ec>
 4004038:	00800084 	movi	r2,2
 400403c:	3081861e 	bne	r6,r2,4004658 <_dtoa_r+0x1628>
 4004040:	d8000b15 	stw	zero,44(sp)
 4004044:	003f3c06 	br	4003d38 <__ram_exceptions_end+0xfabffbac>
 4004048:	dc000917 	ldw	r16,36(sp)
 400404c:	003e9206 	br	4003a98 <__ram_exceptions_end+0xfabff90c>
 4004050:	d9c00317 	ldw	r7,12(sp)
 4004054:	00800084 	movi	r2,2
 4004058:	11fec50e 	bge	r2,r7,4003b70 <__ram_exceptions_end+0xfabff9e4>
 400405c:	d9000617 	ldw	r4,24(sp)
 4004060:	20013c1e 	bne	r4,zero,4004554 <_dtoa_r+0x1524>
 4004064:	a80b883a 	mov	r5,r21
 4004068:	000f883a 	mov	r7,zero
 400406c:	01800144 	movi	r6,5
 4004070:	e009883a 	mov	r4,fp
 4004074:	40061840 	call	4006184 <__multadd>
 4004078:	100b883a 	mov	r5,r2
 400407c:	8009883a 	mov	r4,r16
 4004080:	102b883a 	mov	r21,r2
 4004084:	400697c0 	call	400697c <__mcmp>
 4004088:	dc000915 	stw	r16,36(sp)
 400408c:	00bf410e 	bge	zero,r2,4003d94 <__ram_exceptions_end+0xfabffc08>
 4004090:	d9c00717 	ldw	r7,28(sp)
 4004094:	00800c44 	movi	r2,49
 4004098:	38800005 	stb	r2,0(r7)
 400409c:	d8800517 	ldw	r2,20(sp)
 40040a0:	3dc00044 	addi	r23,r7,1
 40040a4:	10800044 	addi	r2,r2,1
 40040a8:	d8800515 	stw	r2,20(sp)
 40040ac:	003f3d06 	br	4003da4 <__ram_exceptions_end+0xfabffc18>
 40040b0:	d9800517 	ldw	r6,20(sp)
 40040b4:	d9c00717 	ldw	r7,28(sp)
 40040b8:	00800c44 	movi	r2,49
 40040bc:	31800044 	addi	r6,r6,1
 40040c0:	d9800515 	stw	r6,20(sp)
 40040c4:	38800005 	stb	r2,0(r7)
 40040c8:	003edf06 	br	4003c48 <__ram_exceptions_end+0xfabffabc>
 40040cc:	d8000b15 	stw	zero,44(sp)
 40040d0:	003c9f06 	br	4003350 <__ram_exceptions_end+0xfabff1c4>
 40040d4:	903e7e1e 	bne	r18,zero,4003ad0 <__ram_exceptions_end+0xfabff944>
 40040d8:	00800434 	movhi	r2,16
 40040dc:	10bfffc4 	addi	r2,r2,-1
 40040e0:	9884703a 	and	r2,r19,r2
 40040e4:	1000ea1e 	bne	r2,zero,4004490 <_dtoa_r+0x1460>
 40040e8:	9cdffc2c 	andhi	r19,r19,32752
 40040ec:	9800e826 	beq	r19,zero,4004490 <_dtoa_r+0x1460>
 40040f0:	d9c00817 	ldw	r7,32(sp)
 40040f4:	b5800044 	addi	r22,r22,1
 40040f8:	04c00044 	movi	r19,1
 40040fc:	39c00044 	addi	r7,r7,1
 4004100:	d9c00815 	stw	r7,32(sp)
 4004104:	d8800d17 	ldw	r2,52(sp)
 4004108:	103e721e 	bne	r2,zero,4003ad4 <__ram_exceptions_end+0xfabff948>
 400410c:	00800044 	movi	r2,1
 4004110:	003e7906 	br	4003af8 <__ram_exceptions_end+0xfabff96c>
 4004114:	8009883a 	mov	r4,r16
 4004118:	400ce500 	call	400ce50 <__floatsidf>
 400411c:	d9800f17 	ldw	r6,60(sp)
 4004120:	d9c01017 	ldw	r7,64(sp)
 4004124:	1009883a 	mov	r4,r2
 4004128:	180b883a 	mov	r5,r3
 400412c:	400bdbc0 	call	400bdbc <__muldf3>
 4004130:	000d883a 	mov	r6,zero
 4004134:	01d00734 	movhi	r7,16412
 4004138:	1009883a 	mov	r4,r2
 400413c:	180b883a 	mov	r5,r3
 4004140:	400a9d00 	call	400a9d0 <__adddf3>
 4004144:	047f3034 	movhi	r17,64704
 4004148:	1021883a 	mov	r16,r2
 400414c:	1c63883a 	add	r17,r3,r17
 4004150:	d9000f17 	ldw	r4,60(sp)
 4004154:	d9401017 	ldw	r5,64(sp)
 4004158:	000d883a 	mov	r6,zero
 400415c:	01d00534 	movhi	r7,16404
 4004160:	400c4d40 	call	400c4d4 <__subdf3>
 4004164:	800d883a 	mov	r6,r16
 4004168:	880f883a 	mov	r7,r17
 400416c:	1009883a 	mov	r4,r2
 4004170:	180b883a 	mov	r5,r3
 4004174:	102b883a 	mov	r21,r2
 4004178:	1829883a 	mov	r20,r3
 400417c:	400bbec0 	call	400bbec <__gedf2>
 4004180:	00806c16 	blt	zero,r2,4004334 <_dtoa_r+0x1304>
 4004184:	89e0003c 	xorhi	r7,r17,32768
 4004188:	800d883a 	mov	r6,r16
 400418c:	a809883a 	mov	r4,r21
 4004190:	a00b883a 	mov	r5,r20
 4004194:	400bcc80 	call	400bcc8 <__ledf2>
 4004198:	103d7e0e 	bge	r2,zero,4003794 <__ram_exceptions_end+0xfabff608>
 400419c:	002b883a 	mov	r21,zero
 40041a0:	0023883a 	mov	r17,zero
 40041a4:	003efb06 	br	4003d94 <__ram_exceptions_end+0xfabffc08>
 40041a8:	d8800717 	ldw	r2,28(sp)
 40041ac:	003bd006 	br	40030f0 <__ram_exceptions_end+0xfabfef64>
 40041b0:	d9000a17 	ldw	r4,40(sp)
 40041b4:	d9800d17 	ldw	r6,52(sp)
 40041b8:	dd400a15 	stw	r21,40(sp)
 40041bc:	a905c83a 	sub	r2,r21,r4
 40041c0:	308d883a 	add	r6,r6,r2
 40041c4:	d9800d15 	stw	r6,52(sp)
 40041c8:	002b883a 	mov	r21,zero
 40041cc:	003e0606 	br	40039e8 <__ram_exceptions_end+0xfabff85c>
 40041d0:	9023883a 	mov	r17,r18
 40041d4:	9829883a 	mov	r20,r19
 40041d8:	04000084 	movi	r16,2
 40041dc:	003c9206 	br	4003428 <__ram_exceptions_end+0xfabff29c>
 40041e0:	04000044 	movi	r16,1
 40041e4:	dc000c15 	stw	r16,48(sp)
 40041e8:	dc000615 	stw	r16,24(sp)
 40041ec:	dc002215 	stw	r16,136(sp)
 40041f0:	e0001115 	stw	zero,68(fp)
 40041f4:	000b883a 	mov	r5,zero
 40041f8:	003c6906 	br	40033a0 <__ram_exceptions_end+0xfabff214>
 40041fc:	3021883a 	mov	r16,r6
 4004200:	003ffb06 	br	40041f0 <__ram_exceptions_end+0xfac00064>
 4004204:	1000021e 	bne	r2,zero,4004210 <_dtoa_r+0x11e0>
 4004208:	4200004c 	andi	r8,r8,1
 400420c:	403e7d1e 	bne	r8,zero,4003c04 <__ram_exceptions_end+0xfabffa78>
 4004210:	01000c04 	movi	r4,48
 4004214:	00000106 	br	400421c <_dtoa_r+0x11ec>
 4004218:	102f883a 	mov	r23,r2
 400421c:	b8bfffc4 	addi	r2,r23,-1
 4004220:	10c00007 	ldb	r3,0(r2)
 4004224:	193ffc26 	beq	r3,r4,4004218 <__ram_exceptions_end+0xfac0008c>
 4004228:	003e8706 	br	4003c48 <__ram_exceptions_end+0xfabffabc>
 400422c:	d8800517 	ldw	r2,20(sp)
 4004230:	00a3c83a 	sub	r17,zero,r2
 4004234:	8800a426 	beq	r17,zero,40044c8 <_dtoa_r+0x1498>
 4004238:	888003cc 	andi	r2,r17,15
 400423c:	100490fa 	slli	r2,r2,3
 4004240:	00c10074 	movhi	r3,1025
 4004244:	18feda04 	addi	r3,r3,-1176
 4004248:	1885883a 	add	r2,r3,r2
 400424c:	11800017 	ldw	r6,0(r2)
 4004250:	11c00117 	ldw	r7,4(r2)
 4004254:	9009883a 	mov	r4,r18
 4004258:	980b883a 	mov	r5,r19
 400425c:	8823d13a 	srai	r17,r17,4
 4004260:	400bdbc0 	call	400bdbc <__muldf3>
 4004264:	d8800f15 	stw	r2,60(sp)
 4004268:	d8c01015 	stw	r3,64(sp)
 400426c:	8800e826 	beq	r17,zero,4004610 <_dtoa_r+0x15e0>
 4004270:	05010074 	movhi	r20,1025
 4004274:	a53ed004 	addi	r20,r20,-1216
 4004278:	04000084 	movi	r16,2
 400427c:	8980004c 	andi	r6,r17,1
 4004280:	1009883a 	mov	r4,r2
 4004284:	8823d07a 	srai	r17,r17,1
 4004288:	180b883a 	mov	r5,r3
 400428c:	30000426 	beq	r6,zero,40042a0 <_dtoa_r+0x1270>
 4004290:	a1800017 	ldw	r6,0(r20)
 4004294:	a1c00117 	ldw	r7,4(r20)
 4004298:	84000044 	addi	r16,r16,1
 400429c:	400bdbc0 	call	400bdbc <__muldf3>
 40042a0:	a5000204 	addi	r20,r20,8
 40042a4:	883ff51e 	bne	r17,zero,400427c <__ram_exceptions_end+0xfac000f0>
 40042a8:	d8800f15 	stw	r2,60(sp)
 40042ac:	d8c01015 	stw	r3,64(sp)
 40042b0:	003c7606 	br	400348c <__ram_exceptions_end+0xfabff300>
 40042b4:	00c00c04 	movi	r3,48
 40042b8:	10c00005 	stb	r3,0(r2)
 40042bc:	d8c00517 	ldw	r3,20(sp)
 40042c0:	bd3fffc3 	ldbu	r20,-1(r23)
 40042c4:	18c00044 	addi	r3,r3,1
 40042c8:	d8c00515 	stw	r3,20(sp)
 40042cc:	003db906 	br	40039b4 <__ram_exceptions_end+0xfabff828>
 40042d0:	89400117 	ldw	r5,4(r17)
 40042d4:	e009883a 	mov	r4,fp
 40042d8:	40060b40 	call	40060b4 <_Balloc>
 40042dc:	89800417 	ldw	r6,16(r17)
 40042e0:	89400304 	addi	r5,r17,12
 40042e4:	11000304 	addi	r4,r2,12
 40042e8:	31800084 	addi	r6,r6,2
 40042ec:	318d883a 	add	r6,r6,r6
 40042f0:	318d883a 	add	r6,r6,r6
 40042f4:	1027883a 	mov	r19,r2
 40042f8:	4005e440 	call	4005e44 <memcpy>
 40042fc:	01800044 	movi	r6,1
 4004300:	980b883a 	mov	r5,r19
 4004304:	e009883a 	mov	r4,fp
 4004308:	40068340 	call	4006834 <__lshift>
 400430c:	1029883a 	mov	r20,r2
 4004310:	003ecc06 	br	4003e44 <__ram_exceptions_end+0xfabffcb8>
 4004314:	00800e44 	movi	r2,57
 4004318:	90809026 	beq	r18,r2,400455c <_dtoa_r+0x152c>
 400431c:	92000044 	addi	r8,r18,1
 4004320:	003f1f06 	br	4003fa0 <__ram_exceptions_end+0xfabffe14>
 4004324:	9011883a 	mov	r8,r18
 4004328:	8825883a 	mov	r18,r17
 400432c:	a023883a 	mov	r17,r20
 4004330:	003e2906 	br	4003bd8 <__ram_exceptions_end+0xfabffa4c>
 4004334:	002b883a 	mov	r21,zero
 4004338:	0023883a 	mov	r17,zero
 400433c:	003f5406 	br	4004090 <__ram_exceptions_end+0xfabfff04>
 4004340:	61bfffc4 	addi	r6,r12,-1
 4004344:	300490fa 	slli	r2,r6,3
 4004348:	00c10074 	movhi	r3,1025
 400434c:	18feda04 	addi	r3,r3,-1176
 4004350:	1885883a 	add	r2,r3,r2
 4004354:	11000017 	ldw	r4,0(r2)
 4004358:	11400117 	ldw	r5,4(r2)
 400435c:	d8800717 	ldw	r2,28(sp)
 4004360:	880f883a 	mov	r7,r17
 4004364:	d9801215 	stw	r6,72(sp)
 4004368:	800d883a 	mov	r6,r16
 400436c:	db001615 	stw	r12,88(sp)
 4004370:	15c00044 	addi	r23,r2,1
 4004374:	400bdbc0 	call	400bdbc <__muldf3>
 4004378:	d9401017 	ldw	r5,64(sp)
 400437c:	d9000f17 	ldw	r4,60(sp)
 4004380:	d8c01515 	stw	r3,84(sp)
 4004384:	d8801415 	stw	r2,80(sp)
 4004388:	400cdd00 	call	400cdd0 <__fixdfsi>
 400438c:	1009883a 	mov	r4,r2
 4004390:	1021883a 	mov	r16,r2
 4004394:	400ce500 	call	400ce50 <__floatsidf>
 4004398:	d9000f17 	ldw	r4,60(sp)
 400439c:	d9401017 	ldw	r5,64(sp)
 40043a0:	100d883a 	mov	r6,r2
 40043a4:	180f883a 	mov	r7,r3
 40043a8:	400c4d40 	call	400c4d4 <__subdf3>
 40043ac:	1829883a 	mov	r20,r3
 40043b0:	d8c00717 	ldw	r3,28(sp)
 40043b4:	84000c04 	addi	r16,r16,48
 40043b8:	1023883a 	mov	r17,r2
 40043bc:	1c000005 	stb	r16,0(r3)
 40043c0:	db001617 	ldw	r12,88(sp)
 40043c4:	00800044 	movi	r2,1
 40043c8:	60802226 	beq	r12,r2,4004454 <_dtoa_r+0x1424>
 40043cc:	d9c00717 	ldw	r7,28(sp)
 40043d0:	8805883a 	mov	r2,r17
 40043d4:	b82b883a 	mov	r21,r23
 40043d8:	3b19883a 	add	r12,r7,r12
 40043dc:	6023883a 	mov	r17,r12
 40043e0:	a007883a 	mov	r3,r20
 40043e4:	dc800f15 	stw	r18,60(sp)
 40043e8:	000d883a 	mov	r6,zero
 40043ec:	01d00934 	movhi	r7,16420
 40043f0:	1009883a 	mov	r4,r2
 40043f4:	180b883a 	mov	r5,r3
 40043f8:	400bdbc0 	call	400bdbc <__muldf3>
 40043fc:	180b883a 	mov	r5,r3
 4004400:	1009883a 	mov	r4,r2
 4004404:	1829883a 	mov	r20,r3
 4004408:	1025883a 	mov	r18,r2
 400440c:	400cdd00 	call	400cdd0 <__fixdfsi>
 4004410:	1009883a 	mov	r4,r2
 4004414:	1021883a 	mov	r16,r2
 4004418:	400ce500 	call	400ce50 <__floatsidf>
 400441c:	100d883a 	mov	r6,r2
 4004420:	180f883a 	mov	r7,r3
 4004424:	9009883a 	mov	r4,r18
 4004428:	a00b883a 	mov	r5,r20
 400442c:	84000c04 	addi	r16,r16,48
 4004430:	400c4d40 	call	400c4d4 <__subdf3>
 4004434:	ad400044 	addi	r21,r21,1
 4004438:	ac3fffc5 	stb	r16,-1(r21)
 400443c:	ac7fea1e 	bne	r21,r17,40043e8 <__ram_exceptions_end+0xfac0025c>
 4004440:	1023883a 	mov	r17,r2
 4004444:	d8801217 	ldw	r2,72(sp)
 4004448:	dc800f17 	ldw	r18,60(sp)
 400444c:	1829883a 	mov	r20,r3
 4004450:	b8af883a 	add	r23,r23,r2
 4004454:	d9001417 	ldw	r4,80(sp)
 4004458:	d9401517 	ldw	r5,84(sp)
 400445c:	000d883a 	mov	r6,zero
 4004460:	01cff834 	movhi	r7,16352
 4004464:	400a9d00 	call	400a9d0 <__adddf3>
 4004468:	880d883a 	mov	r6,r17
 400446c:	a00f883a 	mov	r7,r20
 4004470:	1009883a 	mov	r4,r2
 4004474:	180b883a 	mov	r5,r3
 4004478:	400bcc80 	call	400bcc8 <__ledf2>
 400447c:	10003e0e 	bge	r2,zero,4004578 <_dtoa_r+0x1548>
 4004480:	d9001317 	ldw	r4,76(sp)
 4004484:	bd3fffc3 	ldbu	r20,-1(r23)
 4004488:	d9000515 	stw	r4,20(sp)
 400448c:	003d3b06 	br	400397c <__ram_exceptions_end+0xfabff7f0>
 4004490:	0027883a 	mov	r19,zero
 4004494:	003f1b06 	br	4004104 <__ram_exceptions_end+0xfabfff78>
 4004498:	d8800817 	ldw	r2,32(sp)
 400449c:	11e9c83a 	sub	r20,r2,r7
 40044a0:	0005883a 	mov	r2,zero
 40044a4:	003d5406 	br	40039f8 <__ram_exceptions_end+0xfabff86c>
 40044a8:	00800044 	movi	r2,1
 40044ac:	003dc706 	br	4003bcc <__ram_exceptions_end+0xfabffa40>
 40044b0:	d8c00217 	ldw	r3,8(sp)
 40044b4:	00800d84 	movi	r2,54
 40044b8:	dd400a17 	ldw	r21,40(sp)
 40044bc:	10c5c83a 	sub	r2,r2,r3
 40044c0:	dd000817 	ldw	r20,32(sp)
 40044c4:	003d4c06 	br	40039f8 <__ram_exceptions_end+0xfabff86c>
 40044c8:	dc800f15 	stw	r18,60(sp)
 40044cc:	dcc01015 	stw	r19,64(sp)
 40044d0:	04000084 	movi	r16,2
 40044d4:	003bed06 	br	400348c <__ram_exceptions_end+0xfabff300>
 40044d8:	d9000617 	ldw	r4,24(sp)
 40044dc:	203f0d26 	beq	r4,zero,4004114 <__ram_exceptions_end+0xfabfff88>
 40044e0:	d9800c17 	ldw	r6,48(sp)
 40044e4:	01bcab0e 	bge	zero,r6,4003794 <__ram_exceptions_end+0xfabff608>
 40044e8:	d9401017 	ldw	r5,64(sp)
 40044ec:	d9000f17 	ldw	r4,60(sp)
 40044f0:	000d883a 	mov	r6,zero
 40044f4:	01d00934 	movhi	r7,16420
 40044f8:	400bdbc0 	call	400bdbc <__muldf3>
 40044fc:	81000044 	addi	r4,r16,1
 4004500:	d8800f15 	stw	r2,60(sp)
 4004504:	d8c01015 	stw	r3,64(sp)
 4004508:	400ce500 	call	400ce50 <__floatsidf>
 400450c:	d9800f17 	ldw	r6,60(sp)
 4004510:	d9c01017 	ldw	r7,64(sp)
 4004514:	1009883a 	mov	r4,r2
 4004518:	180b883a 	mov	r5,r3
 400451c:	400bdbc0 	call	400bdbc <__muldf3>
 4004520:	01d00734 	movhi	r7,16412
 4004524:	000d883a 	mov	r6,zero
 4004528:	1009883a 	mov	r4,r2
 400452c:	180b883a 	mov	r5,r3
 4004530:	400a9d00 	call	400a9d0 <__adddf3>
 4004534:	d9c00517 	ldw	r7,20(sp)
 4004538:	047f3034 	movhi	r17,64704
 400453c:	1021883a 	mov	r16,r2
 4004540:	39ffffc4 	addi	r7,r7,-1
 4004544:	d9c01315 	stw	r7,76(sp)
 4004548:	1c63883a 	add	r17,r3,r17
 400454c:	db000c17 	ldw	r12,48(sp)
 4004550:	003bea06 	br	40034fc <__ram_exceptions_end+0xfabff370>
 4004554:	dc000915 	stw	r16,36(sp)
 4004558:	003e0e06 	br	4003d94 <__ram_exceptions_end+0xfabffc08>
 400455c:	01000e44 	movi	r4,57
 4004560:	8825883a 	mov	r18,r17
 4004564:	9dc00044 	addi	r23,r19,1
 4004568:	99000005 	stb	r4,0(r19)
 400456c:	a023883a 	mov	r17,r20
 4004570:	dc000915 	stw	r16,36(sp)
 4004574:	003da406 	br	4003c08 <__ram_exceptions_end+0xfabffa7c>
 4004578:	d9801417 	ldw	r6,80(sp)
 400457c:	d9c01517 	ldw	r7,84(sp)
 4004580:	0009883a 	mov	r4,zero
 4004584:	014ff834 	movhi	r5,16352
 4004588:	400c4d40 	call	400c4d4 <__subdf3>
 400458c:	880d883a 	mov	r6,r17
 4004590:	a00f883a 	mov	r7,r20
 4004594:	1009883a 	mov	r4,r2
 4004598:	180b883a 	mov	r5,r3
 400459c:	400bbec0 	call	400bbec <__gedf2>
 40045a0:	00bc7c0e 	bge	zero,r2,4003794 <__ram_exceptions_end+0xfabff608>
 40045a4:	01000c04 	movi	r4,48
 40045a8:	00000106 	br	40045b0 <_dtoa_r+0x1580>
 40045ac:	102f883a 	mov	r23,r2
 40045b0:	b8bfffc4 	addi	r2,r23,-1
 40045b4:	10c00007 	ldb	r3,0(r2)
 40045b8:	193ffc26 	beq	r3,r4,40045ac <__ram_exceptions_end+0xfac00420>
 40045bc:	d9801317 	ldw	r6,76(sp)
 40045c0:	d9800515 	stw	r6,20(sp)
 40045c4:	003c4406 	br	40036d8 <__ram_exceptions_end+0xfabff54c>
 40045c8:	d9801317 	ldw	r6,76(sp)
 40045cc:	d9800515 	stw	r6,20(sp)
 40045d0:	003cea06 	br	400397c <__ram_exceptions_end+0xfabff7f0>
 40045d4:	dd800f17 	ldw	r22,60(sp)
 40045d8:	dcc01017 	ldw	r19,64(sp)
 40045dc:	dc801217 	ldw	r18,72(sp)
 40045e0:	003c6c06 	br	4003794 <__ram_exceptions_end+0xfabff608>
 40045e4:	903e031e 	bne	r18,zero,4003df4 <__ram_exceptions_end+0xfabffc68>
 40045e8:	003ebb06 	br	40040d8 <__ram_exceptions_end+0xfabfff4c>
 40045ec:	103e6c1e 	bne	r2,zero,4003fa0 <__ram_exceptions_end+0xfabffe14>
 40045f0:	4080004c 	andi	r2,r8,1
 40045f4:	103e6a26 	beq	r2,zero,4003fa0 <__ram_exceptions_end+0xfabffe14>
 40045f8:	003e6606 	br	4003f94 <__ram_exceptions_end+0xfabffe08>
 40045fc:	d8c00317 	ldw	r3,12(sp)
 4004600:	00800084 	movi	r2,2
 4004604:	10c02916 	blt	r2,r3,40046ac <_dtoa_r+0x167c>
 4004608:	d9000c17 	ldw	r4,48(sp)
 400460c:	003e8806 	br	4004030 <__ram_exceptions_end+0xfabffea4>
 4004610:	04000084 	movi	r16,2
 4004614:	003b9d06 	br	400348c <__ram_exceptions_end+0xfabff300>
 4004618:	d9001317 	ldw	r4,76(sp)
 400461c:	d9000515 	stw	r4,20(sp)
 4004620:	003cd606 	br	400397c <__ram_exceptions_end+0xfabff7f0>
 4004624:	d8801317 	ldw	r2,76(sp)
 4004628:	d8800515 	stw	r2,20(sp)
 400462c:	003c2a06 	br	40036d8 <__ram_exceptions_end+0xfabff54c>
 4004630:	d9800317 	ldw	r6,12(sp)
 4004634:	00800084 	movi	r2,2
 4004638:	11801516 	blt	r2,r6,4004690 <_dtoa_r+0x1660>
 400463c:	d9c00c17 	ldw	r7,48(sp)
 4004640:	d9c00615 	stw	r7,24(sp)
 4004644:	003df706 	br	4003e24 <__ram_exceptions_end+0xfabffc98>
 4004648:	193d3926 	beq	r3,r4,4003b30 <__ram_exceptions_end+0xfabff9a4>
 400464c:	00c00f04 	movi	r3,60
 4004650:	1885c83a 	sub	r2,r3,r2
 4004654:	003ddf06 	br	4003dd4 <__ram_exceptions_end+0xfabffc48>
 4004658:	e009883a 	mov	r4,fp
 400465c:	e0001115 	stw	zero,68(fp)
 4004660:	000b883a 	mov	r5,zero
 4004664:	40060b40 	call	40060b4 <_Balloc>
 4004668:	d8800715 	stw	r2,28(sp)
 400466c:	d8c00717 	ldw	r3,28(sp)
 4004670:	00bfffc4 	movi	r2,-1
 4004674:	01000044 	movi	r4,1
 4004678:	d8800c15 	stw	r2,48(sp)
 400467c:	e0c01015 	stw	r3,64(fp)
 4004680:	d9000b15 	stw	r4,44(sp)
 4004684:	d8800615 	stw	r2,24(sp)
 4004688:	d8002215 	stw	zero,136(sp)
 400468c:	003c4106 	br	4003794 <__ram_exceptions_end+0xfabff608>
 4004690:	d8c00c17 	ldw	r3,48(sp)
 4004694:	d8c00615 	stw	r3,24(sp)
 4004698:	003e7006 	br	400405c <__ram_exceptions_end+0xfabffed0>
 400469c:	04400044 	movi	r17,1
 40046a0:	003b2006 	br	4003324 <__ram_exceptions_end+0xfabff198>
 40046a4:	000b883a 	mov	r5,zero
 40046a8:	003b3d06 	br	40033a0 <__ram_exceptions_end+0xfabff214>
 40046ac:	d8800c17 	ldw	r2,48(sp)
 40046b0:	d8800615 	stw	r2,24(sp)
 40046b4:	003e6906 	br	400405c <__ram_exceptions_end+0xfabffed0>

040046b8 <__sflush_r>:
 40046b8:	2880030b 	ldhu	r2,12(r5)
 40046bc:	defffb04 	addi	sp,sp,-20
 40046c0:	dcc00315 	stw	r19,12(sp)
 40046c4:	dc400115 	stw	r17,4(sp)
 40046c8:	dfc00415 	stw	ra,16(sp)
 40046cc:	dc800215 	stw	r18,8(sp)
 40046d0:	dc000015 	stw	r16,0(sp)
 40046d4:	10c0020c 	andi	r3,r2,8
 40046d8:	2823883a 	mov	r17,r5
 40046dc:	2027883a 	mov	r19,r4
 40046e0:	1800311e 	bne	r3,zero,40047a8 <__sflush_r+0xf0>
 40046e4:	28c00117 	ldw	r3,4(r5)
 40046e8:	10820014 	ori	r2,r2,2048
 40046ec:	2880030d 	sth	r2,12(r5)
 40046f0:	00c04b0e 	bge	zero,r3,4004820 <__sflush_r+0x168>
 40046f4:	8a000a17 	ldw	r8,40(r17)
 40046f8:	40002326 	beq	r8,zero,4004788 <__sflush_r+0xd0>
 40046fc:	9c000017 	ldw	r16,0(r19)
 4004700:	10c4000c 	andi	r3,r2,4096
 4004704:	98000015 	stw	zero,0(r19)
 4004708:	18004826 	beq	r3,zero,400482c <__sflush_r+0x174>
 400470c:	89801417 	ldw	r6,80(r17)
 4004710:	10c0010c 	andi	r3,r2,4
 4004714:	18000626 	beq	r3,zero,4004730 <__sflush_r+0x78>
 4004718:	88c00117 	ldw	r3,4(r17)
 400471c:	88800c17 	ldw	r2,48(r17)
 4004720:	30cdc83a 	sub	r6,r6,r3
 4004724:	10000226 	beq	r2,zero,4004730 <__sflush_r+0x78>
 4004728:	88800f17 	ldw	r2,60(r17)
 400472c:	308dc83a 	sub	r6,r6,r2
 4004730:	89400717 	ldw	r5,28(r17)
 4004734:	000f883a 	mov	r7,zero
 4004738:	9809883a 	mov	r4,r19
 400473c:	403ee83a 	callr	r8
 4004740:	00ffffc4 	movi	r3,-1
 4004744:	10c04426 	beq	r2,r3,4004858 <__sflush_r+0x1a0>
 4004748:	88c0030b 	ldhu	r3,12(r17)
 400474c:	89000417 	ldw	r4,16(r17)
 4004750:	88000115 	stw	zero,4(r17)
 4004754:	197dffcc 	andi	r5,r3,63487
 4004758:	8940030d 	sth	r5,12(r17)
 400475c:	89000015 	stw	r4,0(r17)
 4004760:	18c4000c 	andi	r3,r3,4096
 4004764:	18002c1e 	bne	r3,zero,4004818 <__sflush_r+0x160>
 4004768:	89400c17 	ldw	r5,48(r17)
 400476c:	9c000015 	stw	r16,0(r19)
 4004770:	28000526 	beq	r5,zero,4004788 <__sflush_r+0xd0>
 4004774:	88801004 	addi	r2,r17,64
 4004778:	28800226 	beq	r5,r2,4004784 <__sflush_r+0xcc>
 400477c:	9809883a 	mov	r4,r19
 4004780:	4004e240 	call	4004e24 <_free_r>
 4004784:	88000c15 	stw	zero,48(r17)
 4004788:	0005883a 	mov	r2,zero
 400478c:	dfc00417 	ldw	ra,16(sp)
 4004790:	dcc00317 	ldw	r19,12(sp)
 4004794:	dc800217 	ldw	r18,8(sp)
 4004798:	dc400117 	ldw	r17,4(sp)
 400479c:	dc000017 	ldw	r16,0(sp)
 40047a0:	dec00504 	addi	sp,sp,20
 40047a4:	f800283a 	ret
 40047a8:	2c800417 	ldw	r18,16(r5)
 40047ac:	903ff626 	beq	r18,zero,4004788 <__ram_exceptions_end+0xfac005fc>
 40047b0:	2c000017 	ldw	r16,0(r5)
 40047b4:	108000cc 	andi	r2,r2,3
 40047b8:	2c800015 	stw	r18,0(r5)
 40047bc:	84a1c83a 	sub	r16,r16,r18
 40047c0:	1000131e 	bne	r2,zero,4004810 <__sflush_r+0x158>
 40047c4:	28800517 	ldw	r2,20(r5)
 40047c8:	88800215 	stw	r2,8(r17)
 40047cc:	04000316 	blt	zero,r16,40047dc <__sflush_r+0x124>
 40047d0:	003fed06 	br	4004788 <__ram_exceptions_end+0xfac005fc>
 40047d4:	90a5883a 	add	r18,r18,r2
 40047d8:	043feb0e 	bge	zero,r16,4004788 <__ram_exceptions_end+0xfac005fc>
 40047dc:	88800917 	ldw	r2,36(r17)
 40047e0:	89400717 	ldw	r5,28(r17)
 40047e4:	800f883a 	mov	r7,r16
 40047e8:	900d883a 	mov	r6,r18
 40047ec:	9809883a 	mov	r4,r19
 40047f0:	103ee83a 	callr	r2
 40047f4:	80a1c83a 	sub	r16,r16,r2
 40047f8:	00bff616 	blt	zero,r2,40047d4 <__ram_exceptions_end+0xfac00648>
 40047fc:	88c0030b 	ldhu	r3,12(r17)
 4004800:	00bfffc4 	movi	r2,-1
 4004804:	18c01014 	ori	r3,r3,64
 4004808:	88c0030d 	sth	r3,12(r17)
 400480c:	003fdf06 	br	400478c <__ram_exceptions_end+0xfac00600>
 4004810:	0005883a 	mov	r2,zero
 4004814:	003fec06 	br	40047c8 <__ram_exceptions_end+0xfac0063c>
 4004818:	88801415 	stw	r2,80(r17)
 400481c:	003fd206 	br	4004768 <__ram_exceptions_end+0xfac005dc>
 4004820:	28c00f17 	ldw	r3,60(r5)
 4004824:	00ffb316 	blt	zero,r3,40046f4 <__ram_exceptions_end+0xfac00568>
 4004828:	003fd706 	br	4004788 <__ram_exceptions_end+0xfac005fc>
 400482c:	89400717 	ldw	r5,28(r17)
 4004830:	000d883a 	mov	r6,zero
 4004834:	01c00044 	movi	r7,1
 4004838:	9809883a 	mov	r4,r19
 400483c:	403ee83a 	callr	r8
 4004840:	100d883a 	mov	r6,r2
 4004844:	00bfffc4 	movi	r2,-1
 4004848:	30801426 	beq	r6,r2,400489c <__sflush_r+0x1e4>
 400484c:	8880030b 	ldhu	r2,12(r17)
 4004850:	8a000a17 	ldw	r8,40(r17)
 4004854:	003fae06 	br	4004710 <__ram_exceptions_end+0xfac00584>
 4004858:	98c00017 	ldw	r3,0(r19)
 400485c:	183fba26 	beq	r3,zero,4004748 <__ram_exceptions_end+0xfac005bc>
 4004860:	01000744 	movi	r4,29
 4004864:	19000626 	beq	r3,r4,4004880 <__sflush_r+0x1c8>
 4004868:	01000584 	movi	r4,22
 400486c:	19000426 	beq	r3,r4,4004880 <__sflush_r+0x1c8>
 4004870:	88c0030b 	ldhu	r3,12(r17)
 4004874:	18c01014 	ori	r3,r3,64
 4004878:	88c0030d 	sth	r3,12(r17)
 400487c:	003fc306 	br	400478c <__ram_exceptions_end+0xfac00600>
 4004880:	8880030b 	ldhu	r2,12(r17)
 4004884:	88c00417 	ldw	r3,16(r17)
 4004888:	88000115 	stw	zero,4(r17)
 400488c:	10bdffcc 	andi	r2,r2,63487
 4004890:	8880030d 	sth	r2,12(r17)
 4004894:	88c00015 	stw	r3,0(r17)
 4004898:	003fb306 	br	4004768 <__ram_exceptions_end+0xfac005dc>
 400489c:	98800017 	ldw	r2,0(r19)
 40048a0:	103fea26 	beq	r2,zero,400484c <__ram_exceptions_end+0xfac006c0>
 40048a4:	00c00744 	movi	r3,29
 40048a8:	10c00226 	beq	r2,r3,40048b4 <__sflush_r+0x1fc>
 40048ac:	00c00584 	movi	r3,22
 40048b0:	10c0031e 	bne	r2,r3,40048c0 <__sflush_r+0x208>
 40048b4:	9c000015 	stw	r16,0(r19)
 40048b8:	0005883a 	mov	r2,zero
 40048bc:	003fb306 	br	400478c <__ram_exceptions_end+0xfac00600>
 40048c0:	88c0030b 	ldhu	r3,12(r17)
 40048c4:	3005883a 	mov	r2,r6
 40048c8:	18c01014 	ori	r3,r3,64
 40048cc:	88c0030d 	sth	r3,12(r17)
 40048d0:	003fae06 	br	400478c <__ram_exceptions_end+0xfac00600>

040048d4 <_fflush_r>:
 40048d4:	defffd04 	addi	sp,sp,-12
 40048d8:	dc000115 	stw	r16,4(sp)
 40048dc:	dfc00215 	stw	ra,8(sp)
 40048e0:	2021883a 	mov	r16,r4
 40048e4:	20000226 	beq	r4,zero,40048f0 <_fflush_r+0x1c>
 40048e8:	20800e17 	ldw	r2,56(r4)
 40048ec:	10000c26 	beq	r2,zero,4004920 <_fflush_r+0x4c>
 40048f0:	2880030f 	ldh	r2,12(r5)
 40048f4:	1000051e 	bne	r2,zero,400490c <_fflush_r+0x38>
 40048f8:	0005883a 	mov	r2,zero
 40048fc:	dfc00217 	ldw	ra,8(sp)
 4004900:	dc000117 	ldw	r16,4(sp)
 4004904:	dec00304 	addi	sp,sp,12
 4004908:	f800283a 	ret
 400490c:	8009883a 	mov	r4,r16
 4004910:	dfc00217 	ldw	ra,8(sp)
 4004914:	dc000117 	ldw	r16,4(sp)
 4004918:	dec00304 	addi	sp,sp,12
 400491c:	40046b81 	jmpi	40046b8 <__sflush_r>
 4004920:	d9400015 	stw	r5,0(sp)
 4004924:	4004cb00 	call	4004cb0 <__sinit>
 4004928:	d9400017 	ldw	r5,0(sp)
 400492c:	003ff006 	br	40048f0 <__ram_exceptions_end+0xfac00764>

04004930 <fflush>:
 4004930:	20000526 	beq	r4,zero,4004948 <fflush+0x18>
 4004934:	00810074 	movhi	r2,1025
 4004938:	10826504 	addi	r2,r2,2452
 400493c:	200b883a 	mov	r5,r4
 4004940:	11000017 	ldw	r4,0(r2)
 4004944:	40048d41 	jmpi	40048d4 <_fflush_r>
 4004948:	00810074 	movhi	r2,1025
 400494c:	10826404 	addi	r2,r2,2448
 4004950:	11000017 	ldw	r4,0(r2)
 4004954:	01410034 	movhi	r5,1024
 4004958:	29523504 	addi	r5,r5,18644
 400495c:	40051f81 	jmpi	40051f8 <_fwalk_reent>

04004960 <__fp_unlock>:
 4004960:	0005883a 	mov	r2,zero
 4004964:	f800283a 	ret

04004968 <_cleanup_r>:
 4004968:	01410074 	movhi	r5,1025
 400496c:	2962fa04 	addi	r5,r5,-29720
 4004970:	40051f81 	jmpi	40051f8 <_fwalk_reent>

04004974 <__sinit.part.1>:
 4004974:	defff704 	addi	sp,sp,-36
 4004978:	00c10034 	movhi	r3,1024
 400497c:	dfc00815 	stw	ra,32(sp)
 4004980:	ddc00715 	stw	r23,28(sp)
 4004984:	dd800615 	stw	r22,24(sp)
 4004988:	dd400515 	stw	r21,20(sp)
 400498c:	dd000415 	stw	r20,16(sp)
 4004990:	dcc00315 	stw	r19,12(sp)
 4004994:	dc800215 	stw	r18,8(sp)
 4004998:	dc400115 	stw	r17,4(sp)
 400499c:	dc000015 	stw	r16,0(sp)
 40049a0:	18d25a04 	addi	r3,r3,18792
 40049a4:	24000117 	ldw	r16,4(r4)
 40049a8:	20c00f15 	stw	r3,60(r4)
 40049ac:	2080bb04 	addi	r2,r4,748
 40049b0:	00c000c4 	movi	r3,3
 40049b4:	20c0b915 	stw	r3,740(r4)
 40049b8:	2080ba15 	stw	r2,744(r4)
 40049bc:	2000b815 	stw	zero,736(r4)
 40049c0:	05c00204 	movi	r23,8
 40049c4:	00800104 	movi	r2,4
 40049c8:	2025883a 	mov	r18,r4
 40049cc:	b80d883a 	mov	r6,r23
 40049d0:	81001704 	addi	r4,r16,92
 40049d4:	000b883a 	mov	r5,zero
 40049d8:	80000015 	stw	zero,0(r16)
 40049dc:	80000115 	stw	zero,4(r16)
 40049e0:	80000215 	stw	zero,8(r16)
 40049e4:	8080030d 	sth	r2,12(r16)
 40049e8:	80001915 	stw	zero,100(r16)
 40049ec:	8000038d 	sth	zero,14(r16)
 40049f0:	80000415 	stw	zero,16(r16)
 40049f4:	80000515 	stw	zero,20(r16)
 40049f8:	80000615 	stw	zero,24(r16)
 40049fc:	4005f8c0 	call	4005f8c <memset>
 4004a00:	05810034 	movhi	r22,1024
 4004a04:	94400217 	ldw	r17,8(r18)
 4004a08:	05410034 	movhi	r21,1024
 4004a0c:	05010034 	movhi	r20,1024
 4004a10:	04c10034 	movhi	r19,1024
 4004a14:	b59c5e04 	addi	r22,r22,29048
 4004a18:	ad5c7504 	addi	r21,r21,29140
 4004a1c:	a51c9404 	addi	r20,r20,29264
 4004a20:	9cdcab04 	addi	r19,r19,29356
 4004a24:	85800815 	stw	r22,32(r16)
 4004a28:	85400915 	stw	r21,36(r16)
 4004a2c:	85000a15 	stw	r20,40(r16)
 4004a30:	84c00b15 	stw	r19,44(r16)
 4004a34:	84000715 	stw	r16,28(r16)
 4004a38:	00800284 	movi	r2,10
 4004a3c:	8880030d 	sth	r2,12(r17)
 4004a40:	00800044 	movi	r2,1
 4004a44:	b80d883a 	mov	r6,r23
 4004a48:	89001704 	addi	r4,r17,92
 4004a4c:	000b883a 	mov	r5,zero
 4004a50:	88000015 	stw	zero,0(r17)
 4004a54:	88000115 	stw	zero,4(r17)
 4004a58:	88000215 	stw	zero,8(r17)
 4004a5c:	88001915 	stw	zero,100(r17)
 4004a60:	8880038d 	sth	r2,14(r17)
 4004a64:	88000415 	stw	zero,16(r17)
 4004a68:	88000515 	stw	zero,20(r17)
 4004a6c:	88000615 	stw	zero,24(r17)
 4004a70:	4005f8c0 	call	4005f8c <memset>
 4004a74:	94000317 	ldw	r16,12(r18)
 4004a78:	00800484 	movi	r2,18
 4004a7c:	8c400715 	stw	r17,28(r17)
 4004a80:	8d800815 	stw	r22,32(r17)
 4004a84:	8d400915 	stw	r21,36(r17)
 4004a88:	8d000a15 	stw	r20,40(r17)
 4004a8c:	8cc00b15 	stw	r19,44(r17)
 4004a90:	8080030d 	sth	r2,12(r16)
 4004a94:	00800084 	movi	r2,2
 4004a98:	80000015 	stw	zero,0(r16)
 4004a9c:	80000115 	stw	zero,4(r16)
 4004aa0:	80000215 	stw	zero,8(r16)
 4004aa4:	80001915 	stw	zero,100(r16)
 4004aa8:	8080038d 	sth	r2,14(r16)
 4004aac:	80000415 	stw	zero,16(r16)
 4004ab0:	80000515 	stw	zero,20(r16)
 4004ab4:	80000615 	stw	zero,24(r16)
 4004ab8:	b80d883a 	mov	r6,r23
 4004abc:	000b883a 	mov	r5,zero
 4004ac0:	81001704 	addi	r4,r16,92
 4004ac4:	4005f8c0 	call	4005f8c <memset>
 4004ac8:	00800044 	movi	r2,1
 4004acc:	84000715 	stw	r16,28(r16)
 4004ad0:	85800815 	stw	r22,32(r16)
 4004ad4:	85400915 	stw	r21,36(r16)
 4004ad8:	85000a15 	stw	r20,40(r16)
 4004adc:	84c00b15 	stw	r19,44(r16)
 4004ae0:	90800e15 	stw	r2,56(r18)
 4004ae4:	dfc00817 	ldw	ra,32(sp)
 4004ae8:	ddc00717 	ldw	r23,28(sp)
 4004aec:	dd800617 	ldw	r22,24(sp)
 4004af0:	dd400517 	ldw	r21,20(sp)
 4004af4:	dd000417 	ldw	r20,16(sp)
 4004af8:	dcc00317 	ldw	r19,12(sp)
 4004afc:	dc800217 	ldw	r18,8(sp)
 4004b00:	dc400117 	ldw	r17,4(sp)
 4004b04:	dc000017 	ldw	r16,0(sp)
 4004b08:	dec00904 	addi	sp,sp,36
 4004b0c:	f800283a 	ret

04004b10 <__fp_lock>:
 4004b10:	0005883a 	mov	r2,zero
 4004b14:	f800283a 	ret

04004b18 <__sfmoreglue>:
 4004b18:	defffc04 	addi	sp,sp,-16
 4004b1c:	dc400115 	stw	r17,4(sp)
 4004b20:	2c7fffc4 	addi	r17,r5,-1
 4004b24:	8c401a24 	muli	r17,r17,104
 4004b28:	dc800215 	stw	r18,8(sp)
 4004b2c:	2825883a 	mov	r18,r5
 4004b30:	89401d04 	addi	r5,r17,116
 4004b34:	dc000015 	stw	r16,0(sp)
 4004b38:	dfc00315 	stw	ra,12(sp)
 4004b3c:	40055540 	call	4005554 <_malloc_r>
 4004b40:	1021883a 	mov	r16,r2
 4004b44:	10000726 	beq	r2,zero,4004b64 <__sfmoreglue+0x4c>
 4004b48:	11000304 	addi	r4,r2,12
 4004b4c:	10000015 	stw	zero,0(r2)
 4004b50:	14800115 	stw	r18,4(r2)
 4004b54:	11000215 	stw	r4,8(r2)
 4004b58:	89801a04 	addi	r6,r17,104
 4004b5c:	000b883a 	mov	r5,zero
 4004b60:	4005f8c0 	call	4005f8c <memset>
 4004b64:	8005883a 	mov	r2,r16
 4004b68:	dfc00317 	ldw	ra,12(sp)
 4004b6c:	dc800217 	ldw	r18,8(sp)
 4004b70:	dc400117 	ldw	r17,4(sp)
 4004b74:	dc000017 	ldw	r16,0(sp)
 4004b78:	dec00404 	addi	sp,sp,16
 4004b7c:	f800283a 	ret

04004b80 <__sfp>:
 4004b80:	defffb04 	addi	sp,sp,-20
 4004b84:	dc000015 	stw	r16,0(sp)
 4004b88:	04010074 	movhi	r16,1025
 4004b8c:	84026404 	addi	r16,r16,2448
 4004b90:	dcc00315 	stw	r19,12(sp)
 4004b94:	2027883a 	mov	r19,r4
 4004b98:	81000017 	ldw	r4,0(r16)
 4004b9c:	dfc00415 	stw	ra,16(sp)
 4004ba0:	dc800215 	stw	r18,8(sp)
 4004ba4:	20800e17 	ldw	r2,56(r4)
 4004ba8:	dc400115 	stw	r17,4(sp)
 4004bac:	1000021e 	bne	r2,zero,4004bb8 <__sfp+0x38>
 4004bb0:	40049740 	call	4004974 <__sinit.part.1>
 4004bb4:	81000017 	ldw	r4,0(r16)
 4004bb8:	2480b804 	addi	r18,r4,736
 4004bbc:	047fffc4 	movi	r17,-1
 4004bc0:	91000117 	ldw	r4,4(r18)
 4004bc4:	94000217 	ldw	r16,8(r18)
 4004bc8:	213fffc4 	addi	r4,r4,-1
 4004bcc:	20000a16 	blt	r4,zero,4004bf8 <__sfp+0x78>
 4004bd0:	8080030f 	ldh	r2,12(r16)
 4004bd4:	10000c26 	beq	r2,zero,4004c08 <__sfp+0x88>
 4004bd8:	80c01d04 	addi	r3,r16,116
 4004bdc:	00000206 	br	4004be8 <__sfp+0x68>
 4004be0:	18bfe60f 	ldh	r2,-104(r3)
 4004be4:	10000826 	beq	r2,zero,4004c08 <__sfp+0x88>
 4004be8:	213fffc4 	addi	r4,r4,-1
 4004bec:	1c3ffd04 	addi	r16,r3,-12
 4004bf0:	18c01a04 	addi	r3,r3,104
 4004bf4:	247ffa1e 	bne	r4,r17,4004be0 <__ram_exceptions_end+0xfac00a54>
 4004bf8:	90800017 	ldw	r2,0(r18)
 4004bfc:	10001d26 	beq	r2,zero,4004c74 <__sfp+0xf4>
 4004c00:	1025883a 	mov	r18,r2
 4004c04:	003fee06 	br	4004bc0 <__ram_exceptions_end+0xfac00a34>
 4004c08:	00bfffc4 	movi	r2,-1
 4004c0c:	8080038d 	sth	r2,14(r16)
 4004c10:	00800044 	movi	r2,1
 4004c14:	8080030d 	sth	r2,12(r16)
 4004c18:	80001915 	stw	zero,100(r16)
 4004c1c:	80000015 	stw	zero,0(r16)
 4004c20:	80000215 	stw	zero,8(r16)
 4004c24:	80000115 	stw	zero,4(r16)
 4004c28:	80000415 	stw	zero,16(r16)
 4004c2c:	80000515 	stw	zero,20(r16)
 4004c30:	80000615 	stw	zero,24(r16)
 4004c34:	01800204 	movi	r6,8
 4004c38:	000b883a 	mov	r5,zero
 4004c3c:	81001704 	addi	r4,r16,92
 4004c40:	4005f8c0 	call	4005f8c <memset>
 4004c44:	8005883a 	mov	r2,r16
 4004c48:	80000c15 	stw	zero,48(r16)
 4004c4c:	80000d15 	stw	zero,52(r16)
 4004c50:	80001115 	stw	zero,68(r16)
 4004c54:	80001215 	stw	zero,72(r16)
 4004c58:	dfc00417 	ldw	ra,16(sp)
 4004c5c:	dcc00317 	ldw	r19,12(sp)
 4004c60:	dc800217 	ldw	r18,8(sp)
 4004c64:	dc400117 	ldw	r17,4(sp)
 4004c68:	dc000017 	ldw	r16,0(sp)
 4004c6c:	dec00504 	addi	sp,sp,20
 4004c70:	f800283a 	ret
 4004c74:	01400104 	movi	r5,4
 4004c78:	9809883a 	mov	r4,r19
 4004c7c:	4004b180 	call	4004b18 <__sfmoreglue>
 4004c80:	90800015 	stw	r2,0(r18)
 4004c84:	103fde1e 	bne	r2,zero,4004c00 <__ram_exceptions_end+0xfac00a74>
 4004c88:	00800304 	movi	r2,12
 4004c8c:	98800015 	stw	r2,0(r19)
 4004c90:	0005883a 	mov	r2,zero
 4004c94:	003ff006 	br	4004c58 <__ram_exceptions_end+0xfac00acc>

04004c98 <_cleanup>:
 4004c98:	00810074 	movhi	r2,1025
 4004c9c:	10826404 	addi	r2,r2,2448
 4004ca0:	11000017 	ldw	r4,0(r2)
 4004ca4:	01410074 	movhi	r5,1025
 4004ca8:	2962fa04 	addi	r5,r5,-29720
 4004cac:	40051f81 	jmpi	40051f8 <_fwalk_reent>

04004cb0 <__sinit>:
 4004cb0:	20800e17 	ldw	r2,56(r4)
 4004cb4:	10000126 	beq	r2,zero,4004cbc <__sinit+0xc>
 4004cb8:	f800283a 	ret
 4004cbc:	40049741 	jmpi	4004974 <__sinit.part.1>

04004cc0 <__sfp_lock_acquire>:
 4004cc0:	f800283a 	ret

04004cc4 <__sfp_lock_release>:
 4004cc4:	f800283a 	ret

04004cc8 <__sinit_lock_acquire>:
 4004cc8:	f800283a 	ret

04004ccc <__sinit_lock_release>:
 4004ccc:	f800283a 	ret

04004cd0 <__fp_lock_all>:
 4004cd0:	00810074 	movhi	r2,1025
 4004cd4:	10826504 	addi	r2,r2,2452
 4004cd8:	11000017 	ldw	r4,0(r2)
 4004cdc:	01410034 	movhi	r5,1024
 4004ce0:	2952c404 	addi	r5,r5,19216
 4004ce4:	40051341 	jmpi	4005134 <_fwalk>

04004ce8 <__fp_unlock_all>:
 4004ce8:	00810074 	movhi	r2,1025
 4004cec:	10826504 	addi	r2,r2,2452
 4004cf0:	11000017 	ldw	r4,0(r2)
 4004cf4:	01410034 	movhi	r5,1024
 4004cf8:	29525804 	addi	r5,r5,18784
 4004cfc:	40051341 	jmpi	4005134 <_fwalk>

04004d00 <_malloc_trim_r>:
 4004d00:	defffb04 	addi	sp,sp,-20
 4004d04:	dcc00315 	stw	r19,12(sp)
 4004d08:	04c10074 	movhi	r19,1025
 4004d0c:	dc800215 	stw	r18,8(sp)
 4004d10:	dc400115 	stw	r17,4(sp)
 4004d14:	dc000015 	stw	r16,0(sp)
 4004d18:	dfc00415 	stw	ra,16(sp)
 4004d1c:	2821883a 	mov	r16,r5
 4004d20:	9cc09204 	addi	r19,r19,584
 4004d24:	2025883a 	mov	r18,r4
 4004d28:	400d4640 	call	400d464 <__malloc_lock>
 4004d2c:	98800217 	ldw	r2,8(r19)
 4004d30:	14400117 	ldw	r17,4(r2)
 4004d34:	00bfff04 	movi	r2,-4
 4004d38:	88a2703a 	and	r17,r17,r2
 4004d3c:	8c21c83a 	sub	r16,r17,r16
 4004d40:	8403fbc4 	addi	r16,r16,4079
 4004d44:	8020d33a 	srli	r16,r16,12
 4004d48:	0083ffc4 	movi	r2,4095
 4004d4c:	843fffc4 	addi	r16,r16,-1
 4004d50:	8020933a 	slli	r16,r16,12
 4004d54:	1400060e 	bge	r2,r16,4004d70 <_malloc_trim_r+0x70>
 4004d58:	000b883a 	mov	r5,zero
 4004d5c:	9009883a 	mov	r4,r18
 4004d60:	40071240 	call	4007124 <_sbrk_r>
 4004d64:	98c00217 	ldw	r3,8(r19)
 4004d68:	1c47883a 	add	r3,r3,r17
 4004d6c:	10c00a26 	beq	r2,r3,4004d98 <_malloc_trim_r+0x98>
 4004d70:	9009883a 	mov	r4,r18
 4004d74:	400d4680 	call	400d468 <__malloc_unlock>
 4004d78:	0005883a 	mov	r2,zero
 4004d7c:	dfc00417 	ldw	ra,16(sp)
 4004d80:	dcc00317 	ldw	r19,12(sp)
 4004d84:	dc800217 	ldw	r18,8(sp)
 4004d88:	dc400117 	ldw	r17,4(sp)
 4004d8c:	dc000017 	ldw	r16,0(sp)
 4004d90:	dec00504 	addi	sp,sp,20
 4004d94:	f800283a 	ret
 4004d98:	040bc83a 	sub	r5,zero,r16
 4004d9c:	9009883a 	mov	r4,r18
 4004da0:	40071240 	call	4007124 <_sbrk_r>
 4004da4:	00ffffc4 	movi	r3,-1
 4004da8:	10c00d26 	beq	r2,r3,4004de0 <_malloc_trim_r+0xe0>
 4004dac:	00c10074 	movhi	r3,1025
 4004db0:	18c5a404 	addi	r3,r3,5776
 4004db4:	18800017 	ldw	r2,0(r3)
 4004db8:	99000217 	ldw	r4,8(r19)
 4004dbc:	8c23c83a 	sub	r17,r17,r16
 4004dc0:	8c400054 	ori	r17,r17,1
 4004dc4:	1421c83a 	sub	r16,r2,r16
 4004dc8:	24400115 	stw	r17,4(r4)
 4004dcc:	9009883a 	mov	r4,r18
 4004dd0:	1c000015 	stw	r16,0(r3)
 4004dd4:	400d4680 	call	400d468 <__malloc_unlock>
 4004dd8:	00800044 	movi	r2,1
 4004ddc:	003fe706 	br	4004d7c <__ram_exceptions_end+0xfac00bf0>
 4004de0:	000b883a 	mov	r5,zero
 4004de4:	9009883a 	mov	r4,r18
 4004de8:	40071240 	call	4007124 <_sbrk_r>
 4004dec:	99000217 	ldw	r4,8(r19)
 4004df0:	014003c4 	movi	r5,15
 4004df4:	1107c83a 	sub	r3,r2,r4
 4004df8:	28ffdd0e 	bge	r5,r3,4004d70 <__ram_exceptions_end+0xfac00be4>
 4004dfc:	01410074 	movhi	r5,1025
 4004e00:	29426704 	addi	r5,r5,2460
 4004e04:	29400017 	ldw	r5,0(r5)
 4004e08:	18c00054 	ori	r3,r3,1
 4004e0c:	20c00115 	stw	r3,4(r4)
 4004e10:	00c10074 	movhi	r3,1025
 4004e14:	1145c83a 	sub	r2,r2,r5
 4004e18:	18c5a404 	addi	r3,r3,5776
 4004e1c:	18800015 	stw	r2,0(r3)
 4004e20:	003fd306 	br	4004d70 <__ram_exceptions_end+0xfac00be4>

04004e24 <_free_r>:
 4004e24:	28004126 	beq	r5,zero,4004f2c <_free_r+0x108>
 4004e28:	defffd04 	addi	sp,sp,-12
 4004e2c:	dc400115 	stw	r17,4(sp)
 4004e30:	dc000015 	stw	r16,0(sp)
 4004e34:	2023883a 	mov	r17,r4
 4004e38:	2821883a 	mov	r16,r5
 4004e3c:	dfc00215 	stw	ra,8(sp)
 4004e40:	400d4640 	call	400d464 <__malloc_lock>
 4004e44:	81ffff17 	ldw	r7,-4(r16)
 4004e48:	00bfff84 	movi	r2,-2
 4004e4c:	01010074 	movhi	r4,1025
 4004e50:	81bffe04 	addi	r6,r16,-8
 4004e54:	3884703a 	and	r2,r7,r2
 4004e58:	21009204 	addi	r4,r4,584
 4004e5c:	308b883a 	add	r5,r6,r2
 4004e60:	2a400117 	ldw	r9,4(r5)
 4004e64:	22000217 	ldw	r8,8(r4)
 4004e68:	00ffff04 	movi	r3,-4
 4004e6c:	48c6703a 	and	r3,r9,r3
 4004e70:	2a005726 	beq	r5,r8,4004fd0 <_free_r+0x1ac>
 4004e74:	28c00115 	stw	r3,4(r5)
 4004e78:	39c0004c 	andi	r7,r7,1
 4004e7c:	3800091e 	bne	r7,zero,4004ea4 <_free_r+0x80>
 4004e80:	823ffe17 	ldw	r8,-8(r16)
 4004e84:	22400204 	addi	r9,r4,8
 4004e88:	320dc83a 	sub	r6,r6,r8
 4004e8c:	31c00217 	ldw	r7,8(r6)
 4004e90:	1205883a 	add	r2,r2,r8
 4004e94:	3a406526 	beq	r7,r9,400502c <_free_r+0x208>
 4004e98:	32000317 	ldw	r8,12(r6)
 4004e9c:	3a000315 	stw	r8,12(r7)
 4004ea0:	41c00215 	stw	r7,8(r8)
 4004ea4:	28cf883a 	add	r7,r5,r3
 4004ea8:	39c00117 	ldw	r7,4(r7)
 4004eac:	39c0004c 	andi	r7,r7,1
 4004eb0:	38003a26 	beq	r7,zero,4004f9c <_free_r+0x178>
 4004eb4:	10c00054 	ori	r3,r2,1
 4004eb8:	30c00115 	stw	r3,4(r6)
 4004ebc:	3087883a 	add	r3,r6,r2
 4004ec0:	18800015 	stw	r2,0(r3)
 4004ec4:	00c07fc4 	movi	r3,511
 4004ec8:	18801936 	bltu	r3,r2,4004f30 <_free_r+0x10c>
 4004ecc:	1004d0fa 	srli	r2,r2,3
 4004ed0:	01c00044 	movi	r7,1
 4004ed4:	21400117 	ldw	r5,4(r4)
 4004ed8:	10c00044 	addi	r3,r2,1
 4004edc:	18c7883a 	add	r3,r3,r3
 4004ee0:	1005d0ba 	srai	r2,r2,2
 4004ee4:	18c7883a 	add	r3,r3,r3
 4004ee8:	18c7883a 	add	r3,r3,r3
 4004eec:	1907883a 	add	r3,r3,r4
 4004ef0:	3884983a 	sll	r2,r7,r2
 4004ef4:	19c00017 	ldw	r7,0(r3)
 4004ef8:	1a3ffe04 	addi	r8,r3,-8
 4004efc:	1144b03a 	or	r2,r2,r5
 4004f00:	32000315 	stw	r8,12(r6)
 4004f04:	31c00215 	stw	r7,8(r6)
 4004f08:	20800115 	stw	r2,4(r4)
 4004f0c:	19800015 	stw	r6,0(r3)
 4004f10:	39800315 	stw	r6,12(r7)
 4004f14:	8809883a 	mov	r4,r17
 4004f18:	dfc00217 	ldw	ra,8(sp)
 4004f1c:	dc400117 	ldw	r17,4(sp)
 4004f20:	dc000017 	ldw	r16,0(sp)
 4004f24:	dec00304 	addi	sp,sp,12
 4004f28:	400d4681 	jmpi	400d468 <__malloc_unlock>
 4004f2c:	f800283a 	ret
 4004f30:	100ad27a 	srli	r5,r2,9
 4004f34:	00c00104 	movi	r3,4
 4004f38:	19404a36 	bltu	r3,r5,4005064 <_free_r+0x240>
 4004f3c:	100ad1ba 	srli	r5,r2,6
 4004f40:	28c00e44 	addi	r3,r5,57
 4004f44:	18c7883a 	add	r3,r3,r3
 4004f48:	29400e04 	addi	r5,r5,56
 4004f4c:	18c7883a 	add	r3,r3,r3
 4004f50:	18c7883a 	add	r3,r3,r3
 4004f54:	1909883a 	add	r4,r3,r4
 4004f58:	20c00017 	ldw	r3,0(r4)
 4004f5c:	01c10074 	movhi	r7,1025
 4004f60:	213ffe04 	addi	r4,r4,-8
 4004f64:	39c09204 	addi	r7,r7,584
 4004f68:	20c04426 	beq	r4,r3,400507c <_free_r+0x258>
 4004f6c:	01ffff04 	movi	r7,-4
 4004f70:	19400117 	ldw	r5,4(r3)
 4004f74:	29ca703a 	and	r5,r5,r7
 4004f78:	1140022e 	bgeu	r2,r5,4004f84 <_free_r+0x160>
 4004f7c:	18c00217 	ldw	r3,8(r3)
 4004f80:	20fffb1e 	bne	r4,r3,4004f70 <__ram_exceptions_end+0xfac00de4>
 4004f84:	19000317 	ldw	r4,12(r3)
 4004f88:	31000315 	stw	r4,12(r6)
 4004f8c:	30c00215 	stw	r3,8(r6)
 4004f90:	21800215 	stw	r6,8(r4)
 4004f94:	19800315 	stw	r6,12(r3)
 4004f98:	003fde06 	br	4004f14 <__ram_exceptions_end+0xfac00d88>
 4004f9c:	29c00217 	ldw	r7,8(r5)
 4004fa0:	10c5883a 	add	r2,r2,r3
 4004fa4:	00c10074 	movhi	r3,1025
 4004fa8:	18c09404 	addi	r3,r3,592
 4004fac:	38c03b26 	beq	r7,r3,400509c <_free_r+0x278>
 4004fb0:	2a000317 	ldw	r8,12(r5)
 4004fb4:	11400054 	ori	r5,r2,1
 4004fb8:	3087883a 	add	r3,r6,r2
 4004fbc:	3a000315 	stw	r8,12(r7)
 4004fc0:	41c00215 	stw	r7,8(r8)
 4004fc4:	31400115 	stw	r5,4(r6)
 4004fc8:	18800015 	stw	r2,0(r3)
 4004fcc:	003fbd06 	br	4004ec4 <__ram_exceptions_end+0xfac00d38>
 4004fd0:	39c0004c 	andi	r7,r7,1
 4004fd4:	10c5883a 	add	r2,r2,r3
 4004fd8:	3800071e 	bne	r7,zero,4004ff8 <_free_r+0x1d4>
 4004fdc:	81fffe17 	ldw	r7,-8(r16)
 4004fe0:	31cdc83a 	sub	r6,r6,r7
 4004fe4:	30c00317 	ldw	r3,12(r6)
 4004fe8:	31400217 	ldw	r5,8(r6)
 4004fec:	11c5883a 	add	r2,r2,r7
 4004ff0:	28c00315 	stw	r3,12(r5)
 4004ff4:	19400215 	stw	r5,8(r3)
 4004ff8:	10c00054 	ori	r3,r2,1
 4004ffc:	30c00115 	stw	r3,4(r6)
 4005000:	00c10074 	movhi	r3,1025
 4005004:	18c26804 	addi	r3,r3,2464
 4005008:	18c00017 	ldw	r3,0(r3)
 400500c:	21800215 	stw	r6,8(r4)
 4005010:	10ffc036 	bltu	r2,r3,4004f14 <__ram_exceptions_end+0xfac00d88>
 4005014:	00810074 	movhi	r2,1025
 4005018:	10859b04 	addi	r2,r2,5740
 400501c:	11400017 	ldw	r5,0(r2)
 4005020:	8809883a 	mov	r4,r17
 4005024:	4004d000 	call	4004d00 <_malloc_trim_r>
 4005028:	003fba06 	br	4004f14 <__ram_exceptions_end+0xfac00d88>
 400502c:	28c9883a 	add	r4,r5,r3
 4005030:	21000117 	ldw	r4,4(r4)
 4005034:	2100004c 	andi	r4,r4,1
 4005038:	2000391e 	bne	r4,zero,4005120 <_free_r+0x2fc>
 400503c:	29c00217 	ldw	r7,8(r5)
 4005040:	29000317 	ldw	r4,12(r5)
 4005044:	1885883a 	add	r2,r3,r2
 4005048:	10c00054 	ori	r3,r2,1
 400504c:	39000315 	stw	r4,12(r7)
 4005050:	21c00215 	stw	r7,8(r4)
 4005054:	30c00115 	stw	r3,4(r6)
 4005058:	308d883a 	add	r6,r6,r2
 400505c:	30800015 	stw	r2,0(r6)
 4005060:	003fac06 	br	4004f14 <__ram_exceptions_end+0xfac00d88>
 4005064:	00c00504 	movi	r3,20
 4005068:	19401536 	bltu	r3,r5,40050c0 <_free_r+0x29c>
 400506c:	28c01704 	addi	r3,r5,92
 4005070:	18c7883a 	add	r3,r3,r3
 4005074:	294016c4 	addi	r5,r5,91
 4005078:	003fb406 	br	4004f4c <__ram_exceptions_end+0xfac00dc0>
 400507c:	280bd0ba 	srai	r5,r5,2
 4005080:	00c00044 	movi	r3,1
 4005084:	38800117 	ldw	r2,4(r7)
 4005088:	194a983a 	sll	r5,r3,r5
 400508c:	2007883a 	mov	r3,r4
 4005090:	2884b03a 	or	r2,r5,r2
 4005094:	38800115 	stw	r2,4(r7)
 4005098:	003fbb06 	br	4004f88 <__ram_exceptions_end+0xfac00dfc>
 400509c:	21800515 	stw	r6,20(r4)
 40050a0:	21800415 	stw	r6,16(r4)
 40050a4:	10c00054 	ori	r3,r2,1
 40050a8:	31c00315 	stw	r7,12(r6)
 40050ac:	31c00215 	stw	r7,8(r6)
 40050b0:	30c00115 	stw	r3,4(r6)
 40050b4:	308d883a 	add	r6,r6,r2
 40050b8:	30800015 	stw	r2,0(r6)
 40050bc:	003f9506 	br	4004f14 <__ram_exceptions_end+0xfac00d88>
 40050c0:	00c01504 	movi	r3,84
 40050c4:	19400536 	bltu	r3,r5,40050dc <_free_r+0x2b8>
 40050c8:	100ad33a 	srli	r5,r2,12
 40050cc:	28c01bc4 	addi	r3,r5,111
 40050d0:	18c7883a 	add	r3,r3,r3
 40050d4:	29401b84 	addi	r5,r5,110
 40050d8:	003f9c06 	br	4004f4c <__ram_exceptions_end+0xfac00dc0>
 40050dc:	00c05504 	movi	r3,340
 40050e0:	19400536 	bltu	r3,r5,40050f8 <_free_r+0x2d4>
 40050e4:	100ad3fa 	srli	r5,r2,15
 40050e8:	28c01e04 	addi	r3,r5,120
 40050ec:	18c7883a 	add	r3,r3,r3
 40050f0:	29401dc4 	addi	r5,r5,119
 40050f4:	003f9506 	br	4004f4c <__ram_exceptions_end+0xfac00dc0>
 40050f8:	00c15504 	movi	r3,1364
 40050fc:	19400536 	bltu	r3,r5,4005114 <_free_r+0x2f0>
 4005100:	100ad4ba 	srli	r5,r2,18
 4005104:	28c01f44 	addi	r3,r5,125
 4005108:	18c7883a 	add	r3,r3,r3
 400510c:	29401f04 	addi	r5,r5,124
 4005110:	003f8e06 	br	4004f4c <__ram_exceptions_end+0xfac00dc0>
 4005114:	00c03f84 	movi	r3,254
 4005118:	01401f84 	movi	r5,126
 400511c:	003f8b06 	br	4004f4c <__ram_exceptions_end+0xfac00dc0>
 4005120:	10c00054 	ori	r3,r2,1
 4005124:	30c00115 	stw	r3,4(r6)
 4005128:	308d883a 	add	r6,r6,r2
 400512c:	30800015 	stw	r2,0(r6)
 4005130:	003f7806 	br	4004f14 <__ram_exceptions_end+0xfac00d88>

04005134 <_fwalk>:
 4005134:	defff704 	addi	sp,sp,-36
 4005138:	dd000415 	stw	r20,16(sp)
 400513c:	dfc00815 	stw	ra,32(sp)
 4005140:	ddc00715 	stw	r23,28(sp)
 4005144:	dd800615 	stw	r22,24(sp)
 4005148:	dd400515 	stw	r21,20(sp)
 400514c:	dcc00315 	stw	r19,12(sp)
 4005150:	dc800215 	stw	r18,8(sp)
 4005154:	dc400115 	stw	r17,4(sp)
 4005158:	dc000015 	stw	r16,0(sp)
 400515c:	2500b804 	addi	r20,r4,736
 4005160:	a0002326 	beq	r20,zero,40051f0 <_fwalk+0xbc>
 4005164:	282b883a 	mov	r21,r5
 4005168:	002f883a 	mov	r23,zero
 400516c:	05800044 	movi	r22,1
 4005170:	04ffffc4 	movi	r19,-1
 4005174:	a4400117 	ldw	r17,4(r20)
 4005178:	a4800217 	ldw	r18,8(r20)
 400517c:	8c7fffc4 	addi	r17,r17,-1
 4005180:	88000d16 	blt	r17,zero,40051b8 <_fwalk+0x84>
 4005184:	94000304 	addi	r16,r18,12
 4005188:	94800384 	addi	r18,r18,14
 400518c:	8080000b 	ldhu	r2,0(r16)
 4005190:	8c7fffc4 	addi	r17,r17,-1
 4005194:	813ffd04 	addi	r4,r16,-12
 4005198:	b080042e 	bgeu	r22,r2,40051ac <_fwalk+0x78>
 400519c:	9080000f 	ldh	r2,0(r18)
 40051a0:	14c00226 	beq	r2,r19,40051ac <_fwalk+0x78>
 40051a4:	a83ee83a 	callr	r21
 40051a8:	b8aeb03a 	or	r23,r23,r2
 40051ac:	84001a04 	addi	r16,r16,104
 40051b0:	94801a04 	addi	r18,r18,104
 40051b4:	8cfff51e 	bne	r17,r19,400518c <__ram_exceptions_end+0xfac01000>
 40051b8:	a5000017 	ldw	r20,0(r20)
 40051bc:	a03fed1e 	bne	r20,zero,4005174 <__ram_exceptions_end+0xfac00fe8>
 40051c0:	b805883a 	mov	r2,r23
 40051c4:	dfc00817 	ldw	ra,32(sp)
 40051c8:	ddc00717 	ldw	r23,28(sp)
 40051cc:	dd800617 	ldw	r22,24(sp)
 40051d0:	dd400517 	ldw	r21,20(sp)
 40051d4:	dd000417 	ldw	r20,16(sp)
 40051d8:	dcc00317 	ldw	r19,12(sp)
 40051dc:	dc800217 	ldw	r18,8(sp)
 40051e0:	dc400117 	ldw	r17,4(sp)
 40051e4:	dc000017 	ldw	r16,0(sp)
 40051e8:	dec00904 	addi	sp,sp,36
 40051ec:	f800283a 	ret
 40051f0:	002f883a 	mov	r23,zero
 40051f4:	003ff206 	br	40051c0 <__ram_exceptions_end+0xfac01034>

040051f8 <_fwalk_reent>:
 40051f8:	defff704 	addi	sp,sp,-36
 40051fc:	dd000415 	stw	r20,16(sp)
 4005200:	dfc00815 	stw	ra,32(sp)
 4005204:	ddc00715 	stw	r23,28(sp)
 4005208:	dd800615 	stw	r22,24(sp)
 400520c:	dd400515 	stw	r21,20(sp)
 4005210:	dcc00315 	stw	r19,12(sp)
 4005214:	dc800215 	stw	r18,8(sp)
 4005218:	dc400115 	stw	r17,4(sp)
 400521c:	dc000015 	stw	r16,0(sp)
 4005220:	2500b804 	addi	r20,r4,736
 4005224:	a0002326 	beq	r20,zero,40052b4 <_fwalk_reent+0xbc>
 4005228:	282b883a 	mov	r21,r5
 400522c:	2027883a 	mov	r19,r4
 4005230:	002f883a 	mov	r23,zero
 4005234:	05800044 	movi	r22,1
 4005238:	04bfffc4 	movi	r18,-1
 400523c:	a4400117 	ldw	r17,4(r20)
 4005240:	a4000217 	ldw	r16,8(r20)
 4005244:	8c7fffc4 	addi	r17,r17,-1
 4005248:	88000c16 	blt	r17,zero,400527c <_fwalk_reent+0x84>
 400524c:	84000304 	addi	r16,r16,12
 4005250:	8080000b 	ldhu	r2,0(r16)
 4005254:	8c7fffc4 	addi	r17,r17,-1
 4005258:	817ffd04 	addi	r5,r16,-12
 400525c:	b080052e 	bgeu	r22,r2,4005274 <_fwalk_reent+0x7c>
 4005260:	8080008f 	ldh	r2,2(r16)
 4005264:	9809883a 	mov	r4,r19
 4005268:	14800226 	beq	r2,r18,4005274 <_fwalk_reent+0x7c>
 400526c:	a83ee83a 	callr	r21
 4005270:	b8aeb03a 	or	r23,r23,r2
 4005274:	84001a04 	addi	r16,r16,104
 4005278:	8cbff51e 	bne	r17,r18,4005250 <__ram_exceptions_end+0xfac010c4>
 400527c:	a5000017 	ldw	r20,0(r20)
 4005280:	a03fee1e 	bne	r20,zero,400523c <__ram_exceptions_end+0xfac010b0>
 4005284:	b805883a 	mov	r2,r23
 4005288:	dfc00817 	ldw	ra,32(sp)
 400528c:	ddc00717 	ldw	r23,28(sp)
 4005290:	dd800617 	ldw	r22,24(sp)
 4005294:	dd400517 	ldw	r21,20(sp)
 4005298:	dd000417 	ldw	r20,16(sp)
 400529c:	dcc00317 	ldw	r19,12(sp)
 40052a0:	dc800217 	ldw	r18,8(sp)
 40052a4:	dc400117 	ldw	r17,4(sp)
 40052a8:	dc000017 	ldw	r16,0(sp)
 40052ac:	dec00904 	addi	sp,sp,36
 40052b0:	f800283a 	ret
 40052b4:	002f883a 	mov	r23,zero
 40052b8:	003ff206 	br	4005284 <__ram_exceptions_end+0xfac010f8>

040052bc <_setlocale_r>:
 40052bc:	30001b26 	beq	r6,zero,400532c <_setlocale_r+0x70>
 40052c0:	01410074 	movhi	r5,1025
 40052c4:	defffe04 	addi	sp,sp,-8
 40052c8:	297ec004 	addi	r5,r5,-1280
 40052cc:	3009883a 	mov	r4,r6
 40052d0:	dc000015 	stw	r16,0(sp)
 40052d4:	dfc00115 	stw	ra,4(sp)
 40052d8:	3021883a 	mov	r16,r6
 40052dc:	40072b40 	call	40072b4 <strcmp>
 40052e0:	1000061e 	bne	r2,zero,40052fc <_setlocale_r+0x40>
 40052e4:	00810074 	movhi	r2,1025
 40052e8:	10bebf04 	addi	r2,r2,-1284
 40052ec:	dfc00117 	ldw	ra,4(sp)
 40052f0:	dc000017 	ldw	r16,0(sp)
 40052f4:	dec00204 	addi	sp,sp,8
 40052f8:	f800283a 	ret
 40052fc:	01410074 	movhi	r5,1025
 4005300:	297ebf04 	addi	r5,r5,-1284
 4005304:	8009883a 	mov	r4,r16
 4005308:	40072b40 	call	40072b4 <strcmp>
 400530c:	103ff526 	beq	r2,zero,40052e4 <__ram_exceptions_end+0xfac01158>
 4005310:	01410074 	movhi	r5,1025
 4005314:	297de004 	addi	r5,r5,-2176
 4005318:	8009883a 	mov	r4,r16
 400531c:	40072b40 	call	40072b4 <strcmp>
 4005320:	103ff026 	beq	r2,zero,40052e4 <__ram_exceptions_end+0xfac01158>
 4005324:	0005883a 	mov	r2,zero
 4005328:	003ff006 	br	40052ec <__ram_exceptions_end+0xfac01160>
 400532c:	00810074 	movhi	r2,1025
 4005330:	10bebf04 	addi	r2,r2,-1284
 4005334:	f800283a 	ret

04005338 <__locale_charset>:
 4005338:	00810074 	movhi	r2,1025
 400533c:	10807c04 	addi	r2,r2,496
 4005340:	f800283a 	ret

04005344 <__locale_mb_cur_max>:
 4005344:	00810074 	movhi	r2,1025
 4005348:	10826604 	addi	r2,r2,2456
 400534c:	10800017 	ldw	r2,0(r2)
 4005350:	f800283a 	ret

04005354 <__locale_msgcharset>:
 4005354:	00810074 	movhi	r2,1025
 4005358:	10807404 	addi	r2,r2,464
 400535c:	f800283a 	ret

04005360 <__locale_cjk_lang>:
 4005360:	0005883a 	mov	r2,zero
 4005364:	f800283a 	ret

04005368 <_localeconv_r>:
 4005368:	00810074 	movhi	r2,1025
 400536c:	10808404 	addi	r2,r2,528
 4005370:	f800283a 	ret

04005374 <setlocale>:
 4005374:	00810074 	movhi	r2,1025
 4005378:	10826504 	addi	r2,r2,2452
 400537c:	280d883a 	mov	r6,r5
 4005380:	200b883a 	mov	r5,r4
 4005384:	11000017 	ldw	r4,0(r2)
 4005388:	40052bc1 	jmpi	40052bc <_setlocale_r>

0400538c <localeconv>:
 400538c:	00810074 	movhi	r2,1025
 4005390:	10808404 	addi	r2,r2,528
 4005394:	f800283a 	ret

04005398 <__smakebuf_r>:
 4005398:	2880030b 	ldhu	r2,12(r5)
 400539c:	10c0008c 	andi	r3,r2,2
 40053a0:	1800411e 	bne	r3,zero,40054a8 <__smakebuf_r+0x110>
 40053a4:	deffec04 	addi	sp,sp,-80
 40053a8:	dc000f15 	stw	r16,60(sp)
 40053ac:	2821883a 	mov	r16,r5
 40053b0:	2940038f 	ldh	r5,14(r5)
 40053b4:	dc401015 	stw	r17,64(sp)
 40053b8:	dfc01315 	stw	ra,76(sp)
 40053bc:	dcc01215 	stw	r19,72(sp)
 40053c0:	dc801115 	stw	r18,68(sp)
 40053c4:	2023883a 	mov	r17,r4
 40053c8:	28001c16 	blt	r5,zero,400543c <__smakebuf_r+0xa4>
 40053cc:	d80d883a 	mov	r6,sp
 40053d0:	4008ef40 	call	4008ef4 <_fstat_r>
 40053d4:	10001816 	blt	r2,zero,4005438 <__smakebuf_r+0xa0>
 40053d8:	d8800117 	ldw	r2,4(sp)
 40053dc:	00e00014 	movui	r3,32768
 40053e0:	10bc000c 	andi	r2,r2,61440
 40053e4:	14c80020 	cmpeqi	r19,r2,8192
 40053e8:	10c03726 	beq	r2,r3,40054c8 <__smakebuf_r+0x130>
 40053ec:	80c0030b 	ldhu	r3,12(r16)
 40053f0:	18c20014 	ori	r3,r3,2048
 40053f4:	80c0030d 	sth	r3,12(r16)
 40053f8:	00c80004 	movi	r3,8192
 40053fc:	10c0521e 	bne	r2,r3,4005548 <__smakebuf_r+0x1b0>
 4005400:	8140038f 	ldh	r5,14(r16)
 4005404:	8809883a 	mov	r4,r17
 4005408:	400940c0 	call	400940c <_isatty_r>
 400540c:	10004c26 	beq	r2,zero,4005540 <__smakebuf_r+0x1a8>
 4005410:	8080030b 	ldhu	r2,12(r16)
 4005414:	80c010c4 	addi	r3,r16,67
 4005418:	80c00015 	stw	r3,0(r16)
 400541c:	10800054 	ori	r2,r2,1
 4005420:	8080030d 	sth	r2,12(r16)
 4005424:	00800044 	movi	r2,1
 4005428:	80c00415 	stw	r3,16(r16)
 400542c:	80800515 	stw	r2,20(r16)
 4005430:	04810004 	movi	r18,1024
 4005434:	00000706 	br	4005454 <__smakebuf_r+0xbc>
 4005438:	8080030b 	ldhu	r2,12(r16)
 400543c:	10c0200c 	andi	r3,r2,128
 4005440:	18001f1e 	bne	r3,zero,40054c0 <__smakebuf_r+0x128>
 4005444:	04810004 	movi	r18,1024
 4005448:	10820014 	ori	r2,r2,2048
 400544c:	8080030d 	sth	r2,12(r16)
 4005450:	0027883a 	mov	r19,zero
 4005454:	900b883a 	mov	r5,r18
 4005458:	8809883a 	mov	r4,r17
 400545c:	40055540 	call	4005554 <_malloc_r>
 4005460:	10002c26 	beq	r2,zero,4005514 <__smakebuf_r+0x17c>
 4005464:	80c0030b 	ldhu	r3,12(r16)
 4005468:	01010034 	movhi	r4,1024
 400546c:	21125a04 	addi	r4,r4,18792
 4005470:	89000f15 	stw	r4,60(r17)
 4005474:	18c02014 	ori	r3,r3,128
 4005478:	80c0030d 	sth	r3,12(r16)
 400547c:	80800015 	stw	r2,0(r16)
 4005480:	80800415 	stw	r2,16(r16)
 4005484:	84800515 	stw	r18,20(r16)
 4005488:	98001a1e 	bne	r19,zero,40054f4 <__smakebuf_r+0x15c>
 400548c:	dfc01317 	ldw	ra,76(sp)
 4005490:	dcc01217 	ldw	r19,72(sp)
 4005494:	dc801117 	ldw	r18,68(sp)
 4005498:	dc401017 	ldw	r17,64(sp)
 400549c:	dc000f17 	ldw	r16,60(sp)
 40054a0:	dec01404 	addi	sp,sp,80
 40054a4:	f800283a 	ret
 40054a8:	288010c4 	addi	r2,r5,67
 40054ac:	28800015 	stw	r2,0(r5)
 40054b0:	28800415 	stw	r2,16(r5)
 40054b4:	00800044 	movi	r2,1
 40054b8:	28800515 	stw	r2,20(r5)
 40054bc:	f800283a 	ret
 40054c0:	04801004 	movi	r18,64
 40054c4:	003fe006 	br	4005448 <__ram_exceptions_end+0xfac012bc>
 40054c8:	81000a17 	ldw	r4,40(r16)
 40054cc:	00c10034 	movhi	r3,1024
 40054d0:	18dc9404 	addi	r3,r3,29264
 40054d4:	20ffc51e 	bne	r4,r3,40053ec <__ram_exceptions_end+0xfac01260>
 40054d8:	8080030b 	ldhu	r2,12(r16)
 40054dc:	04810004 	movi	r18,1024
 40054e0:	84801315 	stw	r18,76(r16)
 40054e4:	1484b03a 	or	r2,r2,r18
 40054e8:	8080030d 	sth	r2,12(r16)
 40054ec:	0027883a 	mov	r19,zero
 40054f0:	003fd806 	br	4005454 <__ram_exceptions_end+0xfac012c8>
 40054f4:	8140038f 	ldh	r5,14(r16)
 40054f8:	8809883a 	mov	r4,r17
 40054fc:	400940c0 	call	400940c <_isatty_r>
 4005500:	103fe226 	beq	r2,zero,400548c <__ram_exceptions_end+0xfac01300>
 4005504:	8080030b 	ldhu	r2,12(r16)
 4005508:	10800054 	ori	r2,r2,1
 400550c:	8080030d 	sth	r2,12(r16)
 4005510:	003fde06 	br	400548c <__ram_exceptions_end+0xfac01300>
 4005514:	8080030b 	ldhu	r2,12(r16)
 4005518:	10c0800c 	andi	r3,r2,512
 400551c:	183fdb1e 	bne	r3,zero,400548c <__ram_exceptions_end+0xfac01300>
 4005520:	10800094 	ori	r2,r2,2
 4005524:	80c010c4 	addi	r3,r16,67
 4005528:	8080030d 	sth	r2,12(r16)
 400552c:	00800044 	movi	r2,1
 4005530:	80c00015 	stw	r3,0(r16)
 4005534:	80c00415 	stw	r3,16(r16)
 4005538:	80800515 	stw	r2,20(r16)
 400553c:	003fd306 	br	400548c <__ram_exceptions_end+0xfac01300>
 4005540:	04810004 	movi	r18,1024
 4005544:	003fc306 	br	4005454 <__ram_exceptions_end+0xfac012c8>
 4005548:	0027883a 	mov	r19,zero
 400554c:	04810004 	movi	r18,1024
 4005550:	003fc006 	br	4005454 <__ram_exceptions_end+0xfac012c8>

04005554 <_malloc_r>:
 4005554:	defff504 	addi	sp,sp,-44
 4005558:	dc800315 	stw	r18,12(sp)
 400555c:	dfc00a15 	stw	ra,40(sp)
 4005560:	df000915 	stw	fp,36(sp)
 4005564:	ddc00815 	stw	r23,32(sp)
 4005568:	dd800715 	stw	r22,28(sp)
 400556c:	dd400615 	stw	r21,24(sp)
 4005570:	dd000515 	stw	r20,20(sp)
 4005574:	dcc00415 	stw	r19,16(sp)
 4005578:	dc400215 	stw	r17,8(sp)
 400557c:	dc000115 	stw	r16,4(sp)
 4005580:	288002c4 	addi	r2,r5,11
 4005584:	00c00584 	movi	r3,22
 4005588:	2025883a 	mov	r18,r4
 400558c:	18807f2e 	bgeu	r3,r2,400578c <_malloc_r+0x238>
 4005590:	047ffe04 	movi	r17,-8
 4005594:	1462703a 	and	r17,r2,r17
 4005598:	8800a316 	blt	r17,zero,4005828 <_malloc_r+0x2d4>
 400559c:	8940a236 	bltu	r17,r5,4005828 <_malloc_r+0x2d4>
 40055a0:	400d4640 	call	400d464 <__malloc_lock>
 40055a4:	00807dc4 	movi	r2,503
 40055a8:	1441e92e 	bgeu	r2,r17,4005d50 <_malloc_r+0x7fc>
 40055ac:	8804d27a 	srli	r2,r17,9
 40055b0:	1000a126 	beq	r2,zero,4005838 <_malloc_r+0x2e4>
 40055b4:	00c00104 	movi	r3,4
 40055b8:	18811e36 	bltu	r3,r2,4005a34 <_malloc_r+0x4e0>
 40055bc:	8804d1ba 	srli	r2,r17,6
 40055c0:	12000e44 	addi	r8,r2,57
 40055c4:	11c00e04 	addi	r7,r2,56
 40055c8:	4209883a 	add	r4,r8,r8
 40055cc:	04c10074 	movhi	r19,1025
 40055d0:	2109883a 	add	r4,r4,r4
 40055d4:	9cc09204 	addi	r19,r19,584
 40055d8:	2109883a 	add	r4,r4,r4
 40055dc:	9909883a 	add	r4,r19,r4
 40055e0:	24000117 	ldw	r16,4(r4)
 40055e4:	213ffe04 	addi	r4,r4,-8
 40055e8:	24009726 	beq	r4,r16,4005848 <_malloc_r+0x2f4>
 40055ec:	80800117 	ldw	r2,4(r16)
 40055f0:	01bfff04 	movi	r6,-4
 40055f4:	014003c4 	movi	r5,15
 40055f8:	1184703a 	and	r2,r2,r6
 40055fc:	1447c83a 	sub	r3,r2,r17
 4005600:	28c00716 	blt	r5,r3,4005620 <_malloc_r+0xcc>
 4005604:	1800920e 	bge	r3,zero,4005850 <_malloc_r+0x2fc>
 4005608:	84000317 	ldw	r16,12(r16)
 400560c:	24008e26 	beq	r4,r16,4005848 <_malloc_r+0x2f4>
 4005610:	80800117 	ldw	r2,4(r16)
 4005614:	1184703a 	and	r2,r2,r6
 4005618:	1447c83a 	sub	r3,r2,r17
 400561c:	28fff90e 	bge	r5,r3,4005604 <__ram_exceptions_end+0xfac01478>
 4005620:	3809883a 	mov	r4,r7
 4005624:	01810074 	movhi	r6,1025
 4005628:	9c000417 	ldw	r16,16(r19)
 400562c:	31809204 	addi	r6,r6,584
 4005630:	32000204 	addi	r8,r6,8
 4005634:	82013426 	beq	r16,r8,4005b08 <_malloc_r+0x5b4>
 4005638:	80c00117 	ldw	r3,4(r16)
 400563c:	00bfff04 	movi	r2,-4
 4005640:	188e703a 	and	r7,r3,r2
 4005644:	3c45c83a 	sub	r2,r7,r17
 4005648:	00c003c4 	movi	r3,15
 400564c:	18811f16 	blt	r3,r2,4005acc <_malloc_r+0x578>
 4005650:	32000515 	stw	r8,20(r6)
 4005654:	32000415 	stw	r8,16(r6)
 4005658:	10007f0e 	bge	r2,zero,4005858 <_malloc_r+0x304>
 400565c:	00807fc4 	movi	r2,511
 4005660:	11c0fd36 	bltu	r2,r7,4005a58 <_malloc_r+0x504>
 4005664:	3806d0fa 	srli	r3,r7,3
 4005668:	01c00044 	movi	r7,1
 400566c:	30800117 	ldw	r2,4(r6)
 4005670:	19400044 	addi	r5,r3,1
 4005674:	294b883a 	add	r5,r5,r5
 4005678:	1807d0ba 	srai	r3,r3,2
 400567c:	294b883a 	add	r5,r5,r5
 4005680:	294b883a 	add	r5,r5,r5
 4005684:	298b883a 	add	r5,r5,r6
 4005688:	38c6983a 	sll	r3,r7,r3
 400568c:	29c00017 	ldw	r7,0(r5)
 4005690:	2a7ffe04 	addi	r9,r5,-8
 4005694:	1886b03a 	or	r3,r3,r2
 4005698:	82400315 	stw	r9,12(r16)
 400569c:	81c00215 	stw	r7,8(r16)
 40056a0:	30c00115 	stw	r3,4(r6)
 40056a4:	2c000015 	stw	r16,0(r5)
 40056a8:	3c000315 	stw	r16,12(r7)
 40056ac:	2005d0ba 	srai	r2,r4,2
 40056b0:	01400044 	movi	r5,1
 40056b4:	288a983a 	sll	r5,r5,r2
 40056b8:	19406f36 	bltu	r3,r5,4005878 <_malloc_r+0x324>
 40056bc:	28c4703a 	and	r2,r5,r3
 40056c0:	10000a1e 	bne	r2,zero,40056ec <_malloc_r+0x198>
 40056c4:	00bfff04 	movi	r2,-4
 40056c8:	294b883a 	add	r5,r5,r5
 40056cc:	2088703a 	and	r4,r4,r2
 40056d0:	28c4703a 	and	r2,r5,r3
 40056d4:	21000104 	addi	r4,r4,4
 40056d8:	1000041e 	bne	r2,zero,40056ec <_malloc_r+0x198>
 40056dc:	294b883a 	add	r5,r5,r5
 40056e0:	28c4703a 	and	r2,r5,r3
 40056e4:	21000104 	addi	r4,r4,4
 40056e8:	103ffc26 	beq	r2,zero,40056dc <__ram_exceptions_end+0xfac01550>
 40056ec:	02bfff04 	movi	r10,-4
 40056f0:	024003c4 	movi	r9,15
 40056f4:	21800044 	addi	r6,r4,1
 40056f8:	318d883a 	add	r6,r6,r6
 40056fc:	318d883a 	add	r6,r6,r6
 4005700:	318d883a 	add	r6,r6,r6
 4005704:	998d883a 	add	r6,r19,r6
 4005708:	333ffe04 	addi	r12,r6,-8
 400570c:	2017883a 	mov	r11,r4
 4005710:	31800104 	addi	r6,r6,4
 4005714:	34000017 	ldw	r16,0(r6)
 4005718:	31fffd04 	addi	r7,r6,-12
 400571c:	81c0041e 	bne	r16,r7,4005730 <_malloc_r+0x1dc>
 4005720:	0000fb06 	br	4005b10 <_malloc_r+0x5bc>
 4005724:	1801030e 	bge	r3,zero,4005b34 <_malloc_r+0x5e0>
 4005728:	84000317 	ldw	r16,12(r16)
 400572c:	81c0f826 	beq	r16,r7,4005b10 <_malloc_r+0x5bc>
 4005730:	80800117 	ldw	r2,4(r16)
 4005734:	1284703a 	and	r2,r2,r10
 4005738:	1447c83a 	sub	r3,r2,r17
 400573c:	48fff90e 	bge	r9,r3,4005724 <__ram_exceptions_end+0xfac01598>
 4005740:	80800317 	ldw	r2,12(r16)
 4005744:	81000217 	ldw	r4,8(r16)
 4005748:	89400054 	ori	r5,r17,1
 400574c:	81400115 	stw	r5,4(r16)
 4005750:	20800315 	stw	r2,12(r4)
 4005754:	11000215 	stw	r4,8(r2)
 4005758:	8463883a 	add	r17,r16,r17
 400575c:	9c400515 	stw	r17,20(r19)
 4005760:	9c400415 	stw	r17,16(r19)
 4005764:	18800054 	ori	r2,r3,1
 4005768:	88800115 	stw	r2,4(r17)
 400576c:	8a000315 	stw	r8,12(r17)
 4005770:	8a000215 	stw	r8,8(r17)
 4005774:	88e3883a 	add	r17,r17,r3
 4005778:	88c00015 	stw	r3,0(r17)
 400577c:	9009883a 	mov	r4,r18
 4005780:	400d4680 	call	400d468 <__malloc_unlock>
 4005784:	80800204 	addi	r2,r16,8
 4005788:	00001b06 	br	40057f8 <_malloc_r+0x2a4>
 400578c:	04400404 	movi	r17,16
 4005790:	89402536 	bltu	r17,r5,4005828 <_malloc_r+0x2d4>
 4005794:	400d4640 	call	400d464 <__malloc_lock>
 4005798:	00800184 	movi	r2,6
 400579c:	01000084 	movi	r4,2
 40057a0:	04c10074 	movhi	r19,1025
 40057a4:	1085883a 	add	r2,r2,r2
 40057a8:	9cc09204 	addi	r19,r19,584
 40057ac:	1085883a 	add	r2,r2,r2
 40057b0:	9885883a 	add	r2,r19,r2
 40057b4:	14000117 	ldw	r16,4(r2)
 40057b8:	10fffe04 	addi	r3,r2,-8
 40057bc:	80c0d926 	beq	r16,r3,4005b24 <_malloc_r+0x5d0>
 40057c0:	80c00117 	ldw	r3,4(r16)
 40057c4:	81000317 	ldw	r4,12(r16)
 40057c8:	00bfff04 	movi	r2,-4
 40057cc:	1884703a 	and	r2,r3,r2
 40057d0:	81400217 	ldw	r5,8(r16)
 40057d4:	8085883a 	add	r2,r16,r2
 40057d8:	10c00117 	ldw	r3,4(r2)
 40057dc:	29000315 	stw	r4,12(r5)
 40057e0:	21400215 	stw	r5,8(r4)
 40057e4:	18c00054 	ori	r3,r3,1
 40057e8:	10c00115 	stw	r3,4(r2)
 40057ec:	9009883a 	mov	r4,r18
 40057f0:	400d4680 	call	400d468 <__malloc_unlock>
 40057f4:	80800204 	addi	r2,r16,8
 40057f8:	dfc00a17 	ldw	ra,40(sp)
 40057fc:	df000917 	ldw	fp,36(sp)
 4005800:	ddc00817 	ldw	r23,32(sp)
 4005804:	dd800717 	ldw	r22,28(sp)
 4005808:	dd400617 	ldw	r21,24(sp)
 400580c:	dd000517 	ldw	r20,20(sp)
 4005810:	dcc00417 	ldw	r19,16(sp)
 4005814:	dc800317 	ldw	r18,12(sp)
 4005818:	dc400217 	ldw	r17,8(sp)
 400581c:	dc000117 	ldw	r16,4(sp)
 4005820:	dec00b04 	addi	sp,sp,44
 4005824:	f800283a 	ret
 4005828:	00800304 	movi	r2,12
 400582c:	90800015 	stw	r2,0(r18)
 4005830:	0005883a 	mov	r2,zero
 4005834:	003ff006 	br	40057f8 <__ram_exceptions_end+0xfac0166c>
 4005838:	01002004 	movi	r4,128
 400583c:	02001004 	movi	r8,64
 4005840:	01c00fc4 	movi	r7,63
 4005844:	003f6106 	br	40055cc <__ram_exceptions_end+0xfac01440>
 4005848:	4009883a 	mov	r4,r8
 400584c:	003f7506 	br	4005624 <__ram_exceptions_end+0xfac01498>
 4005850:	81000317 	ldw	r4,12(r16)
 4005854:	003fde06 	br	40057d0 <__ram_exceptions_end+0xfac01644>
 4005858:	81c5883a 	add	r2,r16,r7
 400585c:	11400117 	ldw	r5,4(r2)
 4005860:	9009883a 	mov	r4,r18
 4005864:	29400054 	ori	r5,r5,1
 4005868:	11400115 	stw	r5,4(r2)
 400586c:	400d4680 	call	400d468 <__malloc_unlock>
 4005870:	80800204 	addi	r2,r16,8
 4005874:	003fe006 	br	40057f8 <__ram_exceptions_end+0xfac0166c>
 4005878:	9c000217 	ldw	r16,8(r19)
 400587c:	00bfff04 	movi	r2,-4
 4005880:	85800117 	ldw	r22,4(r16)
 4005884:	b0ac703a 	and	r22,r22,r2
 4005888:	b4400336 	bltu	r22,r17,4005898 <_malloc_r+0x344>
 400588c:	b445c83a 	sub	r2,r22,r17
 4005890:	00c003c4 	movi	r3,15
 4005894:	18805d16 	blt	r3,r2,4005a0c <_malloc_r+0x4b8>
 4005898:	05c10074 	movhi	r23,1025
 400589c:	00810074 	movhi	r2,1025
 40058a0:	10859b04 	addi	r2,r2,5740
 40058a4:	bdc26704 	addi	r23,r23,2460
 40058a8:	15400017 	ldw	r21,0(r2)
 40058ac:	b8c00017 	ldw	r3,0(r23)
 40058b0:	00bfffc4 	movi	r2,-1
 40058b4:	858d883a 	add	r6,r16,r22
 40058b8:	8d6b883a 	add	r21,r17,r21
 40058bc:	1880ea26 	beq	r3,r2,4005c68 <_malloc_r+0x714>
 40058c0:	ad4403c4 	addi	r21,r21,4111
 40058c4:	00bc0004 	movi	r2,-4096
 40058c8:	a8aa703a 	and	r21,r21,r2
 40058cc:	a80b883a 	mov	r5,r21
 40058d0:	9009883a 	mov	r4,r18
 40058d4:	d9800015 	stw	r6,0(sp)
 40058d8:	40071240 	call	4007124 <_sbrk_r>
 40058dc:	1029883a 	mov	r20,r2
 40058e0:	00bfffc4 	movi	r2,-1
 40058e4:	d9800017 	ldw	r6,0(sp)
 40058e8:	a080e826 	beq	r20,r2,4005c8c <_malloc_r+0x738>
 40058ec:	a180a636 	bltu	r20,r6,4005b88 <_malloc_r+0x634>
 40058f0:	07010074 	movhi	fp,1025
 40058f4:	e705a404 	addi	fp,fp,5776
 40058f8:	e0800017 	ldw	r2,0(fp)
 40058fc:	a887883a 	add	r3,r21,r2
 4005900:	e0c00015 	stw	r3,0(fp)
 4005904:	3500e626 	beq	r6,r20,4005ca0 <_malloc_r+0x74c>
 4005908:	b9000017 	ldw	r4,0(r23)
 400590c:	00bfffc4 	movi	r2,-1
 4005910:	2080ee26 	beq	r4,r2,4005ccc <_malloc_r+0x778>
 4005914:	a185c83a 	sub	r2,r20,r6
 4005918:	10c5883a 	add	r2,r2,r3
 400591c:	e0800015 	stw	r2,0(fp)
 4005920:	a0c001cc 	andi	r3,r20,7
 4005924:	1800bc26 	beq	r3,zero,4005c18 <_malloc_r+0x6c4>
 4005928:	a0e9c83a 	sub	r20,r20,r3
 400592c:	00840204 	movi	r2,4104
 4005930:	a5000204 	addi	r20,r20,8
 4005934:	10c7c83a 	sub	r3,r2,r3
 4005938:	a545883a 	add	r2,r20,r21
 400593c:	1083ffcc 	andi	r2,r2,4095
 4005940:	18abc83a 	sub	r21,r3,r2
 4005944:	a80b883a 	mov	r5,r21
 4005948:	9009883a 	mov	r4,r18
 400594c:	40071240 	call	4007124 <_sbrk_r>
 4005950:	00ffffc4 	movi	r3,-1
 4005954:	10c0e126 	beq	r2,r3,4005cdc <_malloc_r+0x788>
 4005958:	1505c83a 	sub	r2,r2,r20
 400595c:	1545883a 	add	r2,r2,r21
 4005960:	10800054 	ori	r2,r2,1
 4005964:	e0c00017 	ldw	r3,0(fp)
 4005968:	9d000215 	stw	r20,8(r19)
 400596c:	a0800115 	stw	r2,4(r20)
 4005970:	a8c7883a 	add	r3,r21,r3
 4005974:	e0c00015 	stw	r3,0(fp)
 4005978:	84c00e26 	beq	r16,r19,40059b4 <_malloc_r+0x460>
 400597c:	018003c4 	movi	r6,15
 4005980:	3580a72e 	bgeu	r6,r22,4005c20 <_malloc_r+0x6cc>
 4005984:	81400117 	ldw	r5,4(r16)
 4005988:	013ffe04 	movi	r4,-8
 400598c:	b0bffd04 	addi	r2,r22,-12
 4005990:	1104703a 	and	r2,r2,r4
 4005994:	2900004c 	andi	r4,r5,1
 4005998:	2088b03a 	or	r4,r4,r2
 400599c:	81000115 	stw	r4,4(r16)
 40059a0:	01400144 	movi	r5,5
 40059a4:	8089883a 	add	r4,r16,r2
 40059a8:	21400115 	stw	r5,4(r4)
 40059ac:	21400215 	stw	r5,8(r4)
 40059b0:	3080cd36 	bltu	r6,r2,4005ce8 <_malloc_r+0x794>
 40059b4:	00810074 	movhi	r2,1025
 40059b8:	10859a04 	addi	r2,r2,5736
 40059bc:	11000017 	ldw	r4,0(r2)
 40059c0:	20c0012e 	bgeu	r4,r3,40059c8 <_malloc_r+0x474>
 40059c4:	10c00015 	stw	r3,0(r2)
 40059c8:	00810074 	movhi	r2,1025
 40059cc:	10859904 	addi	r2,r2,5732
 40059d0:	11000017 	ldw	r4,0(r2)
 40059d4:	9c000217 	ldw	r16,8(r19)
 40059d8:	20c0012e 	bgeu	r4,r3,40059e0 <_malloc_r+0x48c>
 40059dc:	10c00015 	stw	r3,0(r2)
 40059e0:	80c00117 	ldw	r3,4(r16)
 40059e4:	00bfff04 	movi	r2,-4
 40059e8:	1886703a 	and	r3,r3,r2
 40059ec:	1c45c83a 	sub	r2,r3,r17
 40059f0:	1c400236 	bltu	r3,r17,40059fc <_malloc_r+0x4a8>
 40059f4:	00c003c4 	movi	r3,15
 40059f8:	18800416 	blt	r3,r2,4005a0c <_malloc_r+0x4b8>
 40059fc:	9009883a 	mov	r4,r18
 4005a00:	400d4680 	call	400d468 <__malloc_unlock>
 4005a04:	0005883a 	mov	r2,zero
 4005a08:	003f7b06 	br	40057f8 <__ram_exceptions_end+0xfac0166c>
 4005a0c:	88c00054 	ori	r3,r17,1
 4005a10:	80c00115 	stw	r3,4(r16)
 4005a14:	8463883a 	add	r17,r16,r17
 4005a18:	10800054 	ori	r2,r2,1
 4005a1c:	9c400215 	stw	r17,8(r19)
 4005a20:	88800115 	stw	r2,4(r17)
 4005a24:	9009883a 	mov	r4,r18
 4005a28:	400d4680 	call	400d468 <__malloc_unlock>
 4005a2c:	80800204 	addi	r2,r16,8
 4005a30:	003f7106 	br	40057f8 <__ram_exceptions_end+0xfac0166c>
 4005a34:	00c00504 	movi	r3,20
 4005a38:	18804a2e 	bgeu	r3,r2,4005b64 <_malloc_r+0x610>
 4005a3c:	00c01504 	movi	r3,84
 4005a40:	18806e36 	bltu	r3,r2,4005bfc <_malloc_r+0x6a8>
 4005a44:	8804d33a 	srli	r2,r17,12
 4005a48:	12001bc4 	addi	r8,r2,111
 4005a4c:	11c01b84 	addi	r7,r2,110
 4005a50:	4209883a 	add	r4,r8,r8
 4005a54:	003edd06 	br	40055cc <__ram_exceptions_end+0xfac01440>
 4005a58:	3804d27a 	srli	r2,r7,9
 4005a5c:	00c00104 	movi	r3,4
 4005a60:	1880442e 	bgeu	r3,r2,4005b74 <_malloc_r+0x620>
 4005a64:	00c00504 	movi	r3,20
 4005a68:	18808136 	bltu	r3,r2,4005c70 <_malloc_r+0x71c>
 4005a6c:	11401704 	addi	r5,r2,92
 4005a70:	10c016c4 	addi	r3,r2,91
 4005a74:	294b883a 	add	r5,r5,r5
 4005a78:	294b883a 	add	r5,r5,r5
 4005a7c:	294b883a 	add	r5,r5,r5
 4005a80:	994b883a 	add	r5,r19,r5
 4005a84:	28800017 	ldw	r2,0(r5)
 4005a88:	01810074 	movhi	r6,1025
 4005a8c:	297ffe04 	addi	r5,r5,-8
 4005a90:	31809204 	addi	r6,r6,584
 4005a94:	28806526 	beq	r5,r2,4005c2c <_malloc_r+0x6d8>
 4005a98:	01bfff04 	movi	r6,-4
 4005a9c:	10c00117 	ldw	r3,4(r2)
 4005aa0:	1986703a 	and	r3,r3,r6
 4005aa4:	38c0022e 	bgeu	r7,r3,4005ab0 <_malloc_r+0x55c>
 4005aa8:	10800217 	ldw	r2,8(r2)
 4005aac:	28bffb1e 	bne	r5,r2,4005a9c <__ram_exceptions_end+0xfac01910>
 4005ab0:	11400317 	ldw	r5,12(r2)
 4005ab4:	98c00117 	ldw	r3,4(r19)
 4005ab8:	81400315 	stw	r5,12(r16)
 4005abc:	80800215 	stw	r2,8(r16)
 4005ac0:	2c000215 	stw	r16,8(r5)
 4005ac4:	14000315 	stw	r16,12(r2)
 4005ac8:	003ef806 	br	40056ac <__ram_exceptions_end+0xfac01520>
 4005acc:	88c00054 	ori	r3,r17,1
 4005ad0:	80c00115 	stw	r3,4(r16)
 4005ad4:	8463883a 	add	r17,r16,r17
 4005ad8:	34400515 	stw	r17,20(r6)
 4005adc:	34400415 	stw	r17,16(r6)
 4005ae0:	10c00054 	ori	r3,r2,1
 4005ae4:	8a000315 	stw	r8,12(r17)
 4005ae8:	8a000215 	stw	r8,8(r17)
 4005aec:	88c00115 	stw	r3,4(r17)
 4005af0:	88a3883a 	add	r17,r17,r2
 4005af4:	88800015 	stw	r2,0(r17)
 4005af8:	9009883a 	mov	r4,r18
 4005afc:	400d4680 	call	400d468 <__malloc_unlock>
 4005b00:	80800204 	addi	r2,r16,8
 4005b04:	003f3c06 	br	40057f8 <__ram_exceptions_end+0xfac0166c>
 4005b08:	30c00117 	ldw	r3,4(r6)
 4005b0c:	003ee706 	br	40056ac <__ram_exceptions_end+0xfac01520>
 4005b10:	5ac00044 	addi	r11,r11,1
 4005b14:	588000cc 	andi	r2,r11,3
 4005b18:	31800204 	addi	r6,r6,8
 4005b1c:	103efd1e 	bne	r2,zero,4005714 <__ram_exceptions_end+0xfac01588>
 4005b20:	00002406 	br	4005bb4 <_malloc_r+0x660>
 4005b24:	14000317 	ldw	r16,12(r2)
 4005b28:	143f251e 	bne	r2,r16,40057c0 <__ram_exceptions_end+0xfac01634>
 4005b2c:	21000084 	addi	r4,r4,2
 4005b30:	003ebc06 	br	4005624 <__ram_exceptions_end+0xfac01498>
 4005b34:	8085883a 	add	r2,r16,r2
 4005b38:	10c00117 	ldw	r3,4(r2)
 4005b3c:	81000317 	ldw	r4,12(r16)
 4005b40:	81400217 	ldw	r5,8(r16)
 4005b44:	18c00054 	ori	r3,r3,1
 4005b48:	10c00115 	stw	r3,4(r2)
 4005b4c:	29000315 	stw	r4,12(r5)
 4005b50:	21400215 	stw	r5,8(r4)
 4005b54:	9009883a 	mov	r4,r18
 4005b58:	400d4680 	call	400d468 <__malloc_unlock>
 4005b5c:	80800204 	addi	r2,r16,8
 4005b60:	003f2506 	br	40057f8 <__ram_exceptions_end+0xfac0166c>
 4005b64:	12001704 	addi	r8,r2,92
 4005b68:	11c016c4 	addi	r7,r2,91
 4005b6c:	4209883a 	add	r4,r8,r8
 4005b70:	003e9606 	br	40055cc <__ram_exceptions_end+0xfac01440>
 4005b74:	3804d1ba 	srli	r2,r7,6
 4005b78:	11400e44 	addi	r5,r2,57
 4005b7c:	10c00e04 	addi	r3,r2,56
 4005b80:	294b883a 	add	r5,r5,r5
 4005b84:	003fbc06 	br	4005a78 <__ram_exceptions_end+0xfac018ec>
 4005b88:	84ff5926 	beq	r16,r19,40058f0 <__ram_exceptions_end+0xfac01764>
 4005b8c:	00810074 	movhi	r2,1025
 4005b90:	10809204 	addi	r2,r2,584
 4005b94:	14000217 	ldw	r16,8(r2)
 4005b98:	00bfff04 	movi	r2,-4
 4005b9c:	80c00117 	ldw	r3,4(r16)
 4005ba0:	1886703a 	and	r3,r3,r2
 4005ba4:	003f9106 	br	40059ec <__ram_exceptions_end+0xfac01860>
 4005ba8:	60800217 	ldw	r2,8(r12)
 4005bac:	213fffc4 	addi	r4,r4,-1
 4005bb0:	1300651e 	bne	r2,r12,4005d48 <_malloc_r+0x7f4>
 4005bb4:	208000cc 	andi	r2,r4,3
 4005bb8:	633ffe04 	addi	r12,r12,-8
 4005bbc:	103ffa1e 	bne	r2,zero,4005ba8 <__ram_exceptions_end+0xfac01a1c>
 4005bc0:	98800117 	ldw	r2,4(r19)
 4005bc4:	0146303a 	nor	r3,zero,r5
 4005bc8:	1884703a 	and	r2,r3,r2
 4005bcc:	98800115 	stw	r2,4(r19)
 4005bd0:	294b883a 	add	r5,r5,r5
 4005bd4:	117f2836 	bltu	r2,r5,4005878 <__ram_exceptions_end+0xfac016ec>
 4005bd8:	283f2726 	beq	r5,zero,4005878 <__ram_exceptions_end+0xfac016ec>
 4005bdc:	2886703a 	and	r3,r5,r2
 4005be0:	5809883a 	mov	r4,r11
 4005be4:	183ec31e 	bne	r3,zero,40056f4 <__ram_exceptions_end+0xfac01568>
 4005be8:	294b883a 	add	r5,r5,r5
 4005bec:	2886703a 	and	r3,r5,r2
 4005bf0:	21000104 	addi	r4,r4,4
 4005bf4:	183ffc26 	beq	r3,zero,4005be8 <__ram_exceptions_end+0xfac01a5c>
 4005bf8:	003ebe06 	br	40056f4 <__ram_exceptions_end+0xfac01568>
 4005bfc:	00c05504 	movi	r3,340
 4005c00:	18801236 	bltu	r3,r2,4005c4c <_malloc_r+0x6f8>
 4005c04:	8804d3fa 	srli	r2,r17,15
 4005c08:	12001e04 	addi	r8,r2,120
 4005c0c:	11c01dc4 	addi	r7,r2,119
 4005c10:	4209883a 	add	r4,r8,r8
 4005c14:	003e6d06 	br	40055cc <__ram_exceptions_end+0xfac01440>
 4005c18:	00c40004 	movi	r3,4096
 4005c1c:	003f4606 	br	4005938 <__ram_exceptions_end+0xfac017ac>
 4005c20:	00800044 	movi	r2,1
 4005c24:	a0800115 	stw	r2,4(r20)
 4005c28:	003f7406 	br	40059fc <__ram_exceptions_end+0xfac01870>
 4005c2c:	1805d0ba 	srai	r2,r3,2
 4005c30:	01c00044 	movi	r7,1
 4005c34:	30c00117 	ldw	r3,4(r6)
 4005c38:	388e983a 	sll	r7,r7,r2
 4005c3c:	2805883a 	mov	r2,r5
 4005c40:	38c6b03a 	or	r3,r7,r3
 4005c44:	30c00115 	stw	r3,4(r6)
 4005c48:	003f9b06 	br	4005ab8 <__ram_exceptions_end+0xfac0192c>
 4005c4c:	00c15504 	movi	r3,1364
 4005c50:	18801a36 	bltu	r3,r2,4005cbc <_malloc_r+0x768>
 4005c54:	8804d4ba 	srli	r2,r17,18
 4005c58:	12001f44 	addi	r8,r2,125
 4005c5c:	11c01f04 	addi	r7,r2,124
 4005c60:	4209883a 	add	r4,r8,r8
 4005c64:	003e5906 	br	40055cc <__ram_exceptions_end+0xfac01440>
 4005c68:	ad400404 	addi	r21,r21,16
 4005c6c:	003f1706 	br	40058cc <__ram_exceptions_end+0xfac01740>
 4005c70:	00c01504 	movi	r3,84
 4005c74:	18802336 	bltu	r3,r2,4005d04 <_malloc_r+0x7b0>
 4005c78:	3804d33a 	srli	r2,r7,12
 4005c7c:	11401bc4 	addi	r5,r2,111
 4005c80:	10c01b84 	addi	r3,r2,110
 4005c84:	294b883a 	add	r5,r5,r5
 4005c88:	003f7b06 	br	4005a78 <__ram_exceptions_end+0xfac018ec>
 4005c8c:	9c000217 	ldw	r16,8(r19)
 4005c90:	00bfff04 	movi	r2,-4
 4005c94:	80c00117 	ldw	r3,4(r16)
 4005c98:	1886703a 	and	r3,r3,r2
 4005c9c:	003f5306 	br	40059ec <__ram_exceptions_end+0xfac01860>
 4005ca0:	3083ffcc 	andi	r2,r6,4095
 4005ca4:	103f181e 	bne	r2,zero,4005908 <__ram_exceptions_end+0xfac0177c>
 4005ca8:	99000217 	ldw	r4,8(r19)
 4005cac:	b545883a 	add	r2,r22,r21
 4005cb0:	10800054 	ori	r2,r2,1
 4005cb4:	20800115 	stw	r2,4(r4)
 4005cb8:	003f3e06 	br	40059b4 <__ram_exceptions_end+0xfac01828>
 4005cbc:	01003f84 	movi	r4,254
 4005cc0:	02001fc4 	movi	r8,127
 4005cc4:	01c01f84 	movi	r7,126
 4005cc8:	003e4006 	br	40055cc <__ram_exceptions_end+0xfac01440>
 4005ccc:	00810074 	movhi	r2,1025
 4005cd0:	10826704 	addi	r2,r2,2460
 4005cd4:	15000015 	stw	r20,0(r2)
 4005cd8:	003f1106 	br	4005920 <__ram_exceptions_end+0xfac01794>
 4005cdc:	00800044 	movi	r2,1
 4005ce0:	002b883a 	mov	r21,zero
 4005ce4:	003f1f06 	br	4005964 <__ram_exceptions_end+0xfac017d8>
 4005ce8:	81400204 	addi	r5,r16,8
 4005cec:	9009883a 	mov	r4,r18
 4005cf0:	4004e240 	call	4004e24 <_free_r>
 4005cf4:	00810074 	movhi	r2,1025
 4005cf8:	1085a404 	addi	r2,r2,5776
 4005cfc:	10c00017 	ldw	r3,0(r2)
 4005d00:	003f2c06 	br	40059b4 <__ram_exceptions_end+0xfac01828>
 4005d04:	00c05504 	movi	r3,340
 4005d08:	18800536 	bltu	r3,r2,4005d20 <_malloc_r+0x7cc>
 4005d0c:	3804d3fa 	srli	r2,r7,15
 4005d10:	11401e04 	addi	r5,r2,120
 4005d14:	10c01dc4 	addi	r3,r2,119
 4005d18:	294b883a 	add	r5,r5,r5
 4005d1c:	003f5606 	br	4005a78 <__ram_exceptions_end+0xfac018ec>
 4005d20:	00c15504 	movi	r3,1364
 4005d24:	18800536 	bltu	r3,r2,4005d3c <_malloc_r+0x7e8>
 4005d28:	3804d4ba 	srli	r2,r7,18
 4005d2c:	11401f44 	addi	r5,r2,125
 4005d30:	10c01f04 	addi	r3,r2,124
 4005d34:	294b883a 	add	r5,r5,r5
 4005d38:	003f4f06 	br	4005a78 <__ram_exceptions_end+0xfac018ec>
 4005d3c:	01403f84 	movi	r5,254
 4005d40:	00c01f84 	movi	r3,126
 4005d44:	003f4c06 	br	4005a78 <__ram_exceptions_end+0xfac018ec>
 4005d48:	98800117 	ldw	r2,4(r19)
 4005d4c:	003fa006 	br	4005bd0 <__ram_exceptions_end+0xfac01a44>
 4005d50:	8808d0fa 	srli	r4,r17,3
 4005d54:	20800044 	addi	r2,r4,1
 4005d58:	1085883a 	add	r2,r2,r2
 4005d5c:	003e9006 	br	40057a0 <__ram_exceptions_end+0xfac01614>

04005d60 <memchr>:
 4005d60:	208000cc 	andi	r2,r4,3
 4005d64:	280f883a 	mov	r7,r5
 4005d68:	10003426 	beq	r2,zero,4005e3c <memchr+0xdc>
 4005d6c:	30bfffc4 	addi	r2,r6,-1
 4005d70:	30001a26 	beq	r6,zero,4005ddc <memchr+0x7c>
 4005d74:	20c00003 	ldbu	r3,0(r4)
 4005d78:	29803fcc 	andi	r6,r5,255
 4005d7c:	30c0051e 	bne	r6,r3,4005d94 <memchr+0x34>
 4005d80:	00001806 	br	4005de4 <memchr+0x84>
 4005d84:	10001526 	beq	r2,zero,4005ddc <memchr+0x7c>
 4005d88:	20c00003 	ldbu	r3,0(r4)
 4005d8c:	10bfffc4 	addi	r2,r2,-1
 4005d90:	30c01426 	beq	r6,r3,4005de4 <memchr+0x84>
 4005d94:	21000044 	addi	r4,r4,1
 4005d98:	20c000cc 	andi	r3,r4,3
 4005d9c:	183ff91e 	bne	r3,zero,4005d84 <__ram_exceptions_end+0xfac01bf8>
 4005da0:	020000c4 	movi	r8,3
 4005da4:	40801136 	bltu	r8,r2,4005dec <memchr+0x8c>
 4005da8:	10000c26 	beq	r2,zero,4005ddc <memchr+0x7c>
 4005dac:	20c00003 	ldbu	r3,0(r4)
 4005db0:	29403fcc 	andi	r5,r5,255
 4005db4:	28c00b26 	beq	r5,r3,4005de4 <memchr+0x84>
 4005db8:	20c00044 	addi	r3,r4,1
 4005dbc:	39803fcc 	andi	r6,r7,255
 4005dc0:	2089883a 	add	r4,r4,r2
 4005dc4:	00000306 	br	4005dd4 <memchr+0x74>
 4005dc8:	18c00044 	addi	r3,r3,1
 4005dcc:	197fffc3 	ldbu	r5,-1(r3)
 4005dd0:	31400526 	beq	r6,r5,4005de8 <memchr+0x88>
 4005dd4:	1805883a 	mov	r2,r3
 4005dd8:	20fffb1e 	bne	r4,r3,4005dc8 <__ram_exceptions_end+0xfac01c3c>
 4005ddc:	0005883a 	mov	r2,zero
 4005de0:	f800283a 	ret
 4005de4:	2005883a 	mov	r2,r4
 4005de8:	f800283a 	ret
 4005dec:	28c03fcc 	andi	r3,r5,255
 4005df0:	1812923a 	slli	r9,r3,8
 4005df4:	02ffbff4 	movhi	r11,65279
 4005df8:	02a02074 	movhi	r10,32897
 4005dfc:	48d2b03a 	or	r9,r9,r3
 4005e00:	4806943a 	slli	r3,r9,16
 4005e04:	5affbfc4 	addi	r11,r11,-257
 4005e08:	52a02004 	addi	r10,r10,-32640
 4005e0c:	48d2b03a 	or	r9,r9,r3
 4005e10:	20c00017 	ldw	r3,0(r4)
 4005e14:	48c6f03a 	xor	r3,r9,r3
 4005e18:	1acd883a 	add	r6,r3,r11
 4005e1c:	00c6303a 	nor	r3,zero,r3
 4005e20:	30c6703a 	and	r3,r6,r3
 4005e24:	1a86703a 	and	r3,r3,r10
 4005e28:	183fe01e 	bne	r3,zero,4005dac <__ram_exceptions_end+0xfac01c20>
 4005e2c:	10bfff04 	addi	r2,r2,-4
 4005e30:	21000104 	addi	r4,r4,4
 4005e34:	40bff636 	bltu	r8,r2,4005e10 <__ram_exceptions_end+0xfac01c84>
 4005e38:	003fdb06 	br	4005da8 <__ram_exceptions_end+0xfac01c1c>
 4005e3c:	3005883a 	mov	r2,r6
 4005e40:	003fd706 	br	4005da0 <__ram_exceptions_end+0xfac01c14>

04005e44 <memcpy>:
 4005e44:	defffd04 	addi	sp,sp,-12
 4005e48:	dfc00215 	stw	ra,8(sp)
 4005e4c:	dc400115 	stw	r17,4(sp)
 4005e50:	dc000015 	stw	r16,0(sp)
 4005e54:	00c003c4 	movi	r3,15
 4005e58:	2005883a 	mov	r2,r4
 4005e5c:	1980452e 	bgeu	r3,r6,4005f74 <memcpy+0x130>
 4005e60:	2906b03a 	or	r3,r5,r4
 4005e64:	18c000cc 	andi	r3,r3,3
 4005e68:	1800441e 	bne	r3,zero,4005f7c <memcpy+0x138>
 4005e6c:	347ffc04 	addi	r17,r6,-16
 4005e70:	8822d13a 	srli	r17,r17,4
 4005e74:	28c00104 	addi	r3,r5,4
 4005e78:	23400104 	addi	r13,r4,4
 4005e7c:	8820913a 	slli	r16,r17,4
 4005e80:	2b000204 	addi	r12,r5,8
 4005e84:	22c00204 	addi	r11,r4,8
 4005e88:	84000504 	addi	r16,r16,20
 4005e8c:	2a800304 	addi	r10,r5,12
 4005e90:	22400304 	addi	r9,r4,12
 4005e94:	2c21883a 	add	r16,r5,r16
 4005e98:	2811883a 	mov	r8,r5
 4005e9c:	200f883a 	mov	r7,r4
 4005ea0:	41000017 	ldw	r4,0(r8)
 4005ea4:	1fc00017 	ldw	ra,0(r3)
 4005ea8:	63c00017 	ldw	r15,0(r12)
 4005eac:	39000015 	stw	r4,0(r7)
 4005eb0:	53800017 	ldw	r14,0(r10)
 4005eb4:	6fc00015 	stw	ra,0(r13)
 4005eb8:	5bc00015 	stw	r15,0(r11)
 4005ebc:	4b800015 	stw	r14,0(r9)
 4005ec0:	18c00404 	addi	r3,r3,16
 4005ec4:	39c00404 	addi	r7,r7,16
 4005ec8:	42000404 	addi	r8,r8,16
 4005ecc:	6b400404 	addi	r13,r13,16
 4005ed0:	63000404 	addi	r12,r12,16
 4005ed4:	5ac00404 	addi	r11,r11,16
 4005ed8:	52800404 	addi	r10,r10,16
 4005edc:	4a400404 	addi	r9,r9,16
 4005ee0:	1c3fef1e 	bne	r3,r16,4005ea0 <__ram_exceptions_end+0xfac01d14>
 4005ee4:	89c00044 	addi	r7,r17,1
 4005ee8:	380e913a 	slli	r7,r7,4
 4005eec:	310003cc 	andi	r4,r6,15
 4005ef0:	02c000c4 	movi	r11,3
 4005ef4:	11c7883a 	add	r3,r2,r7
 4005ef8:	29cb883a 	add	r5,r5,r7
 4005efc:	5900212e 	bgeu	r11,r4,4005f84 <memcpy+0x140>
 4005f00:	1813883a 	mov	r9,r3
 4005f04:	2811883a 	mov	r8,r5
 4005f08:	200f883a 	mov	r7,r4
 4005f0c:	42800017 	ldw	r10,0(r8)
 4005f10:	4a400104 	addi	r9,r9,4
 4005f14:	39ffff04 	addi	r7,r7,-4
 4005f18:	4abfff15 	stw	r10,-4(r9)
 4005f1c:	42000104 	addi	r8,r8,4
 4005f20:	59fffa36 	bltu	r11,r7,4005f0c <__ram_exceptions_end+0xfac01d80>
 4005f24:	213fff04 	addi	r4,r4,-4
 4005f28:	2008d0ba 	srli	r4,r4,2
 4005f2c:	318000cc 	andi	r6,r6,3
 4005f30:	21000044 	addi	r4,r4,1
 4005f34:	2109883a 	add	r4,r4,r4
 4005f38:	2109883a 	add	r4,r4,r4
 4005f3c:	1907883a 	add	r3,r3,r4
 4005f40:	290b883a 	add	r5,r5,r4
 4005f44:	30000626 	beq	r6,zero,4005f60 <memcpy+0x11c>
 4005f48:	198d883a 	add	r6,r3,r6
 4005f4c:	29c00003 	ldbu	r7,0(r5)
 4005f50:	18c00044 	addi	r3,r3,1
 4005f54:	29400044 	addi	r5,r5,1
 4005f58:	19ffffc5 	stb	r7,-1(r3)
 4005f5c:	19bffb1e 	bne	r3,r6,4005f4c <__ram_exceptions_end+0xfac01dc0>
 4005f60:	dfc00217 	ldw	ra,8(sp)
 4005f64:	dc400117 	ldw	r17,4(sp)
 4005f68:	dc000017 	ldw	r16,0(sp)
 4005f6c:	dec00304 	addi	sp,sp,12
 4005f70:	f800283a 	ret
 4005f74:	2007883a 	mov	r3,r4
 4005f78:	003ff206 	br	4005f44 <__ram_exceptions_end+0xfac01db8>
 4005f7c:	2007883a 	mov	r3,r4
 4005f80:	003ff106 	br	4005f48 <__ram_exceptions_end+0xfac01dbc>
 4005f84:	200d883a 	mov	r6,r4
 4005f88:	003fee06 	br	4005f44 <__ram_exceptions_end+0xfac01db8>

04005f8c <memset>:
 4005f8c:	20c000cc 	andi	r3,r4,3
 4005f90:	2005883a 	mov	r2,r4
 4005f94:	18004426 	beq	r3,zero,40060a8 <memset+0x11c>
 4005f98:	31ffffc4 	addi	r7,r6,-1
 4005f9c:	30004026 	beq	r6,zero,40060a0 <memset+0x114>
 4005fa0:	2813883a 	mov	r9,r5
 4005fa4:	200d883a 	mov	r6,r4
 4005fa8:	2007883a 	mov	r3,r4
 4005fac:	00000406 	br	4005fc0 <memset+0x34>
 4005fb0:	3a3fffc4 	addi	r8,r7,-1
 4005fb4:	31800044 	addi	r6,r6,1
 4005fb8:	38003926 	beq	r7,zero,40060a0 <memset+0x114>
 4005fbc:	400f883a 	mov	r7,r8
 4005fc0:	18c00044 	addi	r3,r3,1
 4005fc4:	32400005 	stb	r9,0(r6)
 4005fc8:	1a0000cc 	andi	r8,r3,3
 4005fcc:	403ff81e 	bne	r8,zero,4005fb0 <__ram_exceptions_end+0xfac01e24>
 4005fd0:	010000c4 	movi	r4,3
 4005fd4:	21c02d2e 	bgeu	r4,r7,400608c <memset+0x100>
 4005fd8:	29003fcc 	andi	r4,r5,255
 4005fdc:	200c923a 	slli	r6,r4,8
 4005fe0:	3108b03a 	or	r4,r6,r4
 4005fe4:	200c943a 	slli	r6,r4,16
 4005fe8:	218cb03a 	or	r6,r4,r6
 4005fec:	010003c4 	movi	r4,15
 4005ff0:	21c0182e 	bgeu	r4,r7,4006054 <memset+0xc8>
 4005ff4:	3b3ffc04 	addi	r12,r7,-16
 4005ff8:	6018d13a 	srli	r12,r12,4
 4005ffc:	1a000104 	addi	r8,r3,4
 4006000:	1ac00204 	addi	r11,r3,8
 4006004:	6008913a 	slli	r4,r12,4
 4006008:	1a800304 	addi	r10,r3,12
 400600c:	1813883a 	mov	r9,r3
 4006010:	21000504 	addi	r4,r4,20
 4006014:	1909883a 	add	r4,r3,r4
 4006018:	49800015 	stw	r6,0(r9)
 400601c:	41800015 	stw	r6,0(r8)
 4006020:	59800015 	stw	r6,0(r11)
 4006024:	51800015 	stw	r6,0(r10)
 4006028:	42000404 	addi	r8,r8,16
 400602c:	4a400404 	addi	r9,r9,16
 4006030:	5ac00404 	addi	r11,r11,16
 4006034:	52800404 	addi	r10,r10,16
 4006038:	413ff71e 	bne	r8,r4,4006018 <__ram_exceptions_end+0xfac01e8c>
 400603c:	63000044 	addi	r12,r12,1
 4006040:	6018913a 	slli	r12,r12,4
 4006044:	39c003cc 	andi	r7,r7,15
 4006048:	010000c4 	movi	r4,3
 400604c:	1b07883a 	add	r3,r3,r12
 4006050:	21c00e2e 	bgeu	r4,r7,400608c <memset+0x100>
 4006054:	1813883a 	mov	r9,r3
 4006058:	3811883a 	mov	r8,r7
 400605c:	010000c4 	movi	r4,3
 4006060:	49800015 	stw	r6,0(r9)
 4006064:	423fff04 	addi	r8,r8,-4
 4006068:	4a400104 	addi	r9,r9,4
 400606c:	223ffc36 	bltu	r4,r8,4006060 <__ram_exceptions_end+0xfac01ed4>
 4006070:	393fff04 	addi	r4,r7,-4
 4006074:	2008d0ba 	srli	r4,r4,2
 4006078:	39c000cc 	andi	r7,r7,3
 400607c:	21000044 	addi	r4,r4,1
 4006080:	2109883a 	add	r4,r4,r4
 4006084:	2109883a 	add	r4,r4,r4
 4006088:	1907883a 	add	r3,r3,r4
 400608c:	38000526 	beq	r7,zero,40060a4 <memset+0x118>
 4006090:	19cf883a 	add	r7,r3,r7
 4006094:	19400005 	stb	r5,0(r3)
 4006098:	18c00044 	addi	r3,r3,1
 400609c:	38fffd1e 	bne	r7,r3,4006094 <__ram_exceptions_end+0xfac01f08>
 40060a0:	f800283a 	ret
 40060a4:	f800283a 	ret
 40060a8:	2007883a 	mov	r3,r4
 40060ac:	300f883a 	mov	r7,r6
 40060b0:	003fc706 	br	4005fd0 <__ram_exceptions_end+0xfac01e44>

040060b4 <_Balloc>:
 40060b4:	20801317 	ldw	r2,76(r4)
 40060b8:	defffc04 	addi	sp,sp,-16
 40060bc:	dc400115 	stw	r17,4(sp)
 40060c0:	dc000015 	stw	r16,0(sp)
 40060c4:	dfc00315 	stw	ra,12(sp)
 40060c8:	dc800215 	stw	r18,8(sp)
 40060cc:	2023883a 	mov	r17,r4
 40060d0:	2821883a 	mov	r16,r5
 40060d4:	10000f26 	beq	r2,zero,4006114 <_Balloc+0x60>
 40060d8:	8407883a 	add	r3,r16,r16
 40060dc:	18c7883a 	add	r3,r3,r3
 40060e0:	10c7883a 	add	r3,r2,r3
 40060e4:	18800017 	ldw	r2,0(r3)
 40060e8:	10001126 	beq	r2,zero,4006130 <_Balloc+0x7c>
 40060ec:	11000017 	ldw	r4,0(r2)
 40060f0:	19000015 	stw	r4,0(r3)
 40060f4:	10000415 	stw	zero,16(r2)
 40060f8:	10000315 	stw	zero,12(r2)
 40060fc:	dfc00317 	ldw	ra,12(sp)
 4006100:	dc800217 	ldw	r18,8(sp)
 4006104:	dc400117 	ldw	r17,4(sp)
 4006108:	dc000017 	ldw	r16,0(sp)
 400610c:	dec00404 	addi	sp,sp,16
 4006110:	f800283a 	ret
 4006114:	01800844 	movi	r6,33
 4006118:	01400104 	movi	r5,4
 400611c:	4008b240 	call	4008b24 <_calloc_r>
 4006120:	88801315 	stw	r2,76(r17)
 4006124:	103fec1e 	bne	r2,zero,40060d8 <__ram_exceptions_end+0xfac01f4c>
 4006128:	0005883a 	mov	r2,zero
 400612c:	003ff306 	br	40060fc <__ram_exceptions_end+0xfac01f70>
 4006130:	01400044 	movi	r5,1
 4006134:	2c24983a 	sll	r18,r5,r16
 4006138:	8809883a 	mov	r4,r17
 400613c:	91800144 	addi	r6,r18,5
 4006140:	318d883a 	add	r6,r6,r6
 4006144:	318d883a 	add	r6,r6,r6
 4006148:	4008b240 	call	4008b24 <_calloc_r>
 400614c:	103ff626 	beq	r2,zero,4006128 <__ram_exceptions_end+0xfac01f9c>
 4006150:	14000115 	stw	r16,4(r2)
 4006154:	14800215 	stw	r18,8(r2)
 4006158:	003fe606 	br	40060f4 <__ram_exceptions_end+0xfac01f68>

0400615c <_Bfree>:
 400615c:	28000826 	beq	r5,zero,4006180 <_Bfree+0x24>
 4006160:	28c00117 	ldw	r3,4(r5)
 4006164:	20801317 	ldw	r2,76(r4)
 4006168:	18c7883a 	add	r3,r3,r3
 400616c:	18c7883a 	add	r3,r3,r3
 4006170:	10c5883a 	add	r2,r2,r3
 4006174:	10c00017 	ldw	r3,0(r2)
 4006178:	28c00015 	stw	r3,0(r5)
 400617c:	11400015 	stw	r5,0(r2)
 4006180:	f800283a 	ret

04006184 <__multadd>:
 4006184:	defffa04 	addi	sp,sp,-24
 4006188:	dc800315 	stw	r18,12(sp)
 400618c:	dc400215 	stw	r17,8(sp)
 4006190:	dc000115 	stw	r16,4(sp)
 4006194:	2823883a 	mov	r17,r5
 4006198:	2c000417 	ldw	r16,16(r5)
 400619c:	dfc00515 	stw	ra,20(sp)
 40061a0:	dcc00415 	stw	r19,16(sp)
 40061a4:	2025883a 	mov	r18,r4
 40061a8:	29400504 	addi	r5,r5,20
 40061ac:	0011883a 	mov	r8,zero
 40061b0:	28c00017 	ldw	r3,0(r5)
 40061b4:	29400104 	addi	r5,r5,4
 40061b8:	42000044 	addi	r8,r8,1
 40061bc:	18bfffcc 	andi	r2,r3,65535
 40061c0:	1185383a 	mul	r2,r2,r6
 40061c4:	1806d43a 	srli	r3,r3,16
 40061c8:	11cf883a 	add	r7,r2,r7
 40061cc:	3808d43a 	srli	r4,r7,16
 40061d0:	1987383a 	mul	r3,r3,r6
 40061d4:	38bfffcc 	andi	r2,r7,65535
 40061d8:	1907883a 	add	r3,r3,r4
 40061dc:	1808943a 	slli	r4,r3,16
 40061e0:	180ed43a 	srli	r7,r3,16
 40061e4:	2085883a 	add	r2,r4,r2
 40061e8:	28bfff15 	stw	r2,-4(r5)
 40061ec:	443ff016 	blt	r8,r16,40061b0 <__ram_exceptions_end+0xfac02024>
 40061f0:	38000926 	beq	r7,zero,4006218 <__multadd+0x94>
 40061f4:	88800217 	ldw	r2,8(r17)
 40061f8:	80800f0e 	bge	r16,r2,4006238 <__multadd+0xb4>
 40061fc:	80800144 	addi	r2,r16,5
 4006200:	1085883a 	add	r2,r2,r2
 4006204:	1085883a 	add	r2,r2,r2
 4006208:	8885883a 	add	r2,r17,r2
 400620c:	11c00015 	stw	r7,0(r2)
 4006210:	84000044 	addi	r16,r16,1
 4006214:	8c000415 	stw	r16,16(r17)
 4006218:	8805883a 	mov	r2,r17
 400621c:	dfc00517 	ldw	ra,20(sp)
 4006220:	dcc00417 	ldw	r19,16(sp)
 4006224:	dc800317 	ldw	r18,12(sp)
 4006228:	dc400217 	ldw	r17,8(sp)
 400622c:	dc000117 	ldw	r16,4(sp)
 4006230:	dec00604 	addi	sp,sp,24
 4006234:	f800283a 	ret
 4006238:	89400117 	ldw	r5,4(r17)
 400623c:	9009883a 	mov	r4,r18
 4006240:	d9c00015 	stw	r7,0(sp)
 4006244:	29400044 	addi	r5,r5,1
 4006248:	40060b40 	call	40060b4 <_Balloc>
 400624c:	89800417 	ldw	r6,16(r17)
 4006250:	89400304 	addi	r5,r17,12
 4006254:	11000304 	addi	r4,r2,12
 4006258:	31800084 	addi	r6,r6,2
 400625c:	318d883a 	add	r6,r6,r6
 4006260:	318d883a 	add	r6,r6,r6
 4006264:	1027883a 	mov	r19,r2
 4006268:	4005e440 	call	4005e44 <memcpy>
 400626c:	d9c00017 	ldw	r7,0(sp)
 4006270:	88000a26 	beq	r17,zero,400629c <__multadd+0x118>
 4006274:	88c00117 	ldw	r3,4(r17)
 4006278:	90801317 	ldw	r2,76(r18)
 400627c:	18c7883a 	add	r3,r3,r3
 4006280:	18c7883a 	add	r3,r3,r3
 4006284:	10c5883a 	add	r2,r2,r3
 4006288:	10c00017 	ldw	r3,0(r2)
 400628c:	88c00015 	stw	r3,0(r17)
 4006290:	14400015 	stw	r17,0(r2)
 4006294:	9823883a 	mov	r17,r19
 4006298:	003fd806 	br	40061fc <__ram_exceptions_end+0xfac02070>
 400629c:	9823883a 	mov	r17,r19
 40062a0:	003fd606 	br	40061fc <__ram_exceptions_end+0xfac02070>

040062a4 <__s2b>:
 40062a4:	defff904 	addi	sp,sp,-28
 40062a8:	dc400115 	stw	r17,4(sp)
 40062ac:	dc000015 	stw	r16,0(sp)
 40062b0:	2023883a 	mov	r17,r4
 40062b4:	2821883a 	mov	r16,r5
 40062b8:	39000204 	addi	r4,r7,8
 40062bc:	01400244 	movi	r5,9
 40062c0:	dcc00315 	stw	r19,12(sp)
 40062c4:	dc800215 	stw	r18,8(sp)
 40062c8:	dfc00615 	stw	ra,24(sp)
 40062cc:	dd400515 	stw	r21,20(sp)
 40062d0:	dd000415 	stw	r20,16(sp)
 40062d4:	3825883a 	mov	r18,r7
 40062d8:	3027883a 	mov	r19,r6
 40062dc:	40007ec0 	call	40007ec <__divsi3>
 40062e0:	00c00044 	movi	r3,1
 40062e4:	000b883a 	mov	r5,zero
 40062e8:	1880030e 	bge	r3,r2,40062f8 <__s2b+0x54>
 40062ec:	18c7883a 	add	r3,r3,r3
 40062f0:	29400044 	addi	r5,r5,1
 40062f4:	18bffd16 	blt	r3,r2,40062ec <__ram_exceptions_end+0xfac02160>
 40062f8:	8809883a 	mov	r4,r17
 40062fc:	40060b40 	call	40060b4 <_Balloc>
 4006300:	d8c00717 	ldw	r3,28(sp)
 4006304:	10c00515 	stw	r3,20(r2)
 4006308:	00c00044 	movi	r3,1
 400630c:	10c00415 	stw	r3,16(r2)
 4006310:	00c00244 	movi	r3,9
 4006314:	1cc0210e 	bge	r3,r19,400639c <__s2b+0xf8>
 4006318:	80eb883a 	add	r21,r16,r3
 400631c:	a829883a 	mov	r20,r21
 4006320:	84e1883a 	add	r16,r16,r19
 4006324:	a1c00007 	ldb	r7,0(r20)
 4006328:	01800284 	movi	r6,10
 400632c:	a5000044 	addi	r20,r20,1
 4006330:	100b883a 	mov	r5,r2
 4006334:	39fff404 	addi	r7,r7,-48
 4006338:	8809883a 	mov	r4,r17
 400633c:	40061840 	call	4006184 <__multadd>
 4006340:	a43ff81e 	bne	r20,r16,4006324 <__ram_exceptions_end+0xfac02198>
 4006344:	ace1883a 	add	r16,r21,r19
 4006348:	843ffe04 	addi	r16,r16,-8
 400634c:	9c800a0e 	bge	r19,r18,4006378 <__s2b+0xd4>
 4006350:	94e5c83a 	sub	r18,r18,r19
 4006354:	84a5883a 	add	r18,r16,r18
 4006358:	81c00007 	ldb	r7,0(r16)
 400635c:	01800284 	movi	r6,10
 4006360:	84000044 	addi	r16,r16,1
 4006364:	100b883a 	mov	r5,r2
 4006368:	39fff404 	addi	r7,r7,-48
 400636c:	8809883a 	mov	r4,r17
 4006370:	40061840 	call	4006184 <__multadd>
 4006374:	84bff81e 	bne	r16,r18,4006358 <__ram_exceptions_end+0xfac021cc>
 4006378:	dfc00617 	ldw	ra,24(sp)
 400637c:	dd400517 	ldw	r21,20(sp)
 4006380:	dd000417 	ldw	r20,16(sp)
 4006384:	dcc00317 	ldw	r19,12(sp)
 4006388:	dc800217 	ldw	r18,8(sp)
 400638c:	dc400117 	ldw	r17,4(sp)
 4006390:	dc000017 	ldw	r16,0(sp)
 4006394:	dec00704 	addi	sp,sp,28
 4006398:	f800283a 	ret
 400639c:	84000284 	addi	r16,r16,10
 40063a0:	1827883a 	mov	r19,r3
 40063a4:	003fe906 	br	400634c <__ram_exceptions_end+0xfac021c0>

040063a8 <__hi0bits>:
 40063a8:	20bfffec 	andhi	r2,r4,65535
 40063ac:	1000141e 	bne	r2,zero,4006400 <__hi0bits+0x58>
 40063b0:	2008943a 	slli	r4,r4,16
 40063b4:	00800404 	movi	r2,16
 40063b8:	20ffc02c 	andhi	r3,r4,65280
 40063bc:	1800021e 	bne	r3,zero,40063c8 <__hi0bits+0x20>
 40063c0:	2008923a 	slli	r4,r4,8
 40063c4:	10800204 	addi	r2,r2,8
 40063c8:	20fc002c 	andhi	r3,r4,61440
 40063cc:	1800021e 	bne	r3,zero,40063d8 <__hi0bits+0x30>
 40063d0:	2008913a 	slli	r4,r4,4
 40063d4:	10800104 	addi	r2,r2,4
 40063d8:	20f0002c 	andhi	r3,r4,49152
 40063dc:	1800031e 	bne	r3,zero,40063ec <__hi0bits+0x44>
 40063e0:	2109883a 	add	r4,r4,r4
 40063e4:	10800084 	addi	r2,r2,2
 40063e8:	2109883a 	add	r4,r4,r4
 40063ec:	20000316 	blt	r4,zero,40063fc <__hi0bits+0x54>
 40063f0:	2110002c 	andhi	r4,r4,16384
 40063f4:	2000041e 	bne	r4,zero,4006408 <__hi0bits+0x60>
 40063f8:	00800804 	movi	r2,32
 40063fc:	f800283a 	ret
 4006400:	0005883a 	mov	r2,zero
 4006404:	003fec06 	br	40063b8 <__ram_exceptions_end+0xfac0222c>
 4006408:	10800044 	addi	r2,r2,1
 400640c:	f800283a 	ret

04006410 <__lo0bits>:
 4006410:	20c00017 	ldw	r3,0(r4)
 4006414:	188001cc 	andi	r2,r3,7
 4006418:	10000826 	beq	r2,zero,400643c <__lo0bits+0x2c>
 400641c:	1880004c 	andi	r2,r3,1
 4006420:	1000211e 	bne	r2,zero,40064a8 <__lo0bits+0x98>
 4006424:	1880008c 	andi	r2,r3,2
 4006428:	1000211e 	bne	r2,zero,40064b0 <__lo0bits+0xa0>
 400642c:	1806d0ba 	srli	r3,r3,2
 4006430:	00800084 	movi	r2,2
 4006434:	20c00015 	stw	r3,0(r4)
 4006438:	f800283a 	ret
 400643c:	18bfffcc 	andi	r2,r3,65535
 4006440:	10001326 	beq	r2,zero,4006490 <__lo0bits+0x80>
 4006444:	0005883a 	mov	r2,zero
 4006448:	19403fcc 	andi	r5,r3,255
 400644c:	2800021e 	bne	r5,zero,4006458 <__lo0bits+0x48>
 4006450:	1806d23a 	srli	r3,r3,8
 4006454:	10800204 	addi	r2,r2,8
 4006458:	194003cc 	andi	r5,r3,15
 400645c:	2800021e 	bne	r5,zero,4006468 <__lo0bits+0x58>
 4006460:	1806d13a 	srli	r3,r3,4
 4006464:	10800104 	addi	r2,r2,4
 4006468:	194000cc 	andi	r5,r3,3
 400646c:	2800021e 	bne	r5,zero,4006478 <__lo0bits+0x68>
 4006470:	1806d0ba 	srli	r3,r3,2
 4006474:	10800084 	addi	r2,r2,2
 4006478:	1940004c 	andi	r5,r3,1
 400647c:	2800081e 	bne	r5,zero,40064a0 <__lo0bits+0x90>
 4006480:	1806d07a 	srli	r3,r3,1
 4006484:	1800051e 	bne	r3,zero,400649c <__lo0bits+0x8c>
 4006488:	00800804 	movi	r2,32
 400648c:	f800283a 	ret
 4006490:	1806d43a 	srli	r3,r3,16
 4006494:	00800404 	movi	r2,16
 4006498:	003feb06 	br	4006448 <__ram_exceptions_end+0xfac022bc>
 400649c:	10800044 	addi	r2,r2,1
 40064a0:	20c00015 	stw	r3,0(r4)
 40064a4:	f800283a 	ret
 40064a8:	0005883a 	mov	r2,zero
 40064ac:	f800283a 	ret
 40064b0:	1806d07a 	srli	r3,r3,1
 40064b4:	00800044 	movi	r2,1
 40064b8:	20c00015 	stw	r3,0(r4)
 40064bc:	f800283a 	ret

040064c0 <__i2b>:
 40064c0:	defffd04 	addi	sp,sp,-12
 40064c4:	dc000015 	stw	r16,0(sp)
 40064c8:	04000044 	movi	r16,1
 40064cc:	dc400115 	stw	r17,4(sp)
 40064d0:	2823883a 	mov	r17,r5
 40064d4:	800b883a 	mov	r5,r16
 40064d8:	dfc00215 	stw	ra,8(sp)
 40064dc:	40060b40 	call	40060b4 <_Balloc>
 40064e0:	14400515 	stw	r17,20(r2)
 40064e4:	14000415 	stw	r16,16(r2)
 40064e8:	dfc00217 	ldw	ra,8(sp)
 40064ec:	dc400117 	ldw	r17,4(sp)
 40064f0:	dc000017 	ldw	r16,0(sp)
 40064f4:	dec00304 	addi	sp,sp,12
 40064f8:	f800283a 	ret

040064fc <__multiply>:
 40064fc:	defffa04 	addi	sp,sp,-24
 4006500:	dcc00315 	stw	r19,12(sp)
 4006504:	dc800215 	stw	r18,8(sp)
 4006508:	34c00417 	ldw	r19,16(r6)
 400650c:	2c800417 	ldw	r18,16(r5)
 4006510:	dd000415 	stw	r20,16(sp)
 4006514:	dc400115 	stw	r17,4(sp)
 4006518:	dfc00515 	stw	ra,20(sp)
 400651c:	dc000015 	stw	r16,0(sp)
 4006520:	2829883a 	mov	r20,r5
 4006524:	3023883a 	mov	r17,r6
 4006528:	94c0050e 	bge	r18,r19,4006540 <__multiply+0x44>
 400652c:	9007883a 	mov	r3,r18
 4006530:	3029883a 	mov	r20,r6
 4006534:	9825883a 	mov	r18,r19
 4006538:	2823883a 	mov	r17,r5
 400653c:	1827883a 	mov	r19,r3
 4006540:	a0800217 	ldw	r2,8(r20)
 4006544:	94e1883a 	add	r16,r18,r19
 4006548:	a1400117 	ldw	r5,4(r20)
 400654c:	1400010e 	bge	r2,r16,4006554 <__multiply+0x58>
 4006550:	29400044 	addi	r5,r5,1
 4006554:	40060b40 	call	40060b4 <_Balloc>
 4006558:	8415883a 	add	r10,r16,r16
 400655c:	12c00504 	addi	r11,r2,20
 4006560:	5295883a 	add	r10,r10,r10
 4006564:	5a95883a 	add	r10,r11,r10
 4006568:	5807883a 	mov	r3,r11
 400656c:	5a80032e 	bgeu	r11,r10,400657c <__multiply+0x80>
 4006570:	18000015 	stw	zero,0(r3)
 4006574:	18c00104 	addi	r3,r3,4
 4006578:	1abffd36 	bltu	r3,r10,4006570 <__ram_exceptions_end+0xfac023e4>
 400657c:	9ce7883a 	add	r19,r19,r19
 4006580:	94a5883a 	add	r18,r18,r18
 4006584:	89800504 	addi	r6,r17,20
 4006588:	9ce7883a 	add	r19,r19,r19
 400658c:	a3400504 	addi	r13,r20,20
 4006590:	94a5883a 	add	r18,r18,r18
 4006594:	34d9883a 	add	r12,r6,r19
 4006598:	6c93883a 	add	r9,r13,r18
 400659c:	3300422e 	bgeu	r6,r12,40066a8 <__multiply+0x1ac>
 40065a0:	37c00017 	ldw	ra,0(r6)
 40065a4:	fbffffcc 	andi	r15,ra,65535
 40065a8:	78001b26 	beq	r15,zero,4006618 <__multiply+0x11c>
 40065ac:	5811883a 	mov	r8,r11
 40065b0:	681d883a 	mov	r14,r13
 40065b4:	000f883a 	mov	r7,zero
 40065b8:	71000017 	ldw	r4,0(r14)
 40065bc:	40c00017 	ldw	r3,0(r8)
 40065c0:	73800104 	addi	r14,r14,4
 40065c4:	217fffcc 	andi	r5,r4,65535
 40065c8:	2bcb383a 	mul	r5,r5,r15
 40065cc:	2008d43a 	srli	r4,r4,16
 40065d0:	1c7fffcc 	andi	r17,r3,65535
 40065d4:	2c4b883a 	add	r5,r5,r17
 40065d8:	29cb883a 	add	r5,r5,r7
 40065dc:	23c9383a 	mul	r4,r4,r15
 40065e0:	1806d43a 	srli	r3,r3,16
 40065e4:	280ed43a 	srli	r7,r5,16
 40065e8:	297fffcc 	andi	r5,r5,65535
 40065ec:	20c7883a 	add	r3,r4,r3
 40065f0:	19c7883a 	add	r3,r3,r7
 40065f4:	1808943a 	slli	r4,r3,16
 40065f8:	4023883a 	mov	r17,r8
 40065fc:	180ed43a 	srli	r7,r3,16
 4006600:	214ab03a 	or	r5,r4,r5
 4006604:	41400015 	stw	r5,0(r8)
 4006608:	42000104 	addi	r8,r8,4
 400660c:	727fea36 	bltu	r14,r9,40065b8 <__ram_exceptions_end+0xfac0242c>
 4006610:	89c00115 	stw	r7,4(r17)
 4006614:	37c00017 	ldw	ra,0(r6)
 4006618:	f83ed43a 	srli	ra,ra,16
 400661c:	f8001f26 	beq	ra,zero,400669c <__multiply+0x1a0>
 4006620:	58c00017 	ldw	r3,0(r11)
 4006624:	681d883a 	mov	r14,r13
 4006628:	581f883a 	mov	r15,r11
 400662c:	1811883a 	mov	r8,r3
 4006630:	5825883a 	mov	r18,r11
 4006634:	000f883a 	mov	r7,zero
 4006638:	00000106 	br	4006640 <__multiply+0x144>
 400663c:	8825883a 	mov	r18,r17
 4006640:	7140000b 	ldhu	r5,0(r14)
 4006644:	4010d43a 	srli	r8,r8,16
 4006648:	193fffcc 	andi	r4,r3,65535
 400664c:	2fcb383a 	mul	r5,r5,ra
 4006650:	7bc00104 	addi	r15,r15,4
 4006654:	73800104 	addi	r14,r14,4
 4006658:	2a0b883a 	add	r5,r5,r8
 400665c:	29cb883a 	add	r5,r5,r7
 4006660:	2806943a 	slli	r3,r5,16
 4006664:	94400104 	addi	r17,r18,4
 4006668:	280ad43a 	srli	r5,r5,16
 400666c:	1908b03a 	or	r4,r3,r4
 4006670:	793fff15 	stw	r4,-4(r15)
 4006674:	70ffff17 	ldw	r3,-4(r14)
 4006678:	8a000017 	ldw	r8,0(r17)
 400667c:	1806d43a 	srli	r3,r3,16
 4006680:	413fffcc 	andi	r4,r8,65535
 4006684:	1fc7383a 	mul	r3,r3,ra
 4006688:	1907883a 	add	r3,r3,r4
 400668c:	1947883a 	add	r3,r3,r5
 4006690:	180ed43a 	srli	r7,r3,16
 4006694:	727fe936 	bltu	r14,r9,400663c <__ram_exceptions_end+0xfac024b0>
 4006698:	90c00115 	stw	r3,4(r18)
 400669c:	31800104 	addi	r6,r6,4
 40066a0:	5ac00104 	addi	r11,r11,4
 40066a4:	333fbe36 	bltu	r6,r12,40065a0 <__ram_exceptions_end+0xfac02414>
 40066a8:	0400090e 	bge	zero,r16,40066d0 <__multiply+0x1d4>
 40066ac:	50ffff17 	ldw	r3,-4(r10)
 40066b0:	52bfff04 	addi	r10,r10,-4
 40066b4:	18000326 	beq	r3,zero,40066c4 <__multiply+0x1c8>
 40066b8:	00000506 	br	40066d0 <__multiply+0x1d4>
 40066bc:	50c00017 	ldw	r3,0(r10)
 40066c0:	1800031e 	bne	r3,zero,40066d0 <__multiply+0x1d4>
 40066c4:	843fffc4 	addi	r16,r16,-1
 40066c8:	52bfff04 	addi	r10,r10,-4
 40066cc:	803ffb1e 	bne	r16,zero,40066bc <__ram_exceptions_end+0xfac02530>
 40066d0:	14000415 	stw	r16,16(r2)
 40066d4:	dfc00517 	ldw	ra,20(sp)
 40066d8:	dd000417 	ldw	r20,16(sp)
 40066dc:	dcc00317 	ldw	r19,12(sp)
 40066e0:	dc800217 	ldw	r18,8(sp)
 40066e4:	dc400117 	ldw	r17,4(sp)
 40066e8:	dc000017 	ldw	r16,0(sp)
 40066ec:	dec00604 	addi	sp,sp,24
 40066f0:	f800283a 	ret

040066f4 <__pow5mult>:
 40066f4:	defffa04 	addi	sp,sp,-24
 40066f8:	dcc00315 	stw	r19,12(sp)
 40066fc:	dc000015 	stw	r16,0(sp)
 4006700:	dfc00515 	stw	ra,20(sp)
 4006704:	dd000415 	stw	r20,16(sp)
 4006708:	dc800215 	stw	r18,8(sp)
 400670c:	dc400115 	stw	r17,4(sp)
 4006710:	308000cc 	andi	r2,r6,3
 4006714:	3021883a 	mov	r16,r6
 4006718:	2027883a 	mov	r19,r4
 400671c:	10002f1e 	bne	r2,zero,40067dc <__pow5mult+0xe8>
 4006720:	2825883a 	mov	r18,r5
 4006724:	8021d0ba 	srai	r16,r16,2
 4006728:	80001a26 	beq	r16,zero,4006794 <__pow5mult+0xa0>
 400672c:	9c401217 	ldw	r17,72(r19)
 4006730:	8800061e 	bne	r17,zero,400674c <__pow5mult+0x58>
 4006734:	00003406 	br	4006808 <__pow5mult+0x114>
 4006738:	8021d07a 	srai	r16,r16,1
 400673c:	80001526 	beq	r16,zero,4006794 <__pow5mult+0xa0>
 4006740:	88800017 	ldw	r2,0(r17)
 4006744:	10001c26 	beq	r2,zero,40067b8 <__pow5mult+0xc4>
 4006748:	1023883a 	mov	r17,r2
 400674c:	8080004c 	andi	r2,r16,1
 4006750:	103ff926 	beq	r2,zero,4006738 <__ram_exceptions_end+0xfac025ac>
 4006754:	880d883a 	mov	r6,r17
 4006758:	900b883a 	mov	r5,r18
 400675c:	9809883a 	mov	r4,r19
 4006760:	40064fc0 	call	40064fc <__multiply>
 4006764:	90001b26 	beq	r18,zero,40067d4 <__pow5mult+0xe0>
 4006768:	91000117 	ldw	r4,4(r18)
 400676c:	98c01317 	ldw	r3,76(r19)
 4006770:	8021d07a 	srai	r16,r16,1
 4006774:	2109883a 	add	r4,r4,r4
 4006778:	2109883a 	add	r4,r4,r4
 400677c:	1907883a 	add	r3,r3,r4
 4006780:	19000017 	ldw	r4,0(r3)
 4006784:	91000015 	stw	r4,0(r18)
 4006788:	1c800015 	stw	r18,0(r3)
 400678c:	1025883a 	mov	r18,r2
 4006790:	803feb1e 	bne	r16,zero,4006740 <__ram_exceptions_end+0xfac025b4>
 4006794:	9005883a 	mov	r2,r18
 4006798:	dfc00517 	ldw	ra,20(sp)
 400679c:	dd000417 	ldw	r20,16(sp)
 40067a0:	dcc00317 	ldw	r19,12(sp)
 40067a4:	dc800217 	ldw	r18,8(sp)
 40067a8:	dc400117 	ldw	r17,4(sp)
 40067ac:	dc000017 	ldw	r16,0(sp)
 40067b0:	dec00604 	addi	sp,sp,24
 40067b4:	f800283a 	ret
 40067b8:	880d883a 	mov	r6,r17
 40067bc:	880b883a 	mov	r5,r17
 40067c0:	9809883a 	mov	r4,r19
 40067c4:	40064fc0 	call	40064fc <__multiply>
 40067c8:	88800015 	stw	r2,0(r17)
 40067cc:	10000015 	stw	zero,0(r2)
 40067d0:	003fdd06 	br	4006748 <__ram_exceptions_end+0xfac025bc>
 40067d4:	1025883a 	mov	r18,r2
 40067d8:	003fd706 	br	4006738 <__ram_exceptions_end+0xfac025ac>
 40067dc:	10bfffc4 	addi	r2,r2,-1
 40067e0:	1085883a 	add	r2,r2,r2
 40067e4:	00c10074 	movhi	r3,1025
 40067e8:	18fec304 	addi	r3,r3,-1268
 40067ec:	1085883a 	add	r2,r2,r2
 40067f0:	1885883a 	add	r2,r3,r2
 40067f4:	11800017 	ldw	r6,0(r2)
 40067f8:	000f883a 	mov	r7,zero
 40067fc:	40061840 	call	4006184 <__multadd>
 4006800:	1025883a 	mov	r18,r2
 4006804:	003fc706 	br	4006724 <__ram_exceptions_end+0xfac02598>
 4006808:	05000044 	movi	r20,1
 400680c:	a00b883a 	mov	r5,r20
 4006810:	9809883a 	mov	r4,r19
 4006814:	40060b40 	call	40060b4 <_Balloc>
 4006818:	1023883a 	mov	r17,r2
 400681c:	00809c44 	movi	r2,625
 4006820:	88800515 	stw	r2,20(r17)
 4006824:	8d000415 	stw	r20,16(r17)
 4006828:	9c401215 	stw	r17,72(r19)
 400682c:	88000015 	stw	zero,0(r17)
 4006830:	003fc606 	br	400674c <__ram_exceptions_end+0xfac025c0>

04006834 <__lshift>:
 4006834:	defff904 	addi	sp,sp,-28
 4006838:	dd400515 	stw	r21,20(sp)
 400683c:	dcc00315 	stw	r19,12(sp)
 4006840:	302bd17a 	srai	r21,r6,5
 4006844:	2cc00417 	ldw	r19,16(r5)
 4006848:	28800217 	ldw	r2,8(r5)
 400684c:	dd000415 	stw	r20,16(sp)
 4006850:	ace7883a 	add	r19,r21,r19
 4006854:	dc800215 	stw	r18,8(sp)
 4006858:	dc400115 	stw	r17,4(sp)
 400685c:	dc000015 	stw	r16,0(sp)
 4006860:	dfc00615 	stw	ra,24(sp)
 4006864:	9c000044 	addi	r16,r19,1
 4006868:	2823883a 	mov	r17,r5
 400686c:	3029883a 	mov	r20,r6
 4006870:	2025883a 	mov	r18,r4
 4006874:	29400117 	ldw	r5,4(r5)
 4006878:	1400030e 	bge	r2,r16,4006888 <__lshift+0x54>
 400687c:	1085883a 	add	r2,r2,r2
 4006880:	29400044 	addi	r5,r5,1
 4006884:	143ffd16 	blt	r2,r16,400687c <__ram_exceptions_end+0xfac026f0>
 4006888:	9009883a 	mov	r4,r18
 400688c:	40060b40 	call	40060b4 <_Balloc>
 4006890:	10c00504 	addi	r3,r2,20
 4006894:	0540070e 	bge	zero,r21,40068b4 <__lshift+0x80>
 4006898:	ad6b883a 	add	r21,r21,r21
 400689c:	ad6b883a 	add	r21,r21,r21
 40068a0:	1809883a 	mov	r4,r3
 40068a4:	1d47883a 	add	r3,r3,r21
 40068a8:	20000015 	stw	zero,0(r4)
 40068ac:	21000104 	addi	r4,r4,4
 40068b0:	193ffd1e 	bne	r3,r4,40068a8 <__ram_exceptions_end+0xfac0271c>
 40068b4:	8a000417 	ldw	r8,16(r17)
 40068b8:	89000504 	addi	r4,r17,20
 40068bc:	a18007cc 	andi	r6,r20,31
 40068c0:	4211883a 	add	r8,r8,r8
 40068c4:	4211883a 	add	r8,r8,r8
 40068c8:	2211883a 	add	r8,r4,r8
 40068cc:	30002326 	beq	r6,zero,400695c <__lshift+0x128>
 40068d0:	02400804 	movi	r9,32
 40068d4:	4993c83a 	sub	r9,r9,r6
 40068d8:	000b883a 	mov	r5,zero
 40068dc:	21c00017 	ldw	r7,0(r4)
 40068e0:	1815883a 	mov	r10,r3
 40068e4:	18c00104 	addi	r3,r3,4
 40068e8:	398e983a 	sll	r7,r7,r6
 40068ec:	21000104 	addi	r4,r4,4
 40068f0:	394ab03a 	or	r5,r7,r5
 40068f4:	197fff15 	stw	r5,-4(r3)
 40068f8:	217fff17 	ldw	r5,-4(r4)
 40068fc:	2a4ad83a 	srl	r5,r5,r9
 4006900:	223ff636 	bltu	r4,r8,40068dc <__ram_exceptions_end+0xfac02750>
 4006904:	51400115 	stw	r5,4(r10)
 4006908:	28001a1e 	bne	r5,zero,4006974 <__lshift+0x140>
 400690c:	843fffc4 	addi	r16,r16,-1
 4006910:	14000415 	stw	r16,16(r2)
 4006914:	88000826 	beq	r17,zero,4006938 <__lshift+0x104>
 4006918:	89000117 	ldw	r4,4(r17)
 400691c:	90c01317 	ldw	r3,76(r18)
 4006920:	2109883a 	add	r4,r4,r4
 4006924:	2109883a 	add	r4,r4,r4
 4006928:	1907883a 	add	r3,r3,r4
 400692c:	19000017 	ldw	r4,0(r3)
 4006930:	89000015 	stw	r4,0(r17)
 4006934:	1c400015 	stw	r17,0(r3)
 4006938:	dfc00617 	ldw	ra,24(sp)
 400693c:	dd400517 	ldw	r21,20(sp)
 4006940:	dd000417 	ldw	r20,16(sp)
 4006944:	dcc00317 	ldw	r19,12(sp)
 4006948:	dc800217 	ldw	r18,8(sp)
 400694c:	dc400117 	ldw	r17,4(sp)
 4006950:	dc000017 	ldw	r16,0(sp)
 4006954:	dec00704 	addi	sp,sp,28
 4006958:	f800283a 	ret
 400695c:	21400017 	ldw	r5,0(r4)
 4006960:	18c00104 	addi	r3,r3,4
 4006964:	21000104 	addi	r4,r4,4
 4006968:	197fff15 	stw	r5,-4(r3)
 400696c:	223ffb36 	bltu	r4,r8,400695c <__ram_exceptions_end+0xfac027d0>
 4006970:	003fe606 	br	400690c <__ram_exceptions_end+0xfac02780>
 4006974:	9c000084 	addi	r16,r19,2
 4006978:	003fe406 	br	400690c <__ram_exceptions_end+0xfac02780>

0400697c <__mcmp>:
 400697c:	20800417 	ldw	r2,16(r4)
 4006980:	28c00417 	ldw	r3,16(r5)
 4006984:	10c5c83a 	sub	r2,r2,r3
 4006988:	1000111e 	bne	r2,zero,40069d0 <__mcmp+0x54>
 400698c:	18c7883a 	add	r3,r3,r3
 4006990:	18c7883a 	add	r3,r3,r3
 4006994:	21000504 	addi	r4,r4,20
 4006998:	29400504 	addi	r5,r5,20
 400699c:	20c5883a 	add	r2,r4,r3
 40069a0:	28cb883a 	add	r5,r5,r3
 40069a4:	00000106 	br	40069ac <__mcmp+0x30>
 40069a8:	20800a2e 	bgeu	r4,r2,40069d4 <__mcmp+0x58>
 40069ac:	10bfff04 	addi	r2,r2,-4
 40069b0:	297fff04 	addi	r5,r5,-4
 40069b4:	11800017 	ldw	r6,0(r2)
 40069b8:	28c00017 	ldw	r3,0(r5)
 40069bc:	30fffa26 	beq	r6,r3,40069a8 <__ram_exceptions_end+0xfac0281c>
 40069c0:	30c00236 	bltu	r6,r3,40069cc <__mcmp+0x50>
 40069c4:	00800044 	movi	r2,1
 40069c8:	f800283a 	ret
 40069cc:	00bfffc4 	movi	r2,-1
 40069d0:	f800283a 	ret
 40069d4:	0005883a 	mov	r2,zero
 40069d8:	f800283a 	ret

040069dc <__mdiff>:
 40069dc:	28c00417 	ldw	r3,16(r5)
 40069e0:	30800417 	ldw	r2,16(r6)
 40069e4:	defffa04 	addi	sp,sp,-24
 40069e8:	dcc00315 	stw	r19,12(sp)
 40069ec:	dc800215 	stw	r18,8(sp)
 40069f0:	dfc00515 	stw	ra,20(sp)
 40069f4:	dd000415 	stw	r20,16(sp)
 40069f8:	dc400115 	stw	r17,4(sp)
 40069fc:	dc000015 	stw	r16,0(sp)
 4006a00:	1887c83a 	sub	r3,r3,r2
 4006a04:	2825883a 	mov	r18,r5
 4006a08:	3027883a 	mov	r19,r6
 4006a0c:	1800141e 	bne	r3,zero,4006a60 <__mdiff+0x84>
 4006a10:	1085883a 	add	r2,r2,r2
 4006a14:	1085883a 	add	r2,r2,r2
 4006a18:	2a000504 	addi	r8,r5,20
 4006a1c:	34000504 	addi	r16,r6,20
 4006a20:	4087883a 	add	r3,r8,r2
 4006a24:	8085883a 	add	r2,r16,r2
 4006a28:	00000106 	br	4006a30 <__mdiff+0x54>
 4006a2c:	40c0592e 	bgeu	r8,r3,4006b94 <__mdiff+0x1b8>
 4006a30:	18ffff04 	addi	r3,r3,-4
 4006a34:	10bfff04 	addi	r2,r2,-4
 4006a38:	19c00017 	ldw	r7,0(r3)
 4006a3c:	11400017 	ldw	r5,0(r2)
 4006a40:	397ffa26 	beq	r7,r5,4006a2c <__ram_exceptions_end+0xfac028a0>
 4006a44:	3940592e 	bgeu	r7,r5,4006bac <__mdiff+0x1d0>
 4006a48:	9005883a 	mov	r2,r18
 4006a4c:	4023883a 	mov	r17,r8
 4006a50:	9825883a 	mov	r18,r19
 4006a54:	05000044 	movi	r20,1
 4006a58:	1027883a 	mov	r19,r2
 4006a5c:	00000406 	br	4006a70 <__mdiff+0x94>
 4006a60:	18005616 	blt	r3,zero,4006bbc <__mdiff+0x1e0>
 4006a64:	34400504 	addi	r17,r6,20
 4006a68:	2c000504 	addi	r16,r5,20
 4006a6c:	0029883a 	mov	r20,zero
 4006a70:	91400117 	ldw	r5,4(r18)
 4006a74:	40060b40 	call	40060b4 <_Balloc>
 4006a78:	92400417 	ldw	r9,16(r18)
 4006a7c:	9b000417 	ldw	r12,16(r19)
 4006a80:	12c00504 	addi	r11,r2,20
 4006a84:	4a51883a 	add	r8,r9,r9
 4006a88:	6319883a 	add	r12,r12,r12
 4006a8c:	4211883a 	add	r8,r8,r8
 4006a90:	6319883a 	add	r12,r12,r12
 4006a94:	15000315 	stw	r20,12(r2)
 4006a98:	8211883a 	add	r8,r16,r8
 4006a9c:	8b19883a 	add	r12,r17,r12
 4006aa0:	0007883a 	mov	r3,zero
 4006aa4:	81400017 	ldw	r5,0(r16)
 4006aa8:	89c00017 	ldw	r7,0(r17)
 4006aac:	59800104 	addi	r6,r11,4
 4006ab0:	293fffcc 	andi	r4,r5,65535
 4006ab4:	20c7883a 	add	r3,r4,r3
 4006ab8:	393fffcc 	andi	r4,r7,65535
 4006abc:	1909c83a 	sub	r4,r3,r4
 4006ac0:	280ad43a 	srli	r5,r5,16
 4006ac4:	380ed43a 	srli	r7,r7,16
 4006ac8:	2007d43a 	srai	r3,r4,16
 4006acc:	213fffcc 	andi	r4,r4,65535
 4006ad0:	29cbc83a 	sub	r5,r5,r7
 4006ad4:	28c7883a 	add	r3,r5,r3
 4006ad8:	180a943a 	slli	r5,r3,16
 4006adc:	8c400104 	addi	r17,r17,4
 4006ae0:	84000104 	addi	r16,r16,4
 4006ae4:	2908b03a 	or	r4,r5,r4
 4006ae8:	59000015 	stw	r4,0(r11)
 4006aec:	1807d43a 	srai	r3,r3,16
 4006af0:	3015883a 	mov	r10,r6
 4006af4:	3017883a 	mov	r11,r6
 4006af8:	8b3fea36 	bltu	r17,r12,4006aa4 <__ram_exceptions_end+0xfac02918>
 4006afc:	8200162e 	bgeu	r16,r8,4006b58 <__mdiff+0x17c>
 4006b00:	8017883a 	mov	r11,r16
 4006b04:	59400017 	ldw	r5,0(r11)
 4006b08:	31800104 	addi	r6,r6,4
 4006b0c:	5ac00104 	addi	r11,r11,4
 4006b10:	293fffcc 	andi	r4,r5,65535
 4006b14:	20c7883a 	add	r3,r4,r3
 4006b18:	280ed43a 	srli	r7,r5,16
 4006b1c:	180bd43a 	srai	r5,r3,16
 4006b20:	193fffcc 	andi	r4,r3,65535
 4006b24:	3947883a 	add	r3,r7,r5
 4006b28:	180a943a 	slli	r5,r3,16
 4006b2c:	1807d43a 	srai	r3,r3,16
 4006b30:	2908b03a 	or	r4,r5,r4
 4006b34:	313fff15 	stw	r4,-4(r6)
 4006b38:	5a3ff236 	bltu	r11,r8,4006b04 <__ram_exceptions_end+0xfac02978>
 4006b3c:	0406303a 	nor	r3,zero,r16
 4006b40:	1a07883a 	add	r3,r3,r8
 4006b44:	1806d0ba 	srli	r3,r3,2
 4006b48:	18c00044 	addi	r3,r3,1
 4006b4c:	18c7883a 	add	r3,r3,r3
 4006b50:	18c7883a 	add	r3,r3,r3
 4006b54:	50d5883a 	add	r10,r10,r3
 4006b58:	50ffff04 	addi	r3,r10,-4
 4006b5c:	2000041e 	bne	r4,zero,4006b70 <__mdiff+0x194>
 4006b60:	18ffff04 	addi	r3,r3,-4
 4006b64:	19000017 	ldw	r4,0(r3)
 4006b68:	4a7fffc4 	addi	r9,r9,-1
 4006b6c:	203ffc26 	beq	r4,zero,4006b60 <__ram_exceptions_end+0xfac029d4>
 4006b70:	12400415 	stw	r9,16(r2)
 4006b74:	dfc00517 	ldw	ra,20(sp)
 4006b78:	dd000417 	ldw	r20,16(sp)
 4006b7c:	dcc00317 	ldw	r19,12(sp)
 4006b80:	dc800217 	ldw	r18,8(sp)
 4006b84:	dc400117 	ldw	r17,4(sp)
 4006b88:	dc000017 	ldw	r16,0(sp)
 4006b8c:	dec00604 	addi	sp,sp,24
 4006b90:	f800283a 	ret
 4006b94:	000b883a 	mov	r5,zero
 4006b98:	40060b40 	call	40060b4 <_Balloc>
 4006b9c:	00c00044 	movi	r3,1
 4006ba0:	10c00415 	stw	r3,16(r2)
 4006ba4:	10000515 	stw	zero,20(r2)
 4006ba8:	003ff206 	br	4006b74 <__ram_exceptions_end+0xfac029e8>
 4006bac:	8023883a 	mov	r17,r16
 4006bb0:	0029883a 	mov	r20,zero
 4006bb4:	4021883a 	mov	r16,r8
 4006bb8:	003fad06 	br	4006a70 <__ram_exceptions_end+0xfac028e4>
 4006bbc:	9005883a 	mov	r2,r18
 4006bc0:	94400504 	addi	r17,r18,20
 4006bc4:	9c000504 	addi	r16,r19,20
 4006bc8:	9825883a 	mov	r18,r19
 4006bcc:	05000044 	movi	r20,1
 4006bd0:	1027883a 	mov	r19,r2
 4006bd4:	003fa606 	br	4006a70 <__ram_exceptions_end+0xfac028e4>

04006bd8 <__ulp>:
 4006bd8:	295ffc2c 	andhi	r5,r5,32752
 4006bdc:	00bf3034 	movhi	r2,64704
 4006be0:	2887883a 	add	r3,r5,r2
 4006be4:	00c0020e 	bge	zero,r3,4006bf0 <__ulp+0x18>
 4006be8:	0005883a 	mov	r2,zero
 4006bec:	f800283a 	ret
 4006bf0:	00c7c83a 	sub	r3,zero,r3
 4006bf4:	1807d53a 	srai	r3,r3,20
 4006bf8:	008004c4 	movi	r2,19
 4006bfc:	10c00b0e 	bge	r2,r3,4006c2c <__ulp+0x54>
 4006c00:	18bffb04 	addi	r2,r3,-20
 4006c04:	01000784 	movi	r4,30
 4006c08:	0007883a 	mov	r3,zero
 4006c0c:	20800516 	blt	r4,r2,4006c24 <__ulp+0x4c>
 4006c10:	010007c4 	movi	r4,31
 4006c14:	2089c83a 	sub	r4,r4,r2
 4006c18:	00800044 	movi	r2,1
 4006c1c:	1104983a 	sll	r2,r2,r4
 4006c20:	f800283a 	ret
 4006c24:	00800044 	movi	r2,1
 4006c28:	f800283a 	ret
 4006c2c:	01400234 	movhi	r5,8
 4006c30:	28c7d83a 	sra	r3,r5,r3
 4006c34:	0005883a 	mov	r2,zero
 4006c38:	f800283a 	ret

04006c3c <__b2d>:
 4006c3c:	defffa04 	addi	sp,sp,-24
 4006c40:	dc000015 	stw	r16,0(sp)
 4006c44:	24000417 	ldw	r16,16(r4)
 4006c48:	dc400115 	stw	r17,4(sp)
 4006c4c:	24400504 	addi	r17,r4,20
 4006c50:	8421883a 	add	r16,r16,r16
 4006c54:	8421883a 	add	r16,r16,r16
 4006c58:	8c21883a 	add	r16,r17,r16
 4006c5c:	dc800215 	stw	r18,8(sp)
 4006c60:	84bfff17 	ldw	r18,-4(r16)
 4006c64:	dd000415 	stw	r20,16(sp)
 4006c68:	dcc00315 	stw	r19,12(sp)
 4006c6c:	9009883a 	mov	r4,r18
 4006c70:	2829883a 	mov	r20,r5
 4006c74:	dfc00515 	stw	ra,20(sp)
 4006c78:	40063a80 	call	40063a8 <__hi0bits>
 4006c7c:	00c00804 	movi	r3,32
 4006c80:	1889c83a 	sub	r4,r3,r2
 4006c84:	a1000015 	stw	r4,0(r20)
 4006c88:	01000284 	movi	r4,10
 4006c8c:	84ffff04 	addi	r19,r16,-4
 4006c90:	20801216 	blt	r4,r2,4006cdc <__b2d+0xa0>
 4006c94:	018002c4 	movi	r6,11
 4006c98:	308dc83a 	sub	r6,r6,r2
 4006c9c:	9186d83a 	srl	r3,r18,r6
 4006ca0:	18cffc34 	orhi	r3,r3,16368
 4006ca4:	8cc0212e 	bgeu	r17,r19,4006d2c <__b2d+0xf0>
 4006ca8:	813ffe17 	ldw	r4,-8(r16)
 4006cac:	218cd83a 	srl	r6,r4,r6
 4006cb0:	10800544 	addi	r2,r2,21
 4006cb4:	9084983a 	sll	r2,r18,r2
 4006cb8:	1184b03a 	or	r2,r2,r6
 4006cbc:	dfc00517 	ldw	ra,20(sp)
 4006cc0:	dd000417 	ldw	r20,16(sp)
 4006cc4:	dcc00317 	ldw	r19,12(sp)
 4006cc8:	dc800217 	ldw	r18,8(sp)
 4006ccc:	dc400117 	ldw	r17,4(sp)
 4006cd0:	dc000017 	ldw	r16,0(sp)
 4006cd4:	dec00604 	addi	sp,sp,24
 4006cd8:	f800283a 	ret
 4006cdc:	8cc00f2e 	bgeu	r17,r19,4006d1c <__b2d+0xe0>
 4006ce0:	117ffd44 	addi	r5,r2,-11
 4006ce4:	80bffe17 	ldw	r2,-8(r16)
 4006ce8:	28000e26 	beq	r5,zero,4006d24 <__b2d+0xe8>
 4006cec:	1949c83a 	sub	r4,r3,r5
 4006cf0:	9164983a 	sll	r18,r18,r5
 4006cf4:	1106d83a 	srl	r3,r2,r4
 4006cf8:	81bffe04 	addi	r6,r16,-8
 4006cfc:	948ffc34 	orhi	r18,r18,16368
 4006d00:	90c6b03a 	or	r3,r18,r3
 4006d04:	89800e2e 	bgeu	r17,r6,4006d40 <__b2d+0x104>
 4006d08:	81bffd17 	ldw	r6,-12(r16)
 4006d0c:	1144983a 	sll	r2,r2,r5
 4006d10:	310ad83a 	srl	r5,r6,r4
 4006d14:	2884b03a 	or	r2,r5,r2
 4006d18:	003fe806 	br	4006cbc <__ram_exceptions_end+0xfac02b30>
 4006d1c:	10bffd44 	addi	r2,r2,-11
 4006d20:	1000041e 	bne	r2,zero,4006d34 <__b2d+0xf8>
 4006d24:	90cffc34 	orhi	r3,r18,16368
 4006d28:	003fe406 	br	4006cbc <__ram_exceptions_end+0xfac02b30>
 4006d2c:	000d883a 	mov	r6,zero
 4006d30:	003fdf06 	br	4006cb0 <__ram_exceptions_end+0xfac02b24>
 4006d34:	90a4983a 	sll	r18,r18,r2
 4006d38:	0005883a 	mov	r2,zero
 4006d3c:	003ff906 	br	4006d24 <__ram_exceptions_end+0xfac02b98>
 4006d40:	1144983a 	sll	r2,r2,r5
 4006d44:	003fdd06 	br	4006cbc <__ram_exceptions_end+0xfac02b30>

04006d48 <__d2b>:
 4006d48:	defff804 	addi	sp,sp,-32
 4006d4c:	dc000215 	stw	r16,8(sp)
 4006d50:	3021883a 	mov	r16,r6
 4006d54:	dc400315 	stw	r17,12(sp)
 4006d58:	8022907a 	slli	r17,r16,1
 4006d5c:	dd000615 	stw	r20,24(sp)
 4006d60:	2829883a 	mov	r20,r5
 4006d64:	01400044 	movi	r5,1
 4006d68:	dcc00515 	stw	r19,20(sp)
 4006d6c:	dc800415 	stw	r18,16(sp)
 4006d70:	dfc00715 	stw	ra,28(sp)
 4006d74:	3825883a 	mov	r18,r7
 4006d78:	8822d57a 	srli	r17,r17,21
 4006d7c:	40060b40 	call	40060b4 <_Balloc>
 4006d80:	1027883a 	mov	r19,r2
 4006d84:	00800434 	movhi	r2,16
 4006d88:	10bfffc4 	addi	r2,r2,-1
 4006d8c:	808c703a 	and	r6,r16,r2
 4006d90:	88000126 	beq	r17,zero,4006d98 <__d2b+0x50>
 4006d94:	31800434 	orhi	r6,r6,16
 4006d98:	d9800015 	stw	r6,0(sp)
 4006d9c:	a0002426 	beq	r20,zero,4006e30 <__d2b+0xe8>
 4006da0:	d9000104 	addi	r4,sp,4
 4006da4:	dd000115 	stw	r20,4(sp)
 4006da8:	40064100 	call	4006410 <__lo0bits>
 4006dac:	d8c00017 	ldw	r3,0(sp)
 4006db0:	10002f1e 	bne	r2,zero,4006e70 <__d2b+0x128>
 4006db4:	d9000117 	ldw	r4,4(sp)
 4006db8:	99000515 	stw	r4,20(r19)
 4006dbc:	1821003a 	cmpeq	r16,r3,zero
 4006dc0:	01000084 	movi	r4,2
 4006dc4:	2421c83a 	sub	r16,r4,r16
 4006dc8:	98c00615 	stw	r3,24(r19)
 4006dcc:	9c000415 	stw	r16,16(r19)
 4006dd0:	88001f1e 	bne	r17,zero,4006e50 <__d2b+0x108>
 4006dd4:	10bef384 	addi	r2,r2,-1074
 4006dd8:	90800015 	stw	r2,0(r18)
 4006ddc:	00900034 	movhi	r2,16384
 4006de0:	10bfffc4 	addi	r2,r2,-1
 4006de4:	8085883a 	add	r2,r16,r2
 4006de8:	1085883a 	add	r2,r2,r2
 4006dec:	1085883a 	add	r2,r2,r2
 4006df0:	9885883a 	add	r2,r19,r2
 4006df4:	11000517 	ldw	r4,20(r2)
 4006df8:	8020917a 	slli	r16,r16,5
 4006dfc:	40063a80 	call	40063a8 <__hi0bits>
 4006e00:	d8c00817 	ldw	r3,32(sp)
 4006e04:	8085c83a 	sub	r2,r16,r2
 4006e08:	18800015 	stw	r2,0(r3)
 4006e0c:	9805883a 	mov	r2,r19
 4006e10:	dfc00717 	ldw	ra,28(sp)
 4006e14:	dd000617 	ldw	r20,24(sp)
 4006e18:	dcc00517 	ldw	r19,20(sp)
 4006e1c:	dc800417 	ldw	r18,16(sp)
 4006e20:	dc400317 	ldw	r17,12(sp)
 4006e24:	dc000217 	ldw	r16,8(sp)
 4006e28:	dec00804 	addi	sp,sp,32
 4006e2c:	f800283a 	ret
 4006e30:	d809883a 	mov	r4,sp
 4006e34:	40064100 	call	4006410 <__lo0bits>
 4006e38:	d8c00017 	ldw	r3,0(sp)
 4006e3c:	04000044 	movi	r16,1
 4006e40:	9c000415 	stw	r16,16(r19)
 4006e44:	98c00515 	stw	r3,20(r19)
 4006e48:	10800804 	addi	r2,r2,32
 4006e4c:	883fe126 	beq	r17,zero,4006dd4 <__ram_exceptions_end+0xfac02c48>
 4006e50:	00c00d44 	movi	r3,53
 4006e54:	8c7ef344 	addi	r17,r17,-1075
 4006e58:	88a3883a 	add	r17,r17,r2
 4006e5c:	1885c83a 	sub	r2,r3,r2
 4006e60:	d8c00817 	ldw	r3,32(sp)
 4006e64:	94400015 	stw	r17,0(r18)
 4006e68:	18800015 	stw	r2,0(r3)
 4006e6c:	003fe706 	br	4006e0c <__ram_exceptions_end+0xfac02c80>
 4006e70:	01000804 	movi	r4,32
 4006e74:	2089c83a 	sub	r4,r4,r2
 4006e78:	1908983a 	sll	r4,r3,r4
 4006e7c:	d9400117 	ldw	r5,4(sp)
 4006e80:	1886d83a 	srl	r3,r3,r2
 4006e84:	2148b03a 	or	r4,r4,r5
 4006e88:	99000515 	stw	r4,20(r19)
 4006e8c:	d8c00015 	stw	r3,0(sp)
 4006e90:	003fca06 	br	4006dbc <__ram_exceptions_end+0xfac02c30>

04006e94 <__ratio>:
 4006e94:	defff904 	addi	sp,sp,-28
 4006e98:	dc400315 	stw	r17,12(sp)
 4006e9c:	2823883a 	mov	r17,r5
 4006ea0:	d9400104 	addi	r5,sp,4
 4006ea4:	dfc00615 	stw	ra,24(sp)
 4006ea8:	dcc00515 	stw	r19,20(sp)
 4006eac:	dc800415 	stw	r18,16(sp)
 4006eb0:	2027883a 	mov	r19,r4
 4006eb4:	dc000215 	stw	r16,8(sp)
 4006eb8:	4006c3c0 	call	4006c3c <__b2d>
 4006ebc:	d80b883a 	mov	r5,sp
 4006ec0:	8809883a 	mov	r4,r17
 4006ec4:	1025883a 	mov	r18,r2
 4006ec8:	1821883a 	mov	r16,r3
 4006ecc:	4006c3c0 	call	4006c3c <__b2d>
 4006ed0:	8a000417 	ldw	r8,16(r17)
 4006ed4:	99000417 	ldw	r4,16(r19)
 4006ed8:	d9400117 	ldw	r5,4(sp)
 4006edc:	2209c83a 	sub	r4,r4,r8
 4006ee0:	2010917a 	slli	r8,r4,5
 4006ee4:	d9000017 	ldw	r4,0(sp)
 4006ee8:	2909c83a 	sub	r4,r5,r4
 4006eec:	4109883a 	add	r4,r8,r4
 4006ef0:	01000e0e 	bge	zero,r4,4006f2c <__ratio+0x98>
 4006ef4:	2008953a 	slli	r4,r4,20
 4006ef8:	2421883a 	add	r16,r4,r16
 4006efc:	100d883a 	mov	r6,r2
 4006f00:	180f883a 	mov	r7,r3
 4006f04:	9009883a 	mov	r4,r18
 4006f08:	800b883a 	mov	r5,r16
 4006f0c:	400b27c0 	call	400b27c <__divdf3>
 4006f10:	dfc00617 	ldw	ra,24(sp)
 4006f14:	dcc00517 	ldw	r19,20(sp)
 4006f18:	dc800417 	ldw	r18,16(sp)
 4006f1c:	dc400317 	ldw	r17,12(sp)
 4006f20:	dc000217 	ldw	r16,8(sp)
 4006f24:	dec00704 	addi	sp,sp,28
 4006f28:	f800283a 	ret
 4006f2c:	2008953a 	slli	r4,r4,20
 4006f30:	1907c83a 	sub	r3,r3,r4
 4006f34:	003ff106 	br	4006efc <__ram_exceptions_end+0xfac02d70>

04006f38 <_mprec_log10>:
 4006f38:	defffe04 	addi	sp,sp,-8
 4006f3c:	dc000015 	stw	r16,0(sp)
 4006f40:	dfc00115 	stw	ra,4(sp)
 4006f44:	008005c4 	movi	r2,23
 4006f48:	2021883a 	mov	r16,r4
 4006f4c:	11000d0e 	bge	r2,r4,4006f84 <_mprec_log10+0x4c>
 4006f50:	0005883a 	mov	r2,zero
 4006f54:	00cffc34 	movhi	r3,16368
 4006f58:	843fffc4 	addi	r16,r16,-1
 4006f5c:	000d883a 	mov	r6,zero
 4006f60:	01d00934 	movhi	r7,16420
 4006f64:	1009883a 	mov	r4,r2
 4006f68:	180b883a 	mov	r5,r3
 4006f6c:	400bdbc0 	call	400bdbc <__muldf3>
 4006f70:	803ff91e 	bne	r16,zero,4006f58 <__ram_exceptions_end+0xfac02dcc>
 4006f74:	dfc00117 	ldw	ra,4(sp)
 4006f78:	dc000017 	ldw	r16,0(sp)
 4006f7c:	dec00204 	addi	sp,sp,8
 4006f80:	f800283a 	ret
 4006f84:	202090fa 	slli	r16,r4,3
 4006f88:	00810074 	movhi	r2,1025
 4006f8c:	10beda04 	addi	r2,r2,-1176
 4006f90:	1421883a 	add	r16,r2,r16
 4006f94:	80800017 	ldw	r2,0(r16)
 4006f98:	80c00117 	ldw	r3,4(r16)
 4006f9c:	dfc00117 	ldw	ra,4(sp)
 4006fa0:	dc000017 	ldw	r16,0(sp)
 4006fa4:	dec00204 	addi	sp,sp,8
 4006fa8:	f800283a 	ret

04006fac <__copybits>:
 4006fac:	297fffc4 	addi	r5,r5,-1
 4006fb0:	280fd17a 	srai	r7,r5,5
 4006fb4:	30c00417 	ldw	r3,16(r6)
 4006fb8:	30800504 	addi	r2,r6,20
 4006fbc:	39c00044 	addi	r7,r7,1
 4006fc0:	18c7883a 	add	r3,r3,r3
 4006fc4:	39cf883a 	add	r7,r7,r7
 4006fc8:	18c7883a 	add	r3,r3,r3
 4006fcc:	39cf883a 	add	r7,r7,r7
 4006fd0:	10c7883a 	add	r3,r2,r3
 4006fd4:	21cf883a 	add	r7,r4,r7
 4006fd8:	10c00d2e 	bgeu	r2,r3,4007010 <__copybits+0x64>
 4006fdc:	200b883a 	mov	r5,r4
 4006fe0:	12000017 	ldw	r8,0(r2)
 4006fe4:	29400104 	addi	r5,r5,4
 4006fe8:	10800104 	addi	r2,r2,4
 4006fec:	2a3fff15 	stw	r8,-4(r5)
 4006ff0:	10fffb36 	bltu	r2,r3,4006fe0 <__ram_exceptions_end+0xfac02e54>
 4006ff4:	1985c83a 	sub	r2,r3,r6
 4006ff8:	10bffac4 	addi	r2,r2,-21
 4006ffc:	1004d0ba 	srli	r2,r2,2
 4007000:	10800044 	addi	r2,r2,1
 4007004:	1085883a 	add	r2,r2,r2
 4007008:	1085883a 	add	r2,r2,r2
 400700c:	2089883a 	add	r4,r4,r2
 4007010:	21c0032e 	bgeu	r4,r7,4007020 <__copybits+0x74>
 4007014:	20000015 	stw	zero,0(r4)
 4007018:	21000104 	addi	r4,r4,4
 400701c:	21fffd36 	bltu	r4,r7,4007014 <__ram_exceptions_end+0xfac02e88>
 4007020:	f800283a 	ret

04007024 <__any_on>:
 4007024:	20c00417 	ldw	r3,16(r4)
 4007028:	2805d17a 	srai	r2,r5,5
 400702c:	21000504 	addi	r4,r4,20
 4007030:	18800d0e 	bge	r3,r2,4007068 <__any_on+0x44>
 4007034:	18c7883a 	add	r3,r3,r3
 4007038:	18c7883a 	add	r3,r3,r3
 400703c:	20c7883a 	add	r3,r4,r3
 4007040:	20c0192e 	bgeu	r4,r3,40070a8 <__any_on+0x84>
 4007044:	18bfff17 	ldw	r2,-4(r3)
 4007048:	18ffff04 	addi	r3,r3,-4
 400704c:	1000041e 	bne	r2,zero,4007060 <__any_on+0x3c>
 4007050:	20c0142e 	bgeu	r4,r3,40070a4 <__any_on+0x80>
 4007054:	18ffff04 	addi	r3,r3,-4
 4007058:	19400017 	ldw	r5,0(r3)
 400705c:	283ffc26 	beq	r5,zero,4007050 <__ram_exceptions_end+0xfac02ec4>
 4007060:	00800044 	movi	r2,1
 4007064:	f800283a 	ret
 4007068:	10c00a0e 	bge	r2,r3,4007094 <__any_on+0x70>
 400706c:	1085883a 	add	r2,r2,r2
 4007070:	1085883a 	add	r2,r2,r2
 4007074:	294007cc 	andi	r5,r5,31
 4007078:	2087883a 	add	r3,r4,r2
 400707c:	283ff026 	beq	r5,zero,4007040 <__ram_exceptions_end+0xfac02eb4>
 4007080:	19800017 	ldw	r6,0(r3)
 4007084:	3144d83a 	srl	r2,r6,r5
 4007088:	114a983a 	sll	r5,r2,r5
 400708c:	317ff41e 	bne	r6,r5,4007060 <__ram_exceptions_end+0xfac02ed4>
 4007090:	003feb06 	br	4007040 <__ram_exceptions_end+0xfac02eb4>
 4007094:	1085883a 	add	r2,r2,r2
 4007098:	1085883a 	add	r2,r2,r2
 400709c:	2087883a 	add	r3,r4,r2
 40070a0:	003fe706 	br	4007040 <__ram_exceptions_end+0xfac02eb4>
 40070a4:	f800283a 	ret
 40070a8:	0005883a 	mov	r2,zero
 40070ac:	f800283a 	ret

040070b0 <__fpclassifyd>:
 40070b0:	00a00034 	movhi	r2,32768
 40070b4:	10bfffc4 	addi	r2,r2,-1
 40070b8:	2884703a 	and	r2,r5,r2
 40070bc:	10000726 	beq	r2,zero,40070dc <__fpclassifyd+0x2c>
 40070c0:	00fffc34 	movhi	r3,65520
 40070c4:	019ff834 	movhi	r6,32736
 40070c8:	28c7883a 	add	r3,r5,r3
 40070cc:	31bfffc4 	addi	r6,r6,-1
 40070d0:	30c00536 	bltu	r6,r3,40070e8 <__fpclassifyd+0x38>
 40070d4:	00800104 	movi	r2,4
 40070d8:	f800283a 	ret
 40070dc:	2000021e 	bne	r4,zero,40070e8 <__fpclassifyd+0x38>
 40070e0:	00800084 	movi	r2,2
 40070e4:	f800283a 	ret
 40070e8:	00dffc34 	movhi	r3,32752
 40070ec:	019ff834 	movhi	r6,32736
 40070f0:	28cb883a 	add	r5,r5,r3
 40070f4:	31bfffc4 	addi	r6,r6,-1
 40070f8:	317ff62e 	bgeu	r6,r5,40070d4 <__ram_exceptions_end+0xfac02f48>
 40070fc:	01400434 	movhi	r5,16
 4007100:	297fffc4 	addi	r5,r5,-1
 4007104:	28800236 	bltu	r5,r2,4007110 <__fpclassifyd+0x60>
 4007108:	008000c4 	movi	r2,3
 400710c:	f800283a 	ret
 4007110:	10c00226 	beq	r2,r3,400711c <__fpclassifyd+0x6c>
 4007114:	0005883a 	mov	r2,zero
 4007118:	f800283a 	ret
 400711c:	2005003a 	cmpeq	r2,r4,zero
 4007120:	f800283a 	ret

04007124 <_sbrk_r>:
 4007124:	defffd04 	addi	sp,sp,-12
 4007128:	dc000015 	stw	r16,0(sp)
 400712c:	04010074 	movhi	r16,1025
 4007130:	dc400115 	stw	r17,4(sp)
 4007134:	84059c04 	addi	r16,r16,5744
 4007138:	2023883a 	mov	r17,r4
 400713c:	2809883a 	mov	r4,r5
 4007140:	dfc00215 	stw	ra,8(sp)
 4007144:	80000015 	stw	zero,0(r16)
 4007148:	400d6e00 	call	400d6e0 <sbrk>
 400714c:	00ffffc4 	movi	r3,-1
 4007150:	10c00526 	beq	r2,r3,4007168 <_sbrk_r+0x44>
 4007154:	dfc00217 	ldw	ra,8(sp)
 4007158:	dc400117 	ldw	r17,4(sp)
 400715c:	dc000017 	ldw	r16,0(sp)
 4007160:	dec00304 	addi	sp,sp,12
 4007164:	f800283a 	ret
 4007168:	80c00017 	ldw	r3,0(r16)
 400716c:	183ff926 	beq	r3,zero,4007154 <__ram_exceptions_end+0xfac02fc8>
 4007170:	88c00015 	stw	r3,0(r17)
 4007174:	003ff706 	br	4007154 <__ram_exceptions_end+0xfac02fc8>

04007178 <__sread>:
 4007178:	defffe04 	addi	sp,sp,-8
 400717c:	dc000015 	stw	r16,0(sp)
 4007180:	2821883a 	mov	r16,r5
 4007184:	2940038f 	ldh	r5,14(r5)
 4007188:	dfc00115 	stw	ra,4(sp)
 400718c:	400961c0 	call	400961c <_read_r>
 4007190:	10000716 	blt	r2,zero,40071b0 <__sread+0x38>
 4007194:	80c01417 	ldw	r3,80(r16)
 4007198:	1887883a 	add	r3,r3,r2
 400719c:	80c01415 	stw	r3,80(r16)
 40071a0:	dfc00117 	ldw	ra,4(sp)
 40071a4:	dc000017 	ldw	r16,0(sp)
 40071a8:	dec00204 	addi	sp,sp,8
 40071ac:	f800283a 	ret
 40071b0:	80c0030b 	ldhu	r3,12(r16)
 40071b4:	18fbffcc 	andi	r3,r3,61439
 40071b8:	80c0030d 	sth	r3,12(r16)
 40071bc:	dfc00117 	ldw	ra,4(sp)
 40071c0:	dc000017 	ldw	r16,0(sp)
 40071c4:	dec00204 	addi	sp,sp,8
 40071c8:	f800283a 	ret

040071cc <__seofread>:
 40071cc:	0005883a 	mov	r2,zero
 40071d0:	f800283a 	ret

040071d4 <__swrite>:
 40071d4:	2880030b 	ldhu	r2,12(r5)
 40071d8:	defffb04 	addi	sp,sp,-20
 40071dc:	dcc00315 	stw	r19,12(sp)
 40071e0:	dc800215 	stw	r18,8(sp)
 40071e4:	dc400115 	stw	r17,4(sp)
 40071e8:	dc000015 	stw	r16,0(sp)
 40071ec:	dfc00415 	stw	ra,16(sp)
 40071f0:	10c0400c 	andi	r3,r2,256
 40071f4:	2821883a 	mov	r16,r5
 40071f8:	2023883a 	mov	r17,r4
 40071fc:	3025883a 	mov	r18,r6
 4007200:	3827883a 	mov	r19,r7
 4007204:	18000526 	beq	r3,zero,400721c <__swrite+0x48>
 4007208:	2940038f 	ldh	r5,14(r5)
 400720c:	01c00084 	movi	r7,2
 4007210:	000d883a 	mov	r6,zero
 4007214:	40094600 	call	4009460 <_lseek_r>
 4007218:	8080030b 	ldhu	r2,12(r16)
 400721c:	8140038f 	ldh	r5,14(r16)
 4007220:	10bbffcc 	andi	r2,r2,61439
 4007224:	980f883a 	mov	r7,r19
 4007228:	900d883a 	mov	r6,r18
 400722c:	8809883a 	mov	r4,r17
 4007230:	8080030d 	sth	r2,12(r16)
 4007234:	dfc00417 	ldw	ra,16(sp)
 4007238:	dcc00317 	ldw	r19,12(sp)
 400723c:	dc800217 	ldw	r18,8(sp)
 4007240:	dc400117 	ldw	r17,4(sp)
 4007244:	dc000017 	ldw	r16,0(sp)
 4007248:	dec00504 	addi	sp,sp,20
 400724c:	4008a701 	jmpi	4008a70 <_write_r>

04007250 <__sseek>:
 4007250:	defffe04 	addi	sp,sp,-8
 4007254:	dc000015 	stw	r16,0(sp)
 4007258:	2821883a 	mov	r16,r5
 400725c:	2940038f 	ldh	r5,14(r5)
 4007260:	dfc00115 	stw	ra,4(sp)
 4007264:	40094600 	call	4009460 <_lseek_r>
 4007268:	00ffffc4 	movi	r3,-1
 400726c:	10c00826 	beq	r2,r3,4007290 <__sseek+0x40>
 4007270:	80c0030b 	ldhu	r3,12(r16)
 4007274:	80801415 	stw	r2,80(r16)
 4007278:	18c40014 	ori	r3,r3,4096
 400727c:	80c0030d 	sth	r3,12(r16)
 4007280:	dfc00117 	ldw	ra,4(sp)
 4007284:	dc000017 	ldw	r16,0(sp)
 4007288:	dec00204 	addi	sp,sp,8
 400728c:	f800283a 	ret
 4007290:	80c0030b 	ldhu	r3,12(r16)
 4007294:	18fbffcc 	andi	r3,r3,61439
 4007298:	80c0030d 	sth	r3,12(r16)
 400729c:	dfc00117 	ldw	ra,4(sp)
 40072a0:	dc000017 	ldw	r16,0(sp)
 40072a4:	dec00204 	addi	sp,sp,8
 40072a8:	f800283a 	ret

040072ac <__sclose>:
 40072ac:	2940038f 	ldh	r5,14(r5)
 40072b0:	4008ad01 	jmpi	4008ad0 <_close_r>

040072b4 <strcmp>:
 40072b4:	2144b03a 	or	r2,r4,r5
 40072b8:	108000cc 	andi	r2,r2,3
 40072bc:	1000171e 	bne	r2,zero,400731c <strcmp+0x68>
 40072c0:	20800017 	ldw	r2,0(r4)
 40072c4:	28c00017 	ldw	r3,0(r5)
 40072c8:	10c0141e 	bne	r2,r3,400731c <strcmp+0x68>
 40072cc:	027fbff4 	movhi	r9,65279
 40072d0:	4a7fbfc4 	addi	r9,r9,-257
 40072d4:	0086303a 	nor	r3,zero,r2
 40072d8:	02202074 	movhi	r8,32897
 40072dc:	1245883a 	add	r2,r2,r9
 40072e0:	42202004 	addi	r8,r8,-32640
 40072e4:	10c4703a 	and	r2,r2,r3
 40072e8:	1204703a 	and	r2,r2,r8
 40072ec:	10000226 	beq	r2,zero,40072f8 <strcmp+0x44>
 40072f0:	00002306 	br	4007380 <strcmp+0xcc>
 40072f4:	1000221e 	bne	r2,zero,4007380 <strcmp+0xcc>
 40072f8:	21000104 	addi	r4,r4,4
 40072fc:	20c00017 	ldw	r3,0(r4)
 4007300:	29400104 	addi	r5,r5,4
 4007304:	29800017 	ldw	r6,0(r5)
 4007308:	1a4f883a 	add	r7,r3,r9
 400730c:	00c4303a 	nor	r2,zero,r3
 4007310:	3884703a 	and	r2,r7,r2
 4007314:	1204703a 	and	r2,r2,r8
 4007318:	19bff626 	beq	r3,r6,40072f4 <__ram_exceptions_end+0xfac03168>
 400731c:	20800003 	ldbu	r2,0(r4)
 4007320:	10c03fcc 	andi	r3,r2,255
 4007324:	18c0201c 	xori	r3,r3,128
 4007328:	18ffe004 	addi	r3,r3,-128
 400732c:	18000c26 	beq	r3,zero,4007360 <strcmp+0xac>
 4007330:	29800007 	ldb	r6,0(r5)
 4007334:	19800326 	beq	r3,r6,4007344 <strcmp+0x90>
 4007338:	00001306 	br	4007388 <strcmp+0xd4>
 400733c:	29800007 	ldb	r6,0(r5)
 4007340:	11800b1e 	bne	r2,r6,4007370 <strcmp+0xbc>
 4007344:	21000044 	addi	r4,r4,1
 4007348:	20c00003 	ldbu	r3,0(r4)
 400734c:	29400044 	addi	r5,r5,1
 4007350:	18803fcc 	andi	r2,r3,255
 4007354:	1080201c 	xori	r2,r2,128
 4007358:	10bfe004 	addi	r2,r2,-128
 400735c:	103ff71e 	bne	r2,zero,400733c <__ram_exceptions_end+0xfac031b0>
 4007360:	0007883a 	mov	r3,zero
 4007364:	28800003 	ldbu	r2,0(r5)
 4007368:	1885c83a 	sub	r2,r3,r2
 400736c:	f800283a 	ret
 4007370:	28800003 	ldbu	r2,0(r5)
 4007374:	18c03fcc 	andi	r3,r3,255
 4007378:	1885c83a 	sub	r2,r3,r2
 400737c:	f800283a 	ret
 4007380:	0005883a 	mov	r2,zero
 4007384:	f800283a 	ret
 4007388:	10c03fcc 	andi	r3,r2,255
 400738c:	003ff506 	br	4007364 <__ram_exceptions_end+0xfac031d8>

04007390 <strlen>:
 4007390:	208000cc 	andi	r2,r4,3
 4007394:	10002026 	beq	r2,zero,4007418 <strlen+0x88>
 4007398:	20800007 	ldb	r2,0(r4)
 400739c:	10002026 	beq	r2,zero,4007420 <strlen+0x90>
 40073a0:	2005883a 	mov	r2,r4
 40073a4:	00000206 	br	40073b0 <strlen+0x20>
 40073a8:	10c00007 	ldb	r3,0(r2)
 40073ac:	18001826 	beq	r3,zero,4007410 <strlen+0x80>
 40073b0:	10800044 	addi	r2,r2,1
 40073b4:	10c000cc 	andi	r3,r2,3
 40073b8:	183ffb1e 	bne	r3,zero,40073a8 <__ram_exceptions_end+0xfac0321c>
 40073bc:	10c00017 	ldw	r3,0(r2)
 40073c0:	01ffbff4 	movhi	r7,65279
 40073c4:	39ffbfc4 	addi	r7,r7,-257
 40073c8:	00ca303a 	nor	r5,zero,r3
 40073cc:	01a02074 	movhi	r6,32897
 40073d0:	19c7883a 	add	r3,r3,r7
 40073d4:	31a02004 	addi	r6,r6,-32640
 40073d8:	1946703a 	and	r3,r3,r5
 40073dc:	1986703a 	and	r3,r3,r6
 40073e0:	1800091e 	bne	r3,zero,4007408 <strlen+0x78>
 40073e4:	10800104 	addi	r2,r2,4
 40073e8:	10c00017 	ldw	r3,0(r2)
 40073ec:	19cb883a 	add	r5,r3,r7
 40073f0:	00c6303a 	nor	r3,zero,r3
 40073f4:	28c6703a 	and	r3,r5,r3
 40073f8:	1986703a 	and	r3,r3,r6
 40073fc:	183ff926 	beq	r3,zero,40073e4 <__ram_exceptions_end+0xfac03258>
 4007400:	00000106 	br	4007408 <strlen+0x78>
 4007404:	10800044 	addi	r2,r2,1
 4007408:	10c00007 	ldb	r3,0(r2)
 400740c:	183ffd1e 	bne	r3,zero,4007404 <__ram_exceptions_end+0xfac03278>
 4007410:	1105c83a 	sub	r2,r2,r4
 4007414:	f800283a 	ret
 4007418:	2005883a 	mov	r2,r4
 400741c:	003fe706 	br	40073bc <__ram_exceptions_end+0xfac03230>
 4007420:	0005883a 	mov	r2,zero
 4007424:	f800283a 	ret

04007428 <__sprint_r.part.0>:
 4007428:	28801917 	ldw	r2,100(r5)
 400742c:	defff604 	addi	sp,sp,-40
 4007430:	dd400515 	stw	r21,20(sp)
 4007434:	dfc00915 	stw	ra,36(sp)
 4007438:	df000815 	stw	fp,32(sp)
 400743c:	ddc00715 	stw	r23,28(sp)
 4007440:	dd800615 	stw	r22,24(sp)
 4007444:	dd000415 	stw	r20,16(sp)
 4007448:	dcc00315 	stw	r19,12(sp)
 400744c:	dc800215 	stw	r18,8(sp)
 4007450:	dc400115 	stw	r17,4(sp)
 4007454:	dc000015 	stw	r16,0(sp)
 4007458:	1088000c 	andi	r2,r2,8192
 400745c:	302b883a 	mov	r21,r6
 4007460:	10002e26 	beq	r2,zero,400751c <__sprint_r.part.0+0xf4>
 4007464:	30800217 	ldw	r2,8(r6)
 4007468:	35800017 	ldw	r22,0(r6)
 400746c:	10002926 	beq	r2,zero,4007514 <__sprint_r.part.0+0xec>
 4007470:	2827883a 	mov	r19,r5
 4007474:	2029883a 	mov	r20,r4
 4007478:	b5c00104 	addi	r23,r22,4
 400747c:	04bfffc4 	movi	r18,-1
 4007480:	bc400017 	ldw	r17,0(r23)
 4007484:	b4000017 	ldw	r16,0(r22)
 4007488:	0039883a 	mov	fp,zero
 400748c:	8822d0ba 	srli	r17,r17,2
 4007490:	8800031e 	bne	r17,zero,40074a0 <__sprint_r.part.0+0x78>
 4007494:	00001806 	br	40074f8 <__sprint_r.part.0+0xd0>
 4007498:	84000104 	addi	r16,r16,4
 400749c:	8f001526 	beq	r17,fp,40074f4 <__sprint_r.part.0+0xcc>
 40074a0:	81400017 	ldw	r5,0(r16)
 40074a4:	980d883a 	mov	r6,r19
 40074a8:	a009883a 	mov	r4,r20
 40074ac:	4008e500 	call	4008e50 <_fputwc_r>
 40074b0:	e7000044 	addi	fp,fp,1
 40074b4:	14bff81e 	bne	r2,r18,4007498 <__ram_exceptions_end+0xfac0330c>
 40074b8:	9005883a 	mov	r2,r18
 40074bc:	a8000215 	stw	zero,8(r21)
 40074c0:	a8000115 	stw	zero,4(r21)
 40074c4:	dfc00917 	ldw	ra,36(sp)
 40074c8:	df000817 	ldw	fp,32(sp)
 40074cc:	ddc00717 	ldw	r23,28(sp)
 40074d0:	dd800617 	ldw	r22,24(sp)
 40074d4:	dd400517 	ldw	r21,20(sp)
 40074d8:	dd000417 	ldw	r20,16(sp)
 40074dc:	dcc00317 	ldw	r19,12(sp)
 40074e0:	dc800217 	ldw	r18,8(sp)
 40074e4:	dc400117 	ldw	r17,4(sp)
 40074e8:	dc000017 	ldw	r16,0(sp)
 40074ec:	dec00a04 	addi	sp,sp,40
 40074f0:	f800283a 	ret
 40074f4:	a8800217 	ldw	r2,8(r21)
 40074f8:	8c63883a 	add	r17,r17,r17
 40074fc:	8c63883a 	add	r17,r17,r17
 4007500:	1445c83a 	sub	r2,r2,r17
 4007504:	a8800215 	stw	r2,8(r21)
 4007508:	b5800204 	addi	r22,r22,8
 400750c:	bdc00204 	addi	r23,r23,8
 4007510:	103fdb1e 	bne	r2,zero,4007480 <__ram_exceptions_end+0xfac032f4>
 4007514:	0005883a 	mov	r2,zero
 4007518:	003fe806 	br	40074bc <__ram_exceptions_end+0xfac03330>
 400751c:	4008f500 	call	4008f50 <__sfvwrite_r>
 4007520:	003fe606 	br	40074bc <__ram_exceptions_end+0xfac03330>

04007524 <__sprint_r>:
 4007524:	30c00217 	ldw	r3,8(r6)
 4007528:	18000126 	beq	r3,zero,4007530 <__sprint_r+0xc>
 400752c:	40074281 	jmpi	4007428 <__sprint_r.part.0>
 4007530:	30000115 	stw	zero,4(r6)
 4007534:	0005883a 	mov	r2,zero
 4007538:	f800283a 	ret

0400753c <___vfiprintf_internal_r>:
 400753c:	deffc904 	addi	sp,sp,-220
 4007540:	df003515 	stw	fp,212(sp)
 4007544:	dd003115 	stw	r20,196(sp)
 4007548:	dfc03615 	stw	ra,216(sp)
 400754c:	ddc03415 	stw	r23,208(sp)
 4007550:	dd803315 	stw	r22,204(sp)
 4007554:	dd403215 	stw	r21,200(sp)
 4007558:	dcc03015 	stw	r19,192(sp)
 400755c:	dc802f15 	stw	r18,188(sp)
 4007560:	dc402e15 	stw	r17,184(sp)
 4007564:	dc002d15 	stw	r16,180(sp)
 4007568:	d9002015 	stw	r4,128(sp)
 400756c:	d9c02215 	stw	r7,136(sp)
 4007570:	2829883a 	mov	r20,r5
 4007574:	3039883a 	mov	fp,r6
 4007578:	20000226 	beq	r4,zero,4007584 <___vfiprintf_internal_r+0x48>
 400757c:	20800e17 	ldw	r2,56(r4)
 4007580:	1000cf26 	beq	r2,zero,40078c0 <___vfiprintf_internal_r+0x384>
 4007584:	a080030b 	ldhu	r2,12(r20)
 4007588:	10c8000c 	andi	r3,r2,8192
 400758c:	1800061e 	bne	r3,zero,40075a8 <___vfiprintf_internal_r+0x6c>
 4007590:	a1001917 	ldw	r4,100(r20)
 4007594:	00f7ffc4 	movi	r3,-8193
 4007598:	10880014 	ori	r2,r2,8192
 400759c:	20c6703a 	and	r3,r4,r3
 40075a0:	a080030d 	sth	r2,12(r20)
 40075a4:	a0c01915 	stw	r3,100(r20)
 40075a8:	10c0020c 	andi	r3,r2,8
 40075ac:	1800a926 	beq	r3,zero,4007854 <___vfiprintf_internal_r+0x318>
 40075b0:	a0c00417 	ldw	r3,16(r20)
 40075b4:	1800a726 	beq	r3,zero,4007854 <___vfiprintf_internal_r+0x318>
 40075b8:	1080068c 	andi	r2,r2,26
 40075bc:	00c00284 	movi	r3,10
 40075c0:	10c0ac26 	beq	r2,r3,4007874 <___vfiprintf_internal_r+0x338>
 40075c4:	da801a04 	addi	r10,sp,104
 40075c8:	da801e15 	stw	r10,120(sp)
 40075cc:	d8801e17 	ldw	r2,120(sp)
 40075d0:	da8019c4 	addi	r10,sp,103
 40075d4:	05810074 	movhi	r22,1025
 40075d8:	05c10074 	movhi	r23,1025
 40075dc:	da801f15 	stw	r10,124(sp)
 40075e0:	1295c83a 	sub	r10,r2,r10
 40075e4:	b5bf1004 	addi	r22,r22,-960
 40075e8:	bdff0c04 	addi	r23,r23,-976
 40075ec:	dec01a15 	stw	sp,104(sp)
 40075f0:	d8001c15 	stw	zero,112(sp)
 40075f4:	d8001b15 	stw	zero,108(sp)
 40075f8:	d8002615 	stw	zero,152(sp)
 40075fc:	d8002315 	stw	zero,140(sp)
 4007600:	da802715 	stw	r10,156(sp)
 4007604:	d811883a 	mov	r8,sp
 4007608:	dd002115 	stw	r20,132(sp)
 400760c:	e021883a 	mov	r16,fp
 4007610:	80800007 	ldb	r2,0(r16)
 4007614:	1003ea26 	beq	r2,zero,40085c0 <___vfiprintf_internal_r+0x1084>
 4007618:	00c00944 	movi	r3,37
 400761c:	8025883a 	mov	r18,r16
 4007620:	10c0021e 	bne	r2,r3,400762c <___vfiprintf_internal_r+0xf0>
 4007624:	00001606 	br	4007680 <___vfiprintf_internal_r+0x144>
 4007628:	10c00326 	beq	r2,r3,4007638 <___vfiprintf_internal_r+0xfc>
 400762c:	94800044 	addi	r18,r18,1
 4007630:	90800007 	ldb	r2,0(r18)
 4007634:	103ffc1e 	bne	r2,zero,4007628 <__ram_exceptions_end+0xfac0349c>
 4007638:	9423c83a 	sub	r17,r18,r16
 400763c:	88001026 	beq	r17,zero,4007680 <___vfiprintf_internal_r+0x144>
 4007640:	d8c01c17 	ldw	r3,112(sp)
 4007644:	d8801b17 	ldw	r2,108(sp)
 4007648:	44000015 	stw	r16,0(r8)
 400764c:	88c7883a 	add	r3,r17,r3
 4007650:	10800044 	addi	r2,r2,1
 4007654:	44400115 	stw	r17,4(r8)
 4007658:	d8c01c15 	stw	r3,112(sp)
 400765c:	d8801b15 	stw	r2,108(sp)
 4007660:	010001c4 	movi	r4,7
 4007664:	2080760e 	bge	r4,r2,4007840 <___vfiprintf_internal_r+0x304>
 4007668:	1803821e 	bne	r3,zero,4008474 <___vfiprintf_internal_r+0xf38>
 400766c:	da802317 	ldw	r10,140(sp)
 4007670:	d8001b15 	stw	zero,108(sp)
 4007674:	d811883a 	mov	r8,sp
 4007678:	5455883a 	add	r10,r10,r17
 400767c:	da802315 	stw	r10,140(sp)
 4007680:	90800007 	ldb	r2,0(r18)
 4007684:	10044626 	beq	r2,zero,40087a0 <___vfiprintf_internal_r+0x1264>
 4007688:	90c00047 	ldb	r3,1(r18)
 400768c:	94000044 	addi	r16,r18,1
 4007690:	d8001d85 	stb	zero,118(sp)
 4007694:	0009883a 	mov	r4,zero
 4007698:	000f883a 	mov	r7,zero
 400769c:	027fffc4 	movi	r9,-1
 40076a0:	0023883a 	mov	r17,zero
 40076a4:	0029883a 	mov	r20,zero
 40076a8:	01401604 	movi	r5,88
 40076ac:	01800244 	movi	r6,9
 40076b0:	03400a84 	movi	r13,42
 40076b4:	03001b04 	movi	r12,108
 40076b8:	84000044 	addi	r16,r16,1
 40076bc:	18bff804 	addi	r2,r3,-32
 40076c0:	28827336 	bltu	r5,r2,4008090 <___vfiprintf_internal_r+0xb54>
 40076c4:	100490ba 	slli	r2,r2,2
 40076c8:	02810034 	movhi	r10,1024
 40076cc:	529db704 	addi	r10,r10,30428
 40076d0:	1285883a 	add	r2,r2,r10
 40076d4:	10800017 	ldw	r2,0(r2)
 40076d8:	1000683a 	jmp	r2
 40076dc:	04007dc4 	movi	r16,503
 40076e0:	04008090 	cmplti	r16,zero,514
 40076e4:	04008090 	cmplti	r16,zero,514
 40076e8:	04007de4 	muli	r16,zero,503
 40076ec:	04008090 	cmplti	r16,zero,514
 40076f0:	04008090 	cmplti	r16,zero,514
 40076f4:	04008090 	cmplti	r16,zero,514
 40076f8:	04008090 	cmplti	r16,zero,514
 40076fc:	04008090 	cmplti	r16,zero,514
 4007700:	04008090 	cmplti	r16,zero,514
 4007704:	04007fcc 	andi	r16,zero,511
 4007708:	04007fe8 	cmpgeui	r16,zero,511
 400770c:	04008090 	cmplti	r16,zero,514
 4007710:	040078d0 	cmplti	r16,zero,483
 4007714:	04007ff8 	rdprs	r16,zero,511
 4007718:	04008090 	cmplti	r16,zero,514
 400771c:	04007df0 	cmpltui	r16,zero,503
 4007720:	04007dfc 	xorhi	r16,zero,503
 4007724:	04007dfc 	xorhi	r16,zero,503
 4007728:	04007dfc 	xorhi	r16,zero,503
 400772c:	04007dfc 	xorhi	r16,zero,503
 4007730:	04007dfc 	xorhi	r16,zero,503
 4007734:	04007dfc 	xorhi	r16,zero,503
 4007738:	04007dfc 	xorhi	r16,zero,503
 400773c:	04007dfc 	xorhi	r16,zero,503
 4007740:	04007dfc 	xorhi	r16,zero,503
 4007744:	04008090 	cmplti	r16,zero,514
 4007748:	04008090 	cmplti	r16,zero,514
 400774c:	04008090 	cmplti	r16,zero,514
 4007750:	04008090 	cmplti	r16,zero,514
 4007754:	04008090 	cmplti	r16,zero,514
 4007758:	04008090 	cmplti	r16,zero,514
 400775c:	04008090 	cmplti	r16,zero,514
 4007760:	04008090 	cmplti	r16,zero,514
 4007764:	04008090 	cmplti	r16,zero,514
 4007768:	04008090 	cmplti	r16,zero,514
 400776c:	04007e28 	cmpgeui	r16,zero,504
 4007770:	04008090 	cmplti	r16,zero,514
 4007774:	04008090 	cmplti	r16,zero,514
 4007778:	04008090 	cmplti	r16,zero,514
 400777c:	04008090 	cmplti	r16,zero,514
 4007780:	04008090 	cmplti	r16,zero,514
 4007784:	04008090 	cmplti	r16,zero,514
 4007788:	04008090 	cmplti	r16,zero,514
 400778c:	04008090 	cmplti	r16,zero,514
 4007790:	04008090 	cmplti	r16,zero,514
 4007794:	04008090 	cmplti	r16,zero,514
 4007798:	04007e60 	cmpeqi	r16,zero,505
 400779c:	04008090 	cmplti	r16,zero,514
 40077a0:	04008090 	cmplti	r16,zero,514
 40077a4:	04008090 	cmplti	r16,zero,514
 40077a8:	04008090 	cmplti	r16,zero,514
 40077ac:	04008090 	cmplti	r16,zero,514
 40077b0:	04007eb8 	rdprs	r16,zero,506
 40077b4:	04008090 	cmplti	r16,zero,514
 40077b8:	04008090 	cmplti	r16,zero,514
 40077bc:	04007f28 	cmpgeui	r16,zero,508
 40077c0:	04008090 	cmplti	r16,zero,514
 40077c4:	04008090 	cmplti	r16,zero,514
 40077c8:	04008090 	cmplti	r16,zero,514
 40077cc:	04008090 	cmplti	r16,zero,514
 40077d0:	04008090 	cmplti	r16,zero,514
 40077d4:	04008090 	cmplti	r16,zero,514
 40077d8:	04008090 	cmplti	r16,zero,514
 40077dc:	04008090 	cmplti	r16,zero,514
 40077e0:	04008090 	cmplti	r16,zero,514
 40077e4:	04008090 	cmplti	r16,zero,514
 40077e8:	04007cd4 	movui	r16,499
 40077ec:	04007d00 	call	4007d0 <__alt_mem_sdram-0x3bff830>
 40077f0:	04008090 	cmplti	r16,zero,514
 40077f4:	04008090 	cmplti	r16,zero,514
 40077f8:	04008090 	cmplti	r16,zero,514
 40077fc:	04008038 	rdprs	r16,zero,512
 4007800:	04007d00 	call	4007d0 <__alt_mem_sdram-0x3bff830>
 4007804:	04008090 	cmplti	r16,zero,514
 4007808:	04008090 	cmplti	r16,zero,514
 400780c:	04007b94 	movui	r16,494
 4007810:	04008090 	cmplti	r16,zero,514
 4007814:	04007ba4 	muli	r16,zero,494
 4007818:	04007be0 	cmpeqi	r16,zero,495
 400781c:	040078dc 	xori	r16,zero,483
 4007820:	04007b88 	cmpgei	r16,zero,494
 4007824:	04008090 	cmplti	r16,zero,514
 4007828:	04007f64 	muli	r16,zero,509
 400782c:	04008090 	cmplti	r16,zero,514
 4007830:	04007fbc 	xorhi	r16,zero,510
 4007834:	04008090 	cmplti	r16,zero,514
 4007838:	04008090 	cmplti	r16,zero,514
 400783c:	04007c80 	call	4007c8 <__alt_mem_sdram-0x3bff838>
 4007840:	42000204 	addi	r8,r8,8
 4007844:	da802317 	ldw	r10,140(sp)
 4007848:	5455883a 	add	r10,r10,r17
 400784c:	da802315 	stw	r10,140(sp)
 4007850:	003f8b06 	br	4007680 <__ram_exceptions_end+0xfac034f4>
 4007854:	d9002017 	ldw	r4,128(sp)
 4007858:	a00b883a 	mov	r5,r20
 400785c:	4002cdc0 	call	4002cdc <__swsetup_r>
 4007860:	1003b11e 	bne	r2,zero,4008728 <___vfiprintf_internal_r+0x11ec>
 4007864:	a080030b 	ldhu	r2,12(r20)
 4007868:	00c00284 	movi	r3,10
 400786c:	1080068c 	andi	r2,r2,26
 4007870:	10ff541e 	bne	r2,r3,40075c4 <__ram_exceptions_end+0xfac03438>
 4007874:	a080038f 	ldh	r2,14(r20)
 4007878:	103f5216 	blt	r2,zero,40075c4 <__ram_exceptions_end+0xfac03438>
 400787c:	d9c02217 	ldw	r7,136(sp)
 4007880:	d9002017 	ldw	r4,128(sp)
 4007884:	e00d883a 	mov	r6,fp
 4007888:	a00b883a 	mov	r5,r20
 400788c:	40089b40 	call	40089b4 <__sbprintf>
 4007890:	dfc03617 	ldw	ra,216(sp)
 4007894:	df003517 	ldw	fp,212(sp)
 4007898:	ddc03417 	ldw	r23,208(sp)
 400789c:	dd803317 	ldw	r22,204(sp)
 40078a0:	dd403217 	ldw	r21,200(sp)
 40078a4:	dd003117 	ldw	r20,196(sp)
 40078a8:	dcc03017 	ldw	r19,192(sp)
 40078ac:	dc802f17 	ldw	r18,188(sp)
 40078b0:	dc402e17 	ldw	r17,184(sp)
 40078b4:	dc002d17 	ldw	r16,180(sp)
 40078b8:	dec03704 	addi	sp,sp,220
 40078bc:	f800283a 	ret
 40078c0:	4004cb00 	call	4004cb0 <__sinit>
 40078c4:	003f2f06 	br	4007584 <__ram_exceptions_end+0xfac033f8>
 40078c8:	0463c83a 	sub	r17,zero,r17
 40078cc:	d8802215 	stw	r2,136(sp)
 40078d0:	a5000114 	ori	r20,r20,4
 40078d4:	80c00007 	ldb	r3,0(r16)
 40078d8:	003f7706 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 40078dc:	00800c04 	movi	r2,48
 40078e0:	da802217 	ldw	r10,136(sp)
 40078e4:	d8801d05 	stb	r2,116(sp)
 40078e8:	00801e04 	movi	r2,120
 40078ec:	d8801d45 	stb	r2,117(sp)
 40078f0:	d8001d85 	stb	zero,118(sp)
 40078f4:	50c00104 	addi	r3,r10,4
 40078f8:	54800017 	ldw	r18,0(r10)
 40078fc:	0027883a 	mov	r19,zero
 4007900:	a0800094 	ori	r2,r20,2
 4007904:	48030b16 	blt	r9,zero,4008534 <___vfiprintf_internal_r+0xff8>
 4007908:	00bfdfc4 	movi	r2,-129
 400790c:	a096703a 	and	r11,r20,r2
 4007910:	d8c02215 	stw	r3,136(sp)
 4007914:	5d000094 	ori	r20,r11,2
 4007918:	90032b1e 	bne	r18,zero,40085c8 <___vfiprintf_internal_r+0x108c>
 400791c:	00810074 	movhi	r2,1025
 4007920:	10beab04 	addi	r2,r2,-1364
 4007924:	d8802615 	stw	r2,152(sp)
 4007928:	0039883a 	mov	fp,zero
 400792c:	48017b1e 	bne	r9,zero,4007f1c <___vfiprintf_internal_r+0x9e0>
 4007930:	0013883a 	mov	r9,zero
 4007934:	0027883a 	mov	r19,zero
 4007938:	dd401a04 	addi	r21,sp,104
 400793c:	4825883a 	mov	r18,r9
 4007940:	4cc0010e 	bge	r9,r19,4007948 <___vfiprintf_internal_r+0x40c>
 4007944:	9825883a 	mov	r18,r19
 4007948:	e7003fcc 	andi	fp,fp,255
 400794c:	e700201c 	xori	fp,fp,128
 4007950:	e73fe004 	addi	fp,fp,-128
 4007954:	e0000126 	beq	fp,zero,400795c <___vfiprintf_internal_r+0x420>
 4007958:	94800044 	addi	r18,r18,1
 400795c:	a380008c 	andi	r14,r20,2
 4007960:	70000126 	beq	r14,zero,4007968 <___vfiprintf_internal_r+0x42c>
 4007964:	94800084 	addi	r18,r18,2
 4007968:	a700210c 	andi	fp,r20,132
 400796c:	e001df1e 	bne	fp,zero,40080ec <___vfiprintf_internal_r+0xbb0>
 4007970:	8c87c83a 	sub	r3,r17,r18
 4007974:	00c1dd0e 	bge	zero,r3,40080ec <___vfiprintf_internal_r+0xbb0>
 4007978:	01c00404 	movi	r7,16
 400797c:	d8801c17 	ldw	r2,112(sp)
 4007980:	38c3ad0e 	bge	r7,r3,4008838 <___vfiprintf_internal_r+0x12fc>
 4007984:	02810074 	movhi	r10,1025
 4007988:	52bf1004 	addi	r10,r10,-960
 400798c:	dc002915 	stw	r16,164(sp)
 4007990:	d9801b17 	ldw	r6,108(sp)
 4007994:	da802415 	stw	r10,144(sp)
 4007998:	03c001c4 	movi	r15,7
 400799c:	da402515 	stw	r9,148(sp)
 40079a0:	db802815 	stw	r14,160(sp)
 40079a4:	1821883a 	mov	r16,r3
 40079a8:	00000506 	br	40079c0 <___vfiprintf_internal_r+0x484>
 40079ac:	31400084 	addi	r5,r6,2
 40079b0:	42000204 	addi	r8,r8,8
 40079b4:	200d883a 	mov	r6,r4
 40079b8:	843ffc04 	addi	r16,r16,-16
 40079bc:	3c000d0e 	bge	r7,r16,40079f4 <___vfiprintf_internal_r+0x4b8>
 40079c0:	10800404 	addi	r2,r2,16
 40079c4:	31000044 	addi	r4,r6,1
 40079c8:	45800015 	stw	r22,0(r8)
 40079cc:	41c00115 	stw	r7,4(r8)
 40079d0:	d8801c15 	stw	r2,112(sp)
 40079d4:	d9001b15 	stw	r4,108(sp)
 40079d8:	793ff40e 	bge	r15,r4,40079ac <__ram_exceptions_end+0xfac03820>
 40079dc:	1001b51e 	bne	r2,zero,40080b4 <___vfiprintf_internal_r+0xb78>
 40079e0:	843ffc04 	addi	r16,r16,-16
 40079e4:	000d883a 	mov	r6,zero
 40079e8:	01400044 	movi	r5,1
 40079ec:	d811883a 	mov	r8,sp
 40079f0:	3c3ff316 	blt	r7,r16,40079c0 <__ram_exceptions_end+0xfac03834>
 40079f4:	8007883a 	mov	r3,r16
 40079f8:	da402517 	ldw	r9,148(sp)
 40079fc:	db802817 	ldw	r14,160(sp)
 4007a00:	dc002917 	ldw	r16,164(sp)
 4007a04:	da802417 	ldw	r10,144(sp)
 4007a08:	1885883a 	add	r2,r3,r2
 4007a0c:	40c00115 	stw	r3,4(r8)
 4007a10:	42800015 	stw	r10,0(r8)
 4007a14:	d8801c15 	stw	r2,112(sp)
 4007a18:	d9401b15 	stw	r5,108(sp)
 4007a1c:	00c001c4 	movi	r3,7
 4007a20:	19426016 	blt	r3,r5,40083a4 <___vfiprintf_internal_r+0xe68>
 4007a24:	d8c01d87 	ldb	r3,118(sp)
 4007a28:	42000204 	addi	r8,r8,8
 4007a2c:	29000044 	addi	r4,r5,1
 4007a30:	1801b31e 	bne	r3,zero,4008100 <___vfiprintf_internal_r+0xbc4>
 4007a34:	7001c026 	beq	r14,zero,4008138 <___vfiprintf_internal_r+0xbfc>
 4007a38:	d8c01d04 	addi	r3,sp,116
 4007a3c:	10800084 	addi	r2,r2,2
 4007a40:	40c00015 	stw	r3,0(r8)
 4007a44:	00c00084 	movi	r3,2
 4007a48:	40c00115 	stw	r3,4(r8)
 4007a4c:	d8801c15 	stw	r2,112(sp)
 4007a50:	d9001b15 	stw	r4,108(sp)
 4007a54:	00c001c4 	movi	r3,7
 4007a58:	1902650e 	bge	r3,r4,40083f0 <___vfiprintf_internal_r+0xeb4>
 4007a5c:	10029a1e 	bne	r2,zero,40084c8 <___vfiprintf_internal_r+0xf8c>
 4007a60:	00c02004 	movi	r3,128
 4007a64:	01000044 	movi	r4,1
 4007a68:	000b883a 	mov	r5,zero
 4007a6c:	d811883a 	mov	r8,sp
 4007a70:	e0c1b31e 	bne	fp,r3,4008140 <___vfiprintf_internal_r+0xc04>
 4007a74:	8cb9c83a 	sub	fp,r17,r18
 4007a78:	0701b10e 	bge	zero,fp,4008140 <___vfiprintf_internal_r+0xc04>
 4007a7c:	01c00404 	movi	r7,16
 4007a80:	3f03890e 	bge	r7,fp,40088a8 <___vfiprintf_internal_r+0x136c>
 4007a84:	00c10074 	movhi	r3,1025
 4007a88:	18ff0c04 	addi	r3,r3,-976
 4007a8c:	d8c02415 	stw	r3,144(sp)
 4007a90:	8007883a 	mov	r3,r16
 4007a94:	034001c4 	movi	r13,7
 4007a98:	e021883a 	mov	r16,fp
 4007a9c:	da402515 	stw	r9,148(sp)
 4007aa0:	1839883a 	mov	fp,r3
 4007aa4:	00000506 	br	4007abc <___vfiprintf_internal_r+0x580>
 4007aa8:	29800084 	addi	r6,r5,2
 4007aac:	42000204 	addi	r8,r8,8
 4007ab0:	180b883a 	mov	r5,r3
 4007ab4:	843ffc04 	addi	r16,r16,-16
 4007ab8:	3c000d0e 	bge	r7,r16,4007af0 <___vfiprintf_internal_r+0x5b4>
 4007abc:	10800404 	addi	r2,r2,16
 4007ac0:	28c00044 	addi	r3,r5,1
 4007ac4:	45c00015 	stw	r23,0(r8)
 4007ac8:	41c00115 	stw	r7,4(r8)
 4007acc:	d8801c15 	stw	r2,112(sp)
 4007ad0:	d8c01b15 	stw	r3,108(sp)
 4007ad4:	68fff40e 	bge	r13,r3,4007aa8 <__ram_exceptions_end+0xfac0391c>
 4007ad8:	1002241e 	bne	r2,zero,400836c <___vfiprintf_internal_r+0xe30>
 4007adc:	843ffc04 	addi	r16,r16,-16
 4007ae0:	01800044 	movi	r6,1
 4007ae4:	000b883a 	mov	r5,zero
 4007ae8:	d811883a 	mov	r8,sp
 4007aec:	3c3ff316 	blt	r7,r16,4007abc <__ram_exceptions_end+0xfac03930>
 4007af0:	da402517 	ldw	r9,148(sp)
 4007af4:	e007883a 	mov	r3,fp
 4007af8:	8039883a 	mov	fp,r16
 4007afc:	1821883a 	mov	r16,r3
 4007b00:	d8c02417 	ldw	r3,144(sp)
 4007b04:	1705883a 	add	r2,r2,fp
 4007b08:	47000115 	stw	fp,4(r8)
 4007b0c:	40c00015 	stw	r3,0(r8)
 4007b10:	d8801c15 	stw	r2,112(sp)
 4007b14:	d9801b15 	stw	r6,108(sp)
 4007b18:	00c001c4 	movi	r3,7
 4007b1c:	19827616 	blt	r3,r6,40084f8 <___vfiprintf_internal_r+0xfbc>
 4007b20:	4cf9c83a 	sub	fp,r9,r19
 4007b24:	42000204 	addi	r8,r8,8
 4007b28:	31000044 	addi	r4,r6,1
 4007b2c:	300b883a 	mov	r5,r6
 4007b30:	07018516 	blt	zero,fp,4008148 <___vfiprintf_internal_r+0xc0c>
 4007b34:	9885883a 	add	r2,r19,r2
 4007b38:	45400015 	stw	r21,0(r8)
 4007b3c:	44c00115 	stw	r19,4(r8)
 4007b40:	d8801c15 	stw	r2,112(sp)
 4007b44:	d9001b15 	stw	r4,108(sp)
 4007b48:	00c001c4 	movi	r3,7
 4007b4c:	1901dd0e 	bge	r3,r4,40082c4 <___vfiprintf_internal_r+0xd88>
 4007b50:	1002401e 	bne	r2,zero,4008454 <___vfiprintf_internal_r+0xf18>
 4007b54:	d8001b15 	stw	zero,108(sp)
 4007b58:	a2c0010c 	andi	r11,r20,4
 4007b5c:	58000226 	beq	r11,zero,4007b68 <___vfiprintf_internal_r+0x62c>
 4007b60:	8ca7c83a 	sub	r19,r17,r18
 4007b64:	04c2f216 	blt	zero,r19,4008730 <___vfiprintf_internal_r+0x11f4>
 4007b68:	8c80010e 	bge	r17,r18,4007b70 <___vfiprintf_internal_r+0x634>
 4007b6c:	9023883a 	mov	r17,r18
 4007b70:	da802317 	ldw	r10,140(sp)
 4007b74:	5455883a 	add	r10,r10,r17
 4007b78:	da802315 	stw	r10,140(sp)
 4007b7c:	d8001b15 	stw	zero,108(sp)
 4007b80:	d811883a 	mov	r8,sp
 4007b84:	003ea206 	br	4007610 <__ram_exceptions_end+0xfac03484>
 4007b88:	a5000814 	ori	r20,r20,32
 4007b8c:	80c00007 	ldb	r3,0(r16)
 4007b90:	003ec906 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 4007b94:	80c00007 	ldb	r3,0(r16)
 4007b98:	1b030926 	beq	r3,r12,40087c0 <___vfiprintf_internal_r+0x1284>
 4007b9c:	a5000414 	ori	r20,r20,16
 4007ba0:	003ec506 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 4007ba4:	21003fcc 	andi	r4,r4,255
 4007ba8:	20035e1e 	bne	r4,zero,4008924 <___vfiprintf_internal_r+0x13e8>
 4007bac:	a080080c 	andi	r2,r20,32
 4007bb0:	1002a526 	beq	r2,zero,4008648 <___vfiprintf_internal_r+0x110c>
 4007bb4:	da802217 	ldw	r10,136(sp)
 4007bb8:	50800017 	ldw	r2,0(r10)
 4007bbc:	da802317 	ldw	r10,140(sp)
 4007bc0:	5007d7fa 	srai	r3,r10,31
 4007bc4:	da802217 	ldw	r10,136(sp)
 4007bc8:	10c00115 	stw	r3,4(r2)
 4007bcc:	52800104 	addi	r10,r10,4
 4007bd0:	da802215 	stw	r10,136(sp)
 4007bd4:	da802317 	ldw	r10,140(sp)
 4007bd8:	12800015 	stw	r10,0(r2)
 4007bdc:	003e8c06 	br	4007610 <__ram_exceptions_end+0xfac03484>
 4007be0:	21003fcc 	andi	r4,r4,255
 4007be4:	2003511e 	bne	r4,zero,400892c <___vfiprintf_internal_r+0x13f0>
 4007be8:	a080080c 	andi	r2,r20,32
 4007bec:	1000a126 	beq	r2,zero,4007e74 <___vfiprintf_internal_r+0x938>
 4007bf0:	da802217 	ldw	r10,136(sp)
 4007bf4:	d8001d85 	stb	zero,118(sp)
 4007bf8:	50800204 	addi	r2,r10,8
 4007bfc:	54800017 	ldw	r18,0(r10)
 4007c00:	54c00117 	ldw	r19,4(r10)
 4007c04:	4802b416 	blt	r9,zero,40086d8 <___vfiprintf_internal_r+0x119c>
 4007c08:	013fdfc4 	movi	r4,-129
 4007c0c:	94c6b03a 	or	r3,r18,r19
 4007c10:	d8802215 	stw	r2,136(sp)
 4007c14:	a128703a 	and	r20,r20,r4
 4007c18:	1800a226 	beq	r3,zero,4007ea4 <___vfiprintf_internal_r+0x968>
 4007c1c:	0039883a 	mov	fp,zero
 4007c20:	dd401a04 	addi	r21,sp,104
 4007c24:	9006d0fa 	srli	r3,r18,3
 4007c28:	9808977a 	slli	r4,r19,29
 4007c2c:	9826d0fa 	srli	r19,r19,3
 4007c30:	948001cc 	andi	r18,r18,7
 4007c34:	90800c04 	addi	r2,r18,48
 4007c38:	ad7fffc4 	addi	r21,r21,-1
 4007c3c:	20e4b03a 	or	r18,r4,r3
 4007c40:	a8800005 	stb	r2,0(r21)
 4007c44:	94c6b03a 	or	r3,r18,r19
 4007c48:	183ff61e 	bne	r3,zero,4007c24 <__ram_exceptions_end+0xfac03a98>
 4007c4c:	a0c0004c 	andi	r3,r20,1
 4007c50:	18005926 	beq	r3,zero,4007db8 <___vfiprintf_internal_r+0x87c>
 4007c54:	10803fcc 	andi	r2,r2,255
 4007c58:	1080201c 	xori	r2,r2,128
 4007c5c:	10bfe004 	addi	r2,r2,-128
 4007c60:	00c00c04 	movi	r3,48
 4007c64:	10c05426 	beq	r2,r3,4007db8 <___vfiprintf_internal_r+0x87c>
 4007c68:	da801e17 	ldw	r10,120(sp)
 4007c6c:	a8bfffc4 	addi	r2,r21,-1
 4007c70:	a8ffffc5 	stb	r3,-1(r21)
 4007c74:	50a7c83a 	sub	r19,r10,r2
 4007c78:	102b883a 	mov	r21,r2
 4007c7c:	003f2f06 	br	400793c <__ram_exceptions_end+0xfac037b0>
 4007c80:	21003fcc 	andi	r4,r4,255
 4007c84:	2003421e 	bne	r4,zero,4008990 <___vfiprintf_internal_r+0x1454>
 4007c88:	00810074 	movhi	r2,1025
 4007c8c:	10beab04 	addi	r2,r2,-1364
 4007c90:	d8802615 	stw	r2,152(sp)
 4007c94:	a080080c 	andi	r2,r20,32
 4007c98:	1000aa26 	beq	r2,zero,4007f44 <___vfiprintf_internal_r+0xa08>
 4007c9c:	da802217 	ldw	r10,136(sp)
 4007ca0:	54800017 	ldw	r18,0(r10)
 4007ca4:	54c00117 	ldw	r19,4(r10)
 4007ca8:	52800204 	addi	r10,r10,8
 4007cac:	da802215 	stw	r10,136(sp)
 4007cb0:	a080004c 	andi	r2,r20,1
 4007cb4:	1001d226 	beq	r2,zero,4008400 <___vfiprintf_internal_r+0xec4>
 4007cb8:	94c4b03a 	or	r2,r18,r19
 4007cbc:	1002351e 	bne	r2,zero,4008594 <___vfiprintf_internal_r+0x1058>
 4007cc0:	d8001d85 	stb	zero,118(sp)
 4007cc4:	48022216 	blt	r9,zero,4008550 <___vfiprintf_internal_r+0x1014>
 4007cc8:	00bfdfc4 	movi	r2,-129
 4007ccc:	a0a8703a 	and	r20,r20,r2
 4007cd0:	003f1506 	br	4007928 <__ram_exceptions_end+0xfac0379c>
 4007cd4:	da802217 	ldw	r10,136(sp)
 4007cd8:	04800044 	movi	r18,1
 4007cdc:	d8001d85 	stb	zero,118(sp)
 4007ce0:	50800017 	ldw	r2,0(r10)
 4007ce4:	52800104 	addi	r10,r10,4
 4007ce8:	da802215 	stw	r10,136(sp)
 4007cec:	d8801005 	stb	r2,64(sp)
 4007cf0:	9027883a 	mov	r19,r18
 4007cf4:	dd401004 	addi	r21,sp,64
 4007cf8:	0013883a 	mov	r9,zero
 4007cfc:	003f1706 	br	400795c <__ram_exceptions_end+0xfac037d0>
 4007d00:	21003fcc 	andi	r4,r4,255
 4007d04:	2003201e 	bne	r4,zero,4008988 <___vfiprintf_internal_r+0x144c>
 4007d08:	a080080c 	andi	r2,r20,32
 4007d0c:	10004b26 	beq	r2,zero,4007e3c <___vfiprintf_internal_r+0x900>
 4007d10:	da802217 	ldw	r10,136(sp)
 4007d14:	50800117 	ldw	r2,4(r10)
 4007d18:	54800017 	ldw	r18,0(r10)
 4007d1c:	52800204 	addi	r10,r10,8
 4007d20:	da802215 	stw	r10,136(sp)
 4007d24:	1027883a 	mov	r19,r2
 4007d28:	10022c16 	blt	r2,zero,40085dc <___vfiprintf_internal_r+0x10a0>
 4007d2c:	df001d83 	ldbu	fp,118(sp)
 4007d30:	48007216 	blt	r9,zero,4007efc <___vfiprintf_internal_r+0x9c0>
 4007d34:	00ffdfc4 	movi	r3,-129
 4007d38:	94c4b03a 	or	r2,r18,r19
 4007d3c:	a0e8703a 	and	r20,r20,r3
 4007d40:	1000cc26 	beq	r2,zero,4008074 <___vfiprintf_internal_r+0xb38>
 4007d44:	98021026 	beq	r19,zero,4008588 <___vfiprintf_internal_r+0x104c>
 4007d48:	dc402415 	stw	r17,144(sp)
 4007d4c:	dc002515 	stw	r16,148(sp)
 4007d50:	9823883a 	mov	r17,r19
 4007d54:	9021883a 	mov	r16,r18
 4007d58:	dd401a04 	addi	r21,sp,104
 4007d5c:	4825883a 	mov	r18,r9
 4007d60:	4027883a 	mov	r19,r8
 4007d64:	8009883a 	mov	r4,r16
 4007d68:	880b883a 	mov	r5,r17
 4007d6c:	01800284 	movi	r6,10
 4007d70:	000f883a 	mov	r7,zero
 4007d74:	400a4980 	call	400a498 <__umoddi3>
 4007d78:	10800c04 	addi	r2,r2,48
 4007d7c:	ad7fffc4 	addi	r21,r21,-1
 4007d80:	8009883a 	mov	r4,r16
 4007d84:	880b883a 	mov	r5,r17
 4007d88:	a8800005 	stb	r2,0(r21)
 4007d8c:	01800284 	movi	r6,10
 4007d90:	000f883a 	mov	r7,zero
 4007d94:	4009f200 	call	4009f20 <__udivdi3>
 4007d98:	1021883a 	mov	r16,r2
 4007d9c:	10c4b03a 	or	r2,r2,r3
 4007da0:	1823883a 	mov	r17,r3
 4007da4:	103fef1e 	bne	r2,zero,4007d64 <__ram_exceptions_end+0xfac03bd8>
 4007da8:	dc402417 	ldw	r17,144(sp)
 4007dac:	dc002517 	ldw	r16,148(sp)
 4007db0:	9013883a 	mov	r9,r18
 4007db4:	9811883a 	mov	r8,r19
 4007db8:	da801e17 	ldw	r10,120(sp)
 4007dbc:	5567c83a 	sub	r19,r10,r21
 4007dc0:	003ede06 	br	400793c <__ram_exceptions_end+0xfac037b0>
 4007dc4:	38803fcc 	andi	r2,r7,255
 4007dc8:	1080201c 	xori	r2,r2,128
 4007dcc:	10bfe004 	addi	r2,r2,-128
 4007dd0:	1002371e 	bne	r2,zero,40086b0 <___vfiprintf_internal_r+0x1174>
 4007dd4:	01000044 	movi	r4,1
 4007dd8:	01c00804 	movi	r7,32
 4007ddc:	80c00007 	ldb	r3,0(r16)
 4007de0:	003e3506 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 4007de4:	a5000054 	ori	r20,r20,1
 4007de8:	80c00007 	ldb	r3,0(r16)
 4007dec:	003e3206 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 4007df0:	a5002014 	ori	r20,r20,128
 4007df4:	80c00007 	ldb	r3,0(r16)
 4007df8:	003e2f06 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 4007dfc:	8015883a 	mov	r10,r16
 4007e00:	0023883a 	mov	r17,zero
 4007e04:	18bff404 	addi	r2,r3,-48
 4007e08:	50c00007 	ldb	r3,0(r10)
 4007e0c:	8c4002a4 	muli	r17,r17,10
 4007e10:	84000044 	addi	r16,r16,1
 4007e14:	8015883a 	mov	r10,r16
 4007e18:	1463883a 	add	r17,r2,r17
 4007e1c:	18bff404 	addi	r2,r3,-48
 4007e20:	30bff92e 	bgeu	r6,r2,4007e08 <__ram_exceptions_end+0xfac03c7c>
 4007e24:	003e2506 	br	40076bc <__ram_exceptions_end+0xfac03530>
 4007e28:	21003fcc 	andi	r4,r4,255
 4007e2c:	2002d41e 	bne	r4,zero,4008980 <___vfiprintf_internal_r+0x1444>
 4007e30:	a5000414 	ori	r20,r20,16
 4007e34:	a080080c 	andi	r2,r20,32
 4007e38:	103fb51e 	bne	r2,zero,4007d10 <__ram_exceptions_end+0xfac03b84>
 4007e3c:	a080040c 	andi	r2,r20,16
 4007e40:	1001f826 	beq	r2,zero,4008624 <___vfiprintf_internal_r+0x10e8>
 4007e44:	da802217 	ldw	r10,136(sp)
 4007e48:	54800017 	ldw	r18,0(r10)
 4007e4c:	52800104 	addi	r10,r10,4
 4007e50:	da802215 	stw	r10,136(sp)
 4007e54:	9027d7fa 	srai	r19,r18,31
 4007e58:	9805883a 	mov	r2,r19
 4007e5c:	003fb206 	br	4007d28 <__ram_exceptions_end+0xfac03b9c>
 4007e60:	21003fcc 	andi	r4,r4,255
 4007e64:	2002c41e 	bne	r4,zero,4008978 <___vfiprintf_internal_r+0x143c>
 4007e68:	a5000414 	ori	r20,r20,16
 4007e6c:	a080080c 	andi	r2,r20,32
 4007e70:	103f5f1e 	bne	r2,zero,4007bf0 <__ram_exceptions_end+0xfac03a64>
 4007e74:	a080040c 	andi	r2,r20,16
 4007e78:	10020f26 	beq	r2,zero,40086b8 <___vfiprintf_internal_r+0x117c>
 4007e7c:	da802217 	ldw	r10,136(sp)
 4007e80:	d8001d85 	stb	zero,118(sp)
 4007e84:	0027883a 	mov	r19,zero
 4007e88:	50800104 	addi	r2,r10,4
 4007e8c:	54800017 	ldw	r18,0(r10)
 4007e90:	48021116 	blt	r9,zero,40086d8 <___vfiprintf_internal_r+0x119c>
 4007e94:	00ffdfc4 	movi	r3,-129
 4007e98:	d8802215 	stw	r2,136(sp)
 4007e9c:	a0e8703a 	and	r20,r20,r3
 4007ea0:	903f5e1e 	bne	r18,zero,4007c1c <__ram_exceptions_end+0xfac03a90>
 4007ea4:	0039883a 	mov	fp,zero
 4007ea8:	4802a626 	beq	r9,zero,4008944 <___vfiprintf_internal_r+0x1408>
 4007eac:	0025883a 	mov	r18,zero
 4007eb0:	0027883a 	mov	r19,zero
 4007eb4:	003f5a06 	br	4007c20 <__ram_exceptions_end+0xfac03a94>
 4007eb8:	21003fcc 	andi	r4,r4,255
 4007ebc:	20029f1e 	bne	r4,zero,400893c <___vfiprintf_internal_r+0x1400>
 4007ec0:	a5000414 	ori	r20,r20,16
 4007ec4:	a080080c 	andi	r2,r20,32
 4007ec8:	10005e1e 	bne	r2,zero,4008044 <___vfiprintf_internal_r+0xb08>
 4007ecc:	a080040c 	andi	r2,r20,16
 4007ed0:	1001a21e 	bne	r2,zero,400855c <___vfiprintf_internal_r+0x1020>
 4007ed4:	a080100c 	andi	r2,r20,64
 4007ed8:	d8001d85 	stb	zero,118(sp)
 4007edc:	da802217 	ldw	r10,136(sp)
 4007ee0:	1002231e 	bne	r2,zero,4008770 <___vfiprintf_internal_r+0x1234>
 4007ee4:	50800104 	addi	r2,r10,4
 4007ee8:	54800017 	ldw	r18,0(r10)
 4007eec:	0027883a 	mov	r19,zero
 4007ef0:	4801a00e 	bge	r9,zero,4008574 <___vfiprintf_internal_r+0x1038>
 4007ef4:	d8802215 	stw	r2,136(sp)
 4007ef8:	0039883a 	mov	fp,zero
 4007efc:	94c4b03a 	or	r2,r18,r19
 4007f00:	103f901e 	bne	r2,zero,4007d44 <__ram_exceptions_end+0xfac03bb8>
 4007f04:	00800044 	movi	r2,1
 4007f08:	10803fcc 	andi	r2,r2,255
 4007f0c:	00c00044 	movi	r3,1
 4007f10:	10c05926 	beq	r2,r3,4008078 <___vfiprintf_internal_r+0xb3c>
 4007f14:	00c00084 	movi	r3,2
 4007f18:	10ffe41e 	bne	r2,r3,4007eac <__ram_exceptions_end+0xfac03d20>
 4007f1c:	0025883a 	mov	r18,zero
 4007f20:	0027883a 	mov	r19,zero
 4007f24:	00013d06 	br	400841c <___vfiprintf_internal_r+0xee0>
 4007f28:	21003fcc 	andi	r4,r4,255
 4007f2c:	2002811e 	bne	r4,zero,4008934 <___vfiprintf_internal_r+0x13f8>
 4007f30:	00810074 	movhi	r2,1025
 4007f34:	10bea604 	addi	r2,r2,-1384
 4007f38:	d8802615 	stw	r2,152(sp)
 4007f3c:	a080080c 	andi	r2,r20,32
 4007f40:	103f561e 	bne	r2,zero,4007c9c <__ram_exceptions_end+0xfac03b10>
 4007f44:	a080040c 	andi	r2,r20,16
 4007f48:	1001d126 	beq	r2,zero,4008690 <___vfiprintf_internal_r+0x1154>
 4007f4c:	da802217 	ldw	r10,136(sp)
 4007f50:	0027883a 	mov	r19,zero
 4007f54:	54800017 	ldw	r18,0(r10)
 4007f58:	52800104 	addi	r10,r10,4
 4007f5c:	da802215 	stw	r10,136(sp)
 4007f60:	003f5306 	br	4007cb0 <__ram_exceptions_end+0xfac03b24>
 4007f64:	da802217 	ldw	r10,136(sp)
 4007f68:	d8001d85 	stb	zero,118(sp)
 4007f6c:	55400017 	ldw	r21,0(r10)
 4007f70:	50c00104 	addi	r3,r10,4
 4007f74:	a8024226 	beq	r21,zero,4008880 <___vfiprintf_internal_r+0x1344>
 4007f78:	48021816 	blt	r9,zero,40087dc <___vfiprintf_internal_r+0x12a0>
 4007f7c:	480d883a 	mov	r6,r9
 4007f80:	000b883a 	mov	r5,zero
 4007f84:	a809883a 	mov	r4,r21
 4007f88:	d8c02a15 	stw	r3,168(sp)
 4007f8c:	da002b15 	stw	r8,172(sp)
 4007f90:	da402c15 	stw	r9,176(sp)
 4007f94:	4005d600 	call	4005d60 <memchr>
 4007f98:	d8c02a17 	ldw	r3,168(sp)
 4007f9c:	da002b17 	ldw	r8,172(sp)
 4007fa0:	da402c17 	ldw	r9,176(sp)
 4007fa4:	10024826 	beq	r2,zero,40088c8 <___vfiprintf_internal_r+0x138c>
 4007fa8:	1567c83a 	sub	r19,r2,r21
 4007fac:	df001d83 	ldbu	fp,118(sp)
 4007fb0:	d8c02215 	stw	r3,136(sp)
 4007fb4:	0013883a 	mov	r9,zero
 4007fb8:	003e6006 	br	400793c <__ram_exceptions_end+0xfac037b0>
 4007fbc:	21003fcc 	andi	r4,r4,255
 4007fc0:	203fc026 	beq	r4,zero,4007ec4 <__ram_exceptions_end+0xfac03d38>
 4007fc4:	d9c01d85 	stb	r7,118(sp)
 4007fc8:	003fbe06 	br	4007ec4 <__ram_exceptions_end+0xfac03d38>
 4007fcc:	da802217 	ldw	r10,136(sp)
 4007fd0:	54400017 	ldw	r17,0(r10)
 4007fd4:	50800104 	addi	r2,r10,4
 4007fd8:	883e3b16 	blt	r17,zero,40078c8 <__ram_exceptions_end+0xfac0373c>
 4007fdc:	d8802215 	stw	r2,136(sp)
 4007fe0:	80c00007 	ldb	r3,0(r16)
 4007fe4:	003db406 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 4007fe8:	01000044 	movi	r4,1
 4007fec:	01c00ac4 	movi	r7,43
 4007ff0:	80c00007 	ldb	r3,0(r16)
 4007ff4:	003db006 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 4007ff8:	80c00007 	ldb	r3,0(r16)
 4007ffc:	82800044 	addi	r10,r16,1
 4008000:	1b423c26 	beq	r3,r13,40088f4 <___vfiprintf_internal_r+0x13b8>
 4008004:	18bff404 	addi	r2,r3,-48
 4008008:	0013883a 	mov	r9,zero
 400800c:	30822b36 	bltu	r6,r2,40088bc <___vfiprintf_internal_r+0x1380>
 4008010:	50c00007 	ldb	r3,0(r10)
 4008014:	4a4002a4 	muli	r9,r9,10
 4008018:	54000044 	addi	r16,r10,1
 400801c:	8015883a 	mov	r10,r16
 4008020:	4893883a 	add	r9,r9,r2
 4008024:	18bff404 	addi	r2,r3,-48
 4008028:	30bff92e 	bgeu	r6,r2,4008010 <__ram_exceptions_end+0xfac03e84>
 400802c:	483da30e 	bge	r9,zero,40076bc <__ram_exceptions_end+0xfac03530>
 4008030:	027fffc4 	movi	r9,-1
 4008034:	003da106 	br	40076bc <__ram_exceptions_end+0xfac03530>
 4008038:	a5001014 	ori	r20,r20,64
 400803c:	80c00007 	ldb	r3,0(r16)
 4008040:	003d9d06 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 4008044:	da802217 	ldw	r10,136(sp)
 4008048:	d8001d85 	stb	zero,118(sp)
 400804c:	50c00204 	addi	r3,r10,8
 4008050:	54800017 	ldw	r18,0(r10)
 4008054:	54c00117 	ldw	r19,4(r10)
 4008058:	4801ca16 	blt	r9,zero,4008784 <___vfiprintf_internal_r+0x1248>
 400805c:	013fdfc4 	movi	r4,-129
 4008060:	94c4b03a 	or	r2,r18,r19
 4008064:	d8c02215 	stw	r3,136(sp)
 4008068:	a128703a 	and	r20,r20,r4
 400806c:	0039883a 	mov	fp,zero
 4008070:	103f341e 	bne	r2,zero,4007d44 <__ram_exceptions_end+0xfac03bb8>
 4008074:	483e2e26 	beq	r9,zero,4007930 <__ram_exceptions_end+0xfac037a4>
 4008078:	0025883a 	mov	r18,zero
 400807c:	94800c04 	addi	r18,r18,48
 4008080:	dc8019c5 	stb	r18,103(sp)
 4008084:	dcc02717 	ldw	r19,156(sp)
 4008088:	dd4019c4 	addi	r21,sp,103
 400808c:	003e2b06 	br	400793c <__ram_exceptions_end+0xfac037b0>
 4008090:	21003fcc 	andi	r4,r4,255
 4008094:	2002361e 	bne	r4,zero,4008970 <___vfiprintf_internal_r+0x1434>
 4008098:	1801c126 	beq	r3,zero,40087a0 <___vfiprintf_internal_r+0x1264>
 400809c:	04800044 	movi	r18,1
 40080a0:	d8c01005 	stb	r3,64(sp)
 40080a4:	d8001d85 	stb	zero,118(sp)
 40080a8:	9027883a 	mov	r19,r18
 40080ac:	dd401004 	addi	r21,sp,64
 40080b0:	003f1106 	br	4007cf8 <__ram_exceptions_end+0xfac03b6c>
 40080b4:	d9402117 	ldw	r5,132(sp)
 40080b8:	d9002017 	ldw	r4,128(sp)
 40080bc:	d9801a04 	addi	r6,sp,104
 40080c0:	d9c02b15 	stw	r7,172(sp)
 40080c4:	dbc02a15 	stw	r15,168(sp)
 40080c8:	40074280 	call	4007428 <__sprint_r.part.0>
 40080cc:	d9c02b17 	ldw	r7,172(sp)
 40080d0:	dbc02a17 	ldw	r15,168(sp)
 40080d4:	10006d1e 	bne	r2,zero,400828c <___vfiprintf_internal_r+0xd50>
 40080d8:	d9801b17 	ldw	r6,108(sp)
 40080dc:	d8801c17 	ldw	r2,112(sp)
 40080e0:	d811883a 	mov	r8,sp
 40080e4:	31400044 	addi	r5,r6,1
 40080e8:	003e3306 	br	40079b8 <__ram_exceptions_end+0xfac0382c>
 40080ec:	d9401b17 	ldw	r5,108(sp)
 40080f0:	d8801c17 	ldw	r2,112(sp)
 40080f4:	29000044 	addi	r4,r5,1
 40080f8:	d8c01d87 	ldb	r3,118(sp)
 40080fc:	183e4d26 	beq	r3,zero,4007a34 <__ram_exceptions_end+0xfac038a8>
 4008100:	00c00044 	movi	r3,1
 4008104:	d9401d84 	addi	r5,sp,118
 4008108:	10c5883a 	add	r2,r2,r3
 400810c:	41400015 	stw	r5,0(r8)
 4008110:	40c00115 	stw	r3,4(r8)
 4008114:	d8801c15 	stw	r2,112(sp)
 4008118:	d9001b15 	stw	r4,108(sp)
 400811c:	014001c4 	movi	r5,7
 4008120:	2900a90e 	bge	r5,r4,40083c8 <___vfiprintf_internal_r+0xe8c>
 4008124:	1000da1e 	bne	r2,zero,4008490 <___vfiprintf_internal_r+0xf54>
 4008128:	7000ab1e 	bne	r14,zero,40083d8 <___vfiprintf_internal_r+0xe9c>
 400812c:	000b883a 	mov	r5,zero
 4008130:	1809883a 	mov	r4,r3
 4008134:	d811883a 	mov	r8,sp
 4008138:	00c02004 	movi	r3,128
 400813c:	e0fe4d26 	beq	fp,r3,4007a74 <__ram_exceptions_end+0xfac038e8>
 4008140:	4cf9c83a 	sub	fp,r9,r19
 4008144:	073e7b0e 	bge	zero,fp,4007b34 <__ram_exceptions_end+0xfac039a8>
 4008148:	01c00404 	movi	r7,16
 400814c:	3f01900e 	bge	r7,fp,4008790 <___vfiprintf_internal_r+0x1254>
 4008150:	00c10074 	movhi	r3,1025
 4008154:	18ff0c04 	addi	r3,r3,-976
 4008158:	d8c02415 	stw	r3,144(sp)
 400815c:	034001c4 	movi	r13,7
 4008160:	00000506 	br	4008178 <___vfiprintf_internal_r+0xc3c>
 4008164:	29000084 	addi	r4,r5,2
 4008168:	42000204 	addi	r8,r8,8
 400816c:	180b883a 	mov	r5,r3
 4008170:	e73ffc04 	addi	fp,fp,-16
 4008174:	3f000d0e 	bge	r7,fp,40081ac <___vfiprintf_internal_r+0xc70>
 4008178:	10800404 	addi	r2,r2,16
 400817c:	28c00044 	addi	r3,r5,1
 4008180:	45c00015 	stw	r23,0(r8)
 4008184:	41c00115 	stw	r7,4(r8)
 4008188:	d8801c15 	stw	r2,112(sp)
 400818c:	d8c01b15 	stw	r3,108(sp)
 4008190:	68fff40e 	bge	r13,r3,4008164 <__ram_exceptions_end+0xfac03fd8>
 4008194:	1000101e 	bne	r2,zero,40081d8 <___vfiprintf_internal_r+0xc9c>
 4008198:	e73ffc04 	addi	fp,fp,-16
 400819c:	01000044 	movi	r4,1
 40081a0:	000b883a 	mov	r5,zero
 40081a4:	d811883a 	mov	r8,sp
 40081a8:	3f3ff316 	blt	r7,fp,4008178 <__ram_exceptions_end+0xfac03fec>
 40081ac:	da802417 	ldw	r10,144(sp)
 40081b0:	1705883a 	add	r2,r2,fp
 40081b4:	47000115 	stw	fp,4(r8)
 40081b8:	42800015 	stw	r10,0(r8)
 40081bc:	d8801c15 	stw	r2,112(sp)
 40081c0:	d9001b15 	stw	r4,108(sp)
 40081c4:	00c001c4 	movi	r3,7
 40081c8:	19003616 	blt	r3,r4,40082a4 <___vfiprintf_internal_r+0xd68>
 40081cc:	42000204 	addi	r8,r8,8
 40081d0:	21000044 	addi	r4,r4,1
 40081d4:	003e5706 	br	4007b34 <__ram_exceptions_end+0xfac039a8>
 40081d8:	d9402117 	ldw	r5,132(sp)
 40081dc:	d9002017 	ldw	r4,128(sp)
 40081e0:	d9801a04 	addi	r6,sp,104
 40081e4:	d9c02b15 	stw	r7,172(sp)
 40081e8:	db402a15 	stw	r13,168(sp)
 40081ec:	40074280 	call	4007428 <__sprint_r.part.0>
 40081f0:	d9c02b17 	ldw	r7,172(sp)
 40081f4:	db402a17 	ldw	r13,168(sp)
 40081f8:	1000241e 	bne	r2,zero,400828c <___vfiprintf_internal_r+0xd50>
 40081fc:	d9401b17 	ldw	r5,108(sp)
 4008200:	d8801c17 	ldw	r2,112(sp)
 4008204:	d811883a 	mov	r8,sp
 4008208:	29000044 	addi	r4,r5,1
 400820c:	003fd806 	br	4008170 <__ram_exceptions_end+0xfac03fe4>
 4008210:	d9401b17 	ldw	r5,108(sp)
 4008214:	00c10074 	movhi	r3,1025
 4008218:	18ff1004 	addi	r3,r3,-960
 400821c:	d8c02415 	stw	r3,144(sp)
 4008220:	29400044 	addi	r5,r5,1
 4008224:	d8c02417 	ldw	r3,144(sp)
 4008228:	14c5883a 	add	r2,r2,r19
 400822c:	44c00115 	stw	r19,4(r8)
 4008230:	40c00015 	stw	r3,0(r8)
 4008234:	d8801c15 	stw	r2,112(sp)
 4008238:	d9401b15 	stw	r5,108(sp)
 400823c:	00c001c4 	movi	r3,7
 4008240:	1940070e 	bge	r3,r5,4008260 <___vfiprintf_internal_r+0xd24>
 4008244:	103e4826 	beq	r2,zero,4007b68 <__ram_exceptions_end+0xfac039dc>
 4008248:	d9402117 	ldw	r5,132(sp)
 400824c:	d9002017 	ldw	r4,128(sp)
 4008250:	d9801a04 	addi	r6,sp,104
 4008254:	40074280 	call	4007428 <__sprint_r.part.0>
 4008258:	10000c1e 	bne	r2,zero,400828c <___vfiprintf_internal_r+0xd50>
 400825c:	d8801c17 	ldw	r2,112(sp)
 4008260:	8c80010e 	bge	r17,r18,4008268 <___vfiprintf_internal_r+0xd2c>
 4008264:	9023883a 	mov	r17,r18
 4008268:	da802317 	ldw	r10,140(sp)
 400826c:	5455883a 	add	r10,r10,r17
 4008270:	da802315 	stw	r10,140(sp)
 4008274:	103e4126 	beq	r2,zero,4007b7c <__ram_exceptions_end+0xfac039f0>
 4008278:	d9402117 	ldw	r5,132(sp)
 400827c:	d9002017 	ldw	r4,128(sp)
 4008280:	d9801a04 	addi	r6,sp,104
 4008284:	40074280 	call	4007428 <__sprint_r.part.0>
 4008288:	103e3c26 	beq	r2,zero,4007b7c <__ram_exceptions_end+0xfac039f0>
 400828c:	dd002117 	ldw	r20,132(sp)
 4008290:	a080030b 	ldhu	r2,12(r20)
 4008294:	1080100c 	andi	r2,r2,64
 4008298:	1001231e 	bne	r2,zero,4008728 <___vfiprintf_internal_r+0x11ec>
 400829c:	d8802317 	ldw	r2,140(sp)
 40082a0:	003d7b06 	br	4007890 <__ram_exceptions_end+0xfac03704>
 40082a4:	1000991e 	bne	r2,zero,400850c <___vfiprintf_internal_r+0xfd0>
 40082a8:	00c00044 	movi	r3,1
 40082ac:	9805883a 	mov	r2,r19
 40082b0:	dd400015 	stw	r21,0(sp)
 40082b4:	dcc00115 	stw	r19,4(sp)
 40082b8:	dcc01c15 	stw	r19,112(sp)
 40082bc:	d8c01b15 	stw	r3,108(sp)
 40082c0:	d811883a 	mov	r8,sp
 40082c4:	42000204 	addi	r8,r8,8
 40082c8:	a2c0010c 	andi	r11,r20,4
 40082cc:	583fe426 	beq	r11,zero,4008260 <__ram_exceptions_end+0xfac040d4>
 40082d0:	8ca7c83a 	sub	r19,r17,r18
 40082d4:	04ffe20e 	bge	zero,r19,4008260 <__ram_exceptions_end+0xfac040d4>
 40082d8:	01c00404 	movi	r7,16
 40082dc:	3cffcc0e 	bge	r7,r19,4008210 <__ram_exceptions_end+0xfac04084>
 40082e0:	02810074 	movhi	r10,1025
 40082e4:	52bf1004 	addi	r10,r10,-960
 40082e8:	d9001b17 	ldw	r4,108(sp)
 40082ec:	da802415 	stw	r10,144(sp)
 40082f0:	382b883a 	mov	r21,r7
 40082f4:	050001c4 	movi	r20,7
 40082f8:	df002017 	ldw	fp,128(sp)
 40082fc:	00000506 	br	4008314 <___vfiprintf_internal_r+0xdd8>
 4008300:	21400084 	addi	r5,r4,2
 4008304:	42000204 	addi	r8,r8,8
 4008308:	1809883a 	mov	r4,r3
 400830c:	9cfffc04 	addi	r19,r19,-16
 4008310:	acffc40e 	bge	r21,r19,4008224 <__ram_exceptions_end+0xfac04098>
 4008314:	10800404 	addi	r2,r2,16
 4008318:	20c00044 	addi	r3,r4,1
 400831c:	45800015 	stw	r22,0(r8)
 4008320:	45400115 	stw	r21,4(r8)
 4008324:	d8801c15 	stw	r2,112(sp)
 4008328:	d8c01b15 	stw	r3,108(sp)
 400832c:	a0fff40e 	bge	r20,r3,4008300 <__ram_exceptions_end+0xfac04174>
 4008330:	1000041e 	bne	r2,zero,4008344 <___vfiprintf_internal_r+0xe08>
 4008334:	01400044 	movi	r5,1
 4008338:	0009883a 	mov	r4,zero
 400833c:	d811883a 	mov	r8,sp
 4008340:	003ff206 	br	400830c <__ram_exceptions_end+0xfac04180>
 4008344:	d9402117 	ldw	r5,132(sp)
 4008348:	d9801a04 	addi	r6,sp,104
 400834c:	e009883a 	mov	r4,fp
 4008350:	40074280 	call	4007428 <__sprint_r.part.0>
 4008354:	103fcd1e 	bne	r2,zero,400828c <__ram_exceptions_end+0xfac04100>
 4008358:	d9001b17 	ldw	r4,108(sp)
 400835c:	d8801c17 	ldw	r2,112(sp)
 4008360:	d811883a 	mov	r8,sp
 4008364:	21400044 	addi	r5,r4,1
 4008368:	003fe806 	br	400830c <__ram_exceptions_end+0xfac04180>
 400836c:	d9402117 	ldw	r5,132(sp)
 4008370:	d9002017 	ldw	r4,128(sp)
 4008374:	d9801a04 	addi	r6,sp,104
 4008378:	d9c02b15 	stw	r7,172(sp)
 400837c:	db402a15 	stw	r13,168(sp)
 4008380:	40074280 	call	4007428 <__sprint_r.part.0>
 4008384:	d9c02b17 	ldw	r7,172(sp)
 4008388:	db402a17 	ldw	r13,168(sp)
 400838c:	103fbf1e 	bne	r2,zero,400828c <__ram_exceptions_end+0xfac04100>
 4008390:	d9401b17 	ldw	r5,108(sp)
 4008394:	d8801c17 	ldw	r2,112(sp)
 4008398:	d811883a 	mov	r8,sp
 400839c:	29800044 	addi	r6,r5,1
 40083a0:	003dc406 	br	4007ab4 <__ram_exceptions_end+0xfac03928>
 40083a4:	1000d21e 	bne	r2,zero,40086f0 <___vfiprintf_internal_r+0x11b4>
 40083a8:	d8c01d87 	ldb	r3,118(sp)
 40083ac:	18009526 	beq	r3,zero,4008604 <___vfiprintf_internal_r+0x10c8>
 40083b0:	00800044 	movi	r2,1
 40083b4:	d8c01d84 	addi	r3,sp,118
 40083b8:	1009883a 	mov	r4,r2
 40083bc:	d8c00015 	stw	r3,0(sp)
 40083c0:	d8800115 	stw	r2,4(sp)
 40083c4:	d811883a 	mov	r8,sp
 40083c8:	200b883a 	mov	r5,r4
 40083cc:	42000204 	addi	r8,r8,8
 40083d0:	21000044 	addi	r4,r4,1
 40083d4:	003d9706 	br	4007a34 <__ram_exceptions_end+0xfac038a8>
 40083d8:	d9001d04 	addi	r4,sp,116
 40083dc:	00800084 	movi	r2,2
 40083e0:	d9000015 	stw	r4,0(sp)
 40083e4:	d8800115 	stw	r2,4(sp)
 40083e8:	1809883a 	mov	r4,r3
 40083ec:	d811883a 	mov	r8,sp
 40083f0:	200b883a 	mov	r5,r4
 40083f4:	42000204 	addi	r8,r8,8
 40083f8:	21000044 	addi	r4,r4,1
 40083fc:	003f4e06 	br	4008138 <__ram_exceptions_end+0xfac03fac>
 4008400:	d8001d85 	stb	zero,118(sp)
 4008404:	48005016 	blt	r9,zero,4008548 <___vfiprintf_internal_r+0x100c>
 4008408:	00ffdfc4 	movi	r3,-129
 400840c:	94c4b03a 	or	r2,r18,r19
 4008410:	a0e8703a 	and	r20,r20,r3
 4008414:	103d4426 	beq	r2,zero,4007928 <__ram_exceptions_end+0xfac0379c>
 4008418:	0039883a 	mov	fp,zero
 400841c:	d9002617 	ldw	r4,152(sp)
 4008420:	dd401a04 	addi	r21,sp,104
 4008424:	908003cc 	andi	r2,r18,15
 4008428:	9806973a 	slli	r3,r19,28
 400842c:	2085883a 	add	r2,r4,r2
 4008430:	9024d13a 	srli	r18,r18,4
 4008434:	10800003 	ldbu	r2,0(r2)
 4008438:	9826d13a 	srli	r19,r19,4
 400843c:	ad7fffc4 	addi	r21,r21,-1
 4008440:	1ca4b03a 	or	r18,r3,r18
 4008444:	a8800005 	stb	r2,0(r21)
 4008448:	94c4b03a 	or	r2,r18,r19
 400844c:	103ff51e 	bne	r2,zero,4008424 <__ram_exceptions_end+0xfac04298>
 4008450:	003e5906 	br	4007db8 <__ram_exceptions_end+0xfac03c2c>
 4008454:	d9402117 	ldw	r5,132(sp)
 4008458:	d9002017 	ldw	r4,128(sp)
 400845c:	d9801a04 	addi	r6,sp,104
 4008460:	40074280 	call	4007428 <__sprint_r.part.0>
 4008464:	103f891e 	bne	r2,zero,400828c <__ram_exceptions_end+0xfac04100>
 4008468:	d8801c17 	ldw	r2,112(sp)
 400846c:	d811883a 	mov	r8,sp
 4008470:	003f9506 	br	40082c8 <__ram_exceptions_end+0xfac0413c>
 4008474:	d9402117 	ldw	r5,132(sp)
 4008478:	d9002017 	ldw	r4,128(sp)
 400847c:	d9801a04 	addi	r6,sp,104
 4008480:	40074280 	call	4007428 <__sprint_r.part.0>
 4008484:	103f811e 	bne	r2,zero,400828c <__ram_exceptions_end+0xfac04100>
 4008488:	d811883a 	mov	r8,sp
 400848c:	003ced06 	br	4007844 <__ram_exceptions_end+0xfac036b8>
 4008490:	d9402117 	ldw	r5,132(sp)
 4008494:	d9002017 	ldw	r4,128(sp)
 4008498:	d9801a04 	addi	r6,sp,104
 400849c:	da402c15 	stw	r9,176(sp)
 40084a0:	db802a15 	stw	r14,168(sp)
 40084a4:	40074280 	call	4007428 <__sprint_r.part.0>
 40084a8:	da402c17 	ldw	r9,176(sp)
 40084ac:	db802a17 	ldw	r14,168(sp)
 40084b0:	103f761e 	bne	r2,zero,400828c <__ram_exceptions_end+0xfac04100>
 40084b4:	d9401b17 	ldw	r5,108(sp)
 40084b8:	d8801c17 	ldw	r2,112(sp)
 40084bc:	d811883a 	mov	r8,sp
 40084c0:	29000044 	addi	r4,r5,1
 40084c4:	003d5b06 	br	4007a34 <__ram_exceptions_end+0xfac038a8>
 40084c8:	d9402117 	ldw	r5,132(sp)
 40084cc:	d9002017 	ldw	r4,128(sp)
 40084d0:	d9801a04 	addi	r6,sp,104
 40084d4:	da402c15 	stw	r9,176(sp)
 40084d8:	40074280 	call	4007428 <__sprint_r.part.0>
 40084dc:	da402c17 	ldw	r9,176(sp)
 40084e0:	103f6a1e 	bne	r2,zero,400828c <__ram_exceptions_end+0xfac04100>
 40084e4:	d9401b17 	ldw	r5,108(sp)
 40084e8:	d8801c17 	ldw	r2,112(sp)
 40084ec:	d811883a 	mov	r8,sp
 40084f0:	29000044 	addi	r4,r5,1
 40084f4:	003f1006 	br	4008138 <__ram_exceptions_end+0xfac03fac>
 40084f8:	1000c31e 	bne	r2,zero,4008808 <___vfiprintf_internal_r+0x12cc>
 40084fc:	01000044 	movi	r4,1
 4008500:	000b883a 	mov	r5,zero
 4008504:	d811883a 	mov	r8,sp
 4008508:	003f0d06 	br	4008140 <__ram_exceptions_end+0xfac03fb4>
 400850c:	d9402117 	ldw	r5,132(sp)
 4008510:	d9002017 	ldw	r4,128(sp)
 4008514:	d9801a04 	addi	r6,sp,104
 4008518:	40074280 	call	4007428 <__sprint_r.part.0>
 400851c:	103f5b1e 	bne	r2,zero,400828c <__ram_exceptions_end+0xfac04100>
 4008520:	d9001b17 	ldw	r4,108(sp)
 4008524:	d8801c17 	ldw	r2,112(sp)
 4008528:	d811883a 	mov	r8,sp
 400852c:	21000044 	addi	r4,r4,1
 4008530:	003d8006 	br	4007b34 <__ram_exceptions_end+0xfac039a8>
 4008534:	01010074 	movhi	r4,1025
 4008538:	213eab04 	addi	r4,r4,-1364
 400853c:	d9002615 	stw	r4,152(sp)
 4008540:	d8c02215 	stw	r3,136(sp)
 4008544:	1029883a 	mov	r20,r2
 4008548:	94c4b03a 	or	r2,r18,r19
 400854c:	103fb21e 	bne	r2,zero,4008418 <__ram_exceptions_end+0xfac0428c>
 4008550:	0039883a 	mov	fp,zero
 4008554:	00800084 	movi	r2,2
 4008558:	003e6b06 	br	4007f08 <__ram_exceptions_end+0xfac03d7c>
 400855c:	da802217 	ldw	r10,136(sp)
 4008560:	d8001d85 	stb	zero,118(sp)
 4008564:	0027883a 	mov	r19,zero
 4008568:	50800104 	addi	r2,r10,4
 400856c:	54800017 	ldw	r18,0(r10)
 4008570:	483e6016 	blt	r9,zero,4007ef4 <__ram_exceptions_end+0xfac03d68>
 4008574:	00ffdfc4 	movi	r3,-129
 4008578:	d8802215 	stw	r2,136(sp)
 400857c:	a0e8703a 	and	r20,r20,r3
 4008580:	0039883a 	mov	fp,zero
 4008584:	903ebb26 	beq	r18,zero,4008074 <__ram_exceptions_end+0xfac03ee8>
 4008588:	00800244 	movi	r2,9
 400858c:	14bdee36 	bltu	r2,r18,4007d48 <__ram_exceptions_end+0xfac03bbc>
 4008590:	003eba06 	br	400807c <__ram_exceptions_end+0xfac03ef0>
 4008594:	00800c04 	movi	r2,48
 4008598:	d8c01d45 	stb	r3,117(sp)
 400859c:	d8801d05 	stb	r2,116(sp)
 40085a0:	d8001d85 	stb	zero,118(sp)
 40085a4:	a0c00094 	ori	r3,r20,2
 40085a8:	4800a916 	blt	r9,zero,4008850 <___vfiprintf_internal_r+0x1314>
 40085ac:	00bfdfc4 	movi	r2,-129
 40085b0:	a096703a 	and	r11,r20,r2
 40085b4:	5d000094 	ori	r20,r11,2
 40085b8:	0039883a 	mov	fp,zero
 40085bc:	003f9706 	br	400841c <__ram_exceptions_end+0xfac04290>
 40085c0:	8025883a 	mov	r18,r16
 40085c4:	003c2e06 	br	4007680 <__ram_exceptions_end+0xfac034f4>
 40085c8:	00810074 	movhi	r2,1025
 40085cc:	10beab04 	addi	r2,r2,-1364
 40085d0:	0039883a 	mov	fp,zero
 40085d4:	d8802615 	stw	r2,152(sp)
 40085d8:	003f9006 	br	400841c <__ram_exceptions_end+0xfac04290>
 40085dc:	04a5c83a 	sub	r18,zero,r18
 40085e0:	07000b44 	movi	fp,45
 40085e4:	9004c03a 	cmpne	r2,r18,zero
 40085e8:	04e7c83a 	sub	r19,zero,r19
 40085ec:	df001d85 	stb	fp,118(sp)
 40085f0:	98a7c83a 	sub	r19,r19,r2
 40085f4:	48009f16 	blt	r9,zero,4008874 <___vfiprintf_internal_r+0x1338>
 40085f8:	00bfdfc4 	movi	r2,-129
 40085fc:	a0a8703a 	and	r20,r20,r2
 4008600:	003dd006 	br	4007d44 <__ram_exceptions_end+0xfac03bb8>
 4008604:	70004c26 	beq	r14,zero,4008738 <___vfiprintf_internal_r+0x11fc>
 4008608:	00800084 	movi	r2,2
 400860c:	d8c01d04 	addi	r3,sp,116
 4008610:	d8c00015 	stw	r3,0(sp)
 4008614:	d8800115 	stw	r2,4(sp)
 4008618:	01000044 	movi	r4,1
 400861c:	d811883a 	mov	r8,sp
 4008620:	003f7306 	br	40083f0 <__ram_exceptions_end+0xfac04264>
 4008624:	a080100c 	andi	r2,r20,64
 4008628:	da802217 	ldw	r10,136(sp)
 400862c:	103e0626 	beq	r2,zero,4007e48 <__ram_exceptions_end+0xfac03cbc>
 4008630:	5480000f 	ldh	r18,0(r10)
 4008634:	52800104 	addi	r10,r10,4
 4008638:	da802215 	stw	r10,136(sp)
 400863c:	9027d7fa 	srai	r19,r18,31
 4008640:	9805883a 	mov	r2,r19
 4008644:	003db806 	br	4007d28 <__ram_exceptions_end+0xfac03b9c>
 4008648:	a080040c 	andi	r2,r20,16
 400864c:	1000091e 	bne	r2,zero,4008674 <___vfiprintf_internal_r+0x1138>
 4008650:	a2c0100c 	andi	r11,r20,64
 4008654:	58000726 	beq	r11,zero,4008674 <___vfiprintf_internal_r+0x1138>
 4008658:	da802217 	ldw	r10,136(sp)
 400865c:	50800017 	ldw	r2,0(r10)
 4008660:	52800104 	addi	r10,r10,4
 4008664:	da802215 	stw	r10,136(sp)
 4008668:	da802317 	ldw	r10,140(sp)
 400866c:	1280000d 	sth	r10,0(r2)
 4008670:	003be706 	br	4007610 <__ram_exceptions_end+0xfac03484>
 4008674:	da802217 	ldw	r10,136(sp)
 4008678:	50800017 	ldw	r2,0(r10)
 400867c:	52800104 	addi	r10,r10,4
 4008680:	da802215 	stw	r10,136(sp)
 4008684:	da802317 	ldw	r10,140(sp)
 4008688:	12800015 	stw	r10,0(r2)
 400868c:	003be006 	br	4007610 <__ram_exceptions_end+0xfac03484>
 4008690:	a080100c 	andi	r2,r20,64
 4008694:	da802217 	ldw	r10,136(sp)
 4008698:	10003026 	beq	r2,zero,400875c <___vfiprintf_internal_r+0x1220>
 400869c:	5480000b 	ldhu	r18,0(r10)
 40086a0:	52800104 	addi	r10,r10,4
 40086a4:	0027883a 	mov	r19,zero
 40086a8:	da802215 	stw	r10,136(sp)
 40086ac:	003d8006 	br	4007cb0 <__ram_exceptions_end+0xfac03b24>
 40086b0:	80c00007 	ldb	r3,0(r16)
 40086b4:	003c0006 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 40086b8:	a080100c 	andi	r2,r20,64
 40086bc:	d8001d85 	stb	zero,118(sp)
 40086c0:	da802217 	ldw	r10,136(sp)
 40086c4:	1000201e 	bne	r2,zero,4008748 <___vfiprintf_internal_r+0x120c>
 40086c8:	50800104 	addi	r2,r10,4
 40086cc:	54800017 	ldw	r18,0(r10)
 40086d0:	0027883a 	mov	r19,zero
 40086d4:	483def0e 	bge	r9,zero,4007e94 <__ram_exceptions_end+0xfac03d08>
 40086d8:	94c6b03a 	or	r3,r18,r19
 40086dc:	d8802215 	stw	r2,136(sp)
 40086e0:	183d4e1e 	bne	r3,zero,4007c1c <__ram_exceptions_end+0xfac03a90>
 40086e4:	0039883a 	mov	fp,zero
 40086e8:	0005883a 	mov	r2,zero
 40086ec:	003e0606 	br	4007f08 <__ram_exceptions_end+0xfac03d7c>
 40086f0:	d9402117 	ldw	r5,132(sp)
 40086f4:	d9002017 	ldw	r4,128(sp)
 40086f8:	d9801a04 	addi	r6,sp,104
 40086fc:	da402c15 	stw	r9,176(sp)
 4008700:	db802a15 	stw	r14,168(sp)
 4008704:	40074280 	call	4007428 <__sprint_r.part.0>
 4008708:	da402c17 	ldw	r9,176(sp)
 400870c:	db802a17 	ldw	r14,168(sp)
 4008710:	103ede1e 	bne	r2,zero,400828c <__ram_exceptions_end+0xfac04100>
 4008714:	d9401b17 	ldw	r5,108(sp)
 4008718:	d8801c17 	ldw	r2,112(sp)
 400871c:	d811883a 	mov	r8,sp
 4008720:	29000044 	addi	r4,r5,1
 4008724:	003e7406 	br	40080f8 <__ram_exceptions_end+0xfac03f6c>
 4008728:	00bfffc4 	movi	r2,-1
 400872c:	003c5806 	br	4007890 <__ram_exceptions_end+0xfac03704>
 4008730:	d811883a 	mov	r8,sp
 4008734:	003ee806 	br	40082d8 <__ram_exceptions_end+0xfac0414c>
 4008738:	000b883a 	mov	r5,zero
 400873c:	01000044 	movi	r4,1
 4008740:	d811883a 	mov	r8,sp
 4008744:	003e7c06 	br	4008138 <__ram_exceptions_end+0xfac03fac>
 4008748:	50800104 	addi	r2,r10,4
 400874c:	5480000b 	ldhu	r18,0(r10)
 4008750:	0027883a 	mov	r19,zero
 4008754:	483dcf0e 	bge	r9,zero,4007e94 <__ram_exceptions_end+0xfac03d08>
 4008758:	003fdf06 	br	40086d8 <__ram_exceptions_end+0xfac0454c>
 400875c:	54800017 	ldw	r18,0(r10)
 4008760:	52800104 	addi	r10,r10,4
 4008764:	0027883a 	mov	r19,zero
 4008768:	da802215 	stw	r10,136(sp)
 400876c:	003d5006 	br	4007cb0 <__ram_exceptions_end+0xfac03b24>
 4008770:	50800104 	addi	r2,r10,4
 4008774:	5480000b 	ldhu	r18,0(r10)
 4008778:	0027883a 	mov	r19,zero
 400877c:	483f7d0e 	bge	r9,zero,4008574 <__ram_exceptions_end+0xfac043e8>
 4008780:	003ddc06 	br	4007ef4 <__ram_exceptions_end+0xfac03d68>
 4008784:	d8c02215 	stw	r3,136(sp)
 4008788:	0039883a 	mov	fp,zero
 400878c:	003ddb06 	br	4007efc <__ram_exceptions_end+0xfac03d70>
 4008790:	02810074 	movhi	r10,1025
 4008794:	52bf0c04 	addi	r10,r10,-976
 4008798:	da802415 	stw	r10,144(sp)
 400879c:	003e8306 	br	40081ac <__ram_exceptions_end+0xfac04020>
 40087a0:	d8801c17 	ldw	r2,112(sp)
 40087a4:	dd002117 	ldw	r20,132(sp)
 40087a8:	103eb926 	beq	r2,zero,4008290 <__ram_exceptions_end+0xfac04104>
 40087ac:	d9002017 	ldw	r4,128(sp)
 40087b0:	d9801a04 	addi	r6,sp,104
 40087b4:	a00b883a 	mov	r5,r20
 40087b8:	40074280 	call	4007428 <__sprint_r.part.0>
 40087bc:	003eb406 	br	4008290 <__ram_exceptions_end+0xfac04104>
 40087c0:	80c00043 	ldbu	r3,1(r16)
 40087c4:	a5000814 	ori	r20,r20,32
 40087c8:	84000044 	addi	r16,r16,1
 40087cc:	18c03fcc 	andi	r3,r3,255
 40087d0:	18c0201c 	xori	r3,r3,128
 40087d4:	18ffe004 	addi	r3,r3,-128
 40087d8:	003bb706 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 40087dc:	a809883a 	mov	r4,r21
 40087e0:	d8c02a15 	stw	r3,168(sp)
 40087e4:	da002b15 	stw	r8,172(sp)
 40087e8:	40073900 	call	4007390 <strlen>
 40087ec:	d8c02a17 	ldw	r3,168(sp)
 40087f0:	1027883a 	mov	r19,r2
 40087f4:	df001d83 	ldbu	fp,118(sp)
 40087f8:	d8c02215 	stw	r3,136(sp)
 40087fc:	0013883a 	mov	r9,zero
 4008800:	da002b17 	ldw	r8,172(sp)
 4008804:	003c4d06 	br	400793c <__ram_exceptions_end+0xfac037b0>
 4008808:	d9402117 	ldw	r5,132(sp)
 400880c:	d9002017 	ldw	r4,128(sp)
 4008810:	d9801a04 	addi	r6,sp,104
 4008814:	da402c15 	stw	r9,176(sp)
 4008818:	40074280 	call	4007428 <__sprint_r.part.0>
 400881c:	da402c17 	ldw	r9,176(sp)
 4008820:	103e9a1e 	bne	r2,zero,400828c <__ram_exceptions_end+0xfac04100>
 4008824:	d9401b17 	ldw	r5,108(sp)
 4008828:	d8801c17 	ldw	r2,112(sp)
 400882c:	d811883a 	mov	r8,sp
 4008830:	29000044 	addi	r4,r5,1
 4008834:	003e4206 	br	4008140 <__ram_exceptions_end+0xfac03fb4>
 4008838:	d9401b17 	ldw	r5,108(sp)
 400883c:	01010074 	movhi	r4,1025
 4008840:	213f1004 	addi	r4,r4,-960
 4008844:	d9002415 	stw	r4,144(sp)
 4008848:	29400044 	addi	r5,r5,1
 400884c:	003c6d06 	br	4007a04 <__ram_exceptions_end+0xfac03878>
 4008850:	0039883a 	mov	fp,zero
 4008854:	00800084 	movi	r2,2
 4008858:	10803fcc 	andi	r2,r2,255
 400885c:	01000044 	movi	r4,1
 4008860:	11001e26 	beq	r2,r4,40088dc <___vfiprintf_internal_r+0x13a0>
 4008864:	01000084 	movi	r4,2
 4008868:	11001e1e 	bne	r2,r4,40088e4 <___vfiprintf_internal_r+0x13a8>
 400886c:	1829883a 	mov	r20,r3
 4008870:	003eea06 	br	400841c <__ram_exceptions_end+0xfac04290>
 4008874:	a007883a 	mov	r3,r20
 4008878:	00800044 	movi	r2,1
 400887c:	003ff606 	br	4008858 <__ram_exceptions_end+0xfac046cc>
 4008880:	00800184 	movi	r2,6
 4008884:	1240012e 	bgeu	r2,r9,400888c <___vfiprintf_internal_r+0x1350>
 4008888:	1013883a 	mov	r9,r2
 400888c:	4827883a 	mov	r19,r9
 4008890:	4825883a 	mov	r18,r9
 4008894:	48001516 	blt	r9,zero,40088ec <___vfiprintf_internal_r+0x13b0>
 4008898:	05410074 	movhi	r21,1025
 400889c:	d8c02215 	stw	r3,136(sp)
 40088a0:	ad7eb004 	addi	r21,r21,-1344
 40088a4:	003d1406 	br	4007cf8 <__ram_exceptions_end+0xfac03b6c>
 40088a8:	02810074 	movhi	r10,1025
 40088ac:	52bf0c04 	addi	r10,r10,-976
 40088b0:	da802415 	stw	r10,144(sp)
 40088b4:	200d883a 	mov	r6,r4
 40088b8:	003c9106 	br	4007b00 <__ram_exceptions_end+0xfac03974>
 40088bc:	5021883a 	mov	r16,r10
 40088c0:	0013883a 	mov	r9,zero
 40088c4:	003b7d06 	br	40076bc <__ram_exceptions_end+0xfac03530>
 40088c8:	4827883a 	mov	r19,r9
 40088cc:	df001d83 	ldbu	fp,118(sp)
 40088d0:	d8c02215 	stw	r3,136(sp)
 40088d4:	0013883a 	mov	r9,zero
 40088d8:	003c1806 	br	400793c <__ram_exceptions_end+0xfac037b0>
 40088dc:	1829883a 	mov	r20,r3
 40088e0:	003d1806 	br	4007d44 <__ram_exceptions_end+0xfac03bb8>
 40088e4:	1829883a 	mov	r20,r3
 40088e8:	003ccd06 	br	4007c20 <__ram_exceptions_end+0xfac03a94>
 40088ec:	0025883a 	mov	r18,zero
 40088f0:	003fe906 	br	4008898 <__ram_exceptions_end+0xfac0470c>
 40088f4:	d8802217 	ldw	r2,136(sp)
 40088f8:	80c00043 	ldbu	r3,1(r16)
 40088fc:	5021883a 	mov	r16,r10
 4008900:	12400017 	ldw	r9,0(r2)
 4008904:	10800104 	addi	r2,r2,4
 4008908:	d8802215 	stw	r2,136(sp)
 400890c:	483faf0e 	bge	r9,zero,40087cc <__ram_exceptions_end+0xfac04640>
 4008910:	18c03fcc 	andi	r3,r3,255
 4008914:	18c0201c 	xori	r3,r3,128
 4008918:	027fffc4 	movi	r9,-1
 400891c:	18ffe004 	addi	r3,r3,-128
 4008920:	003b6506 	br	40076b8 <__ram_exceptions_end+0xfac0352c>
 4008924:	d9c01d85 	stb	r7,118(sp)
 4008928:	003ca006 	br	4007bac <__ram_exceptions_end+0xfac03a20>
 400892c:	d9c01d85 	stb	r7,118(sp)
 4008930:	003cad06 	br	4007be8 <__ram_exceptions_end+0xfac03a5c>
 4008934:	d9c01d85 	stb	r7,118(sp)
 4008938:	003d7d06 	br	4007f30 <__ram_exceptions_end+0xfac03da4>
 400893c:	d9c01d85 	stb	r7,118(sp)
 4008940:	003d5f06 	br	4007ec0 <__ram_exceptions_end+0xfac03d34>
 4008944:	a080004c 	andi	r2,r20,1
 4008948:	0039883a 	mov	fp,zero
 400894c:	10000526 	beq	r2,zero,4008964 <___vfiprintf_internal_r+0x1428>
 4008950:	00800c04 	movi	r2,48
 4008954:	d88019c5 	stb	r2,103(sp)
 4008958:	dcc02717 	ldw	r19,156(sp)
 400895c:	dd4019c4 	addi	r21,sp,103
 4008960:	003bf606 	br	400793c <__ram_exceptions_end+0xfac037b0>
 4008964:	0027883a 	mov	r19,zero
 4008968:	dd401a04 	addi	r21,sp,104
 400896c:	003bf306 	br	400793c <__ram_exceptions_end+0xfac037b0>
 4008970:	d9c01d85 	stb	r7,118(sp)
 4008974:	003dc806 	br	4008098 <__ram_exceptions_end+0xfac03f0c>
 4008978:	d9c01d85 	stb	r7,118(sp)
 400897c:	003d3a06 	br	4007e68 <__ram_exceptions_end+0xfac03cdc>
 4008980:	d9c01d85 	stb	r7,118(sp)
 4008984:	003d2a06 	br	4007e30 <__ram_exceptions_end+0xfac03ca4>
 4008988:	d9c01d85 	stb	r7,118(sp)
 400898c:	003cde06 	br	4007d08 <__ram_exceptions_end+0xfac03b7c>
 4008990:	d9c01d85 	stb	r7,118(sp)
 4008994:	003cbc06 	br	4007c88 <__ram_exceptions_end+0xfac03afc>

04008998 <__vfiprintf_internal>:
 4008998:	00810074 	movhi	r2,1025
 400899c:	10826504 	addi	r2,r2,2452
 40089a0:	300f883a 	mov	r7,r6
 40089a4:	280d883a 	mov	r6,r5
 40089a8:	200b883a 	mov	r5,r4
 40089ac:	11000017 	ldw	r4,0(r2)
 40089b0:	400753c1 	jmpi	400753c <___vfiprintf_internal_r>

040089b4 <__sbprintf>:
 40089b4:	2880030b 	ldhu	r2,12(r5)
 40089b8:	2ac01917 	ldw	r11,100(r5)
 40089bc:	2a80038b 	ldhu	r10,14(r5)
 40089c0:	2a400717 	ldw	r9,28(r5)
 40089c4:	2a000917 	ldw	r8,36(r5)
 40089c8:	defee204 	addi	sp,sp,-1144
 40089cc:	00c10004 	movi	r3,1024
 40089d0:	dc011a15 	stw	r16,1128(sp)
 40089d4:	10bfff4c 	andi	r2,r2,65533
 40089d8:	2821883a 	mov	r16,r5
 40089dc:	d8cb883a 	add	r5,sp,r3
 40089e0:	dc811c15 	stw	r18,1136(sp)
 40089e4:	dc411b15 	stw	r17,1132(sp)
 40089e8:	dfc11d15 	stw	ra,1140(sp)
 40089ec:	2025883a 	mov	r18,r4
 40089f0:	d881030d 	sth	r2,1036(sp)
 40089f4:	dac11915 	stw	r11,1124(sp)
 40089f8:	da81038d 	sth	r10,1038(sp)
 40089fc:	da410715 	stw	r9,1052(sp)
 4008a00:	da010915 	stw	r8,1060(sp)
 4008a04:	dec10015 	stw	sp,1024(sp)
 4008a08:	dec10415 	stw	sp,1040(sp)
 4008a0c:	d8c10215 	stw	r3,1032(sp)
 4008a10:	d8c10515 	stw	r3,1044(sp)
 4008a14:	d8010615 	stw	zero,1048(sp)
 4008a18:	400753c0 	call	400753c <___vfiprintf_internal_r>
 4008a1c:	1023883a 	mov	r17,r2
 4008a20:	10000416 	blt	r2,zero,4008a34 <__sbprintf+0x80>
 4008a24:	d9410004 	addi	r5,sp,1024
 4008a28:	9009883a 	mov	r4,r18
 4008a2c:	40048d40 	call	40048d4 <_fflush_r>
 4008a30:	10000d1e 	bne	r2,zero,4008a68 <__sbprintf+0xb4>
 4008a34:	d881030b 	ldhu	r2,1036(sp)
 4008a38:	1080100c 	andi	r2,r2,64
 4008a3c:	10000326 	beq	r2,zero,4008a4c <__sbprintf+0x98>
 4008a40:	8080030b 	ldhu	r2,12(r16)
 4008a44:	10801014 	ori	r2,r2,64
 4008a48:	8080030d 	sth	r2,12(r16)
 4008a4c:	8805883a 	mov	r2,r17
 4008a50:	dfc11d17 	ldw	ra,1140(sp)
 4008a54:	dc811c17 	ldw	r18,1136(sp)
 4008a58:	dc411b17 	ldw	r17,1132(sp)
 4008a5c:	dc011a17 	ldw	r16,1128(sp)
 4008a60:	dec11e04 	addi	sp,sp,1144
 4008a64:	f800283a 	ret
 4008a68:	047fffc4 	movi	r17,-1
 4008a6c:	003ff106 	br	4008a34 <__ram_exceptions_end+0xfac048a8>

04008a70 <_write_r>:
 4008a70:	defffd04 	addi	sp,sp,-12
 4008a74:	2805883a 	mov	r2,r5
 4008a78:	dc000015 	stw	r16,0(sp)
 4008a7c:	04010074 	movhi	r16,1025
 4008a80:	dc400115 	stw	r17,4(sp)
 4008a84:	300b883a 	mov	r5,r6
 4008a88:	84059c04 	addi	r16,r16,5744
 4008a8c:	2023883a 	mov	r17,r4
 4008a90:	380d883a 	mov	r6,r7
 4008a94:	1009883a 	mov	r4,r2
 4008a98:	dfc00215 	stw	ra,8(sp)
 4008a9c:	80000015 	stw	zero,0(r16)
 4008aa0:	400d8540 	call	400d854 <write>
 4008aa4:	00ffffc4 	movi	r3,-1
 4008aa8:	10c00526 	beq	r2,r3,4008ac0 <_write_r+0x50>
 4008aac:	dfc00217 	ldw	ra,8(sp)
 4008ab0:	dc400117 	ldw	r17,4(sp)
 4008ab4:	dc000017 	ldw	r16,0(sp)
 4008ab8:	dec00304 	addi	sp,sp,12
 4008abc:	f800283a 	ret
 4008ac0:	80c00017 	ldw	r3,0(r16)
 4008ac4:	183ff926 	beq	r3,zero,4008aac <__ram_exceptions_end+0xfac04920>
 4008ac8:	88c00015 	stw	r3,0(r17)
 4008acc:	003ff706 	br	4008aac <__ram_exceptions_end+0xfac04920>

04008ad0 <_close_r>:
 4008ad0:	defffd04 	addi	sp,sp,-12
 4008ad4:	dc000015 	stw	r16,0(sp)
 4008ad8:	04010074 	movhi	r16,1025
 4008adc:	dc400115 	stw	r17,4(sp)
 4008ae0:	84059c04 	addi	r16,r16,5744
 4008ae4:	2023883a 	mov	r17,r4
 4008ae8:	2809883a 	mov	r4,r5
 4008aec:	dfc00215 	stw	ra,8(sp)
 4008af0:	80000015 	stw	zero,0(r16)
 4008af4:	400d0b80 	call	400d0b8 <close>
 4008af8:	00ffffc4 	movi	r3,-1
 4008afc:	10c00526 	beq	r2,r3,4008b14 <_close_r+0x44>
 4008b00:	dfc00217 	ldw	ra,8(sp)
 4008b04:	dc400117 	ldw	r17,4(sp)
 4008b08:	dc000017 	ldw	r16,0(sp)
 4008b0c:	dec00304 	addi	sp,sp,12
 4008b10:	f800283a 	ret
 4008b14:	80c00017 	ldw	r3,0(r16)
 4008b18:	183ff926 	beq	r3,zero,4008b00 <__ram_exceptions_end+0xfac04974>
 4008b1c:	88c00015 	stw	r3,0(r17)
 4008b20:	003ff706 	br	4008b00 <__ram_exceptions_end+0xfac04974>

04008b24 <_calloc_r>:
 4008b24:	298b383a 	mul	r5,r5,r6
 4008b28:	defffe04 	addi	sp,sp,-8
 4008b2c:	dfc00115 	stw	ra,4(sp)
 4008b30:	dc000015 	stw	r16,0(sp)
 4008b34:	40055540 	call	4005554 <_malloc_r>
 4008b38:	10002926 	beq	r2,zero,4008be0 <_calloc_r+0xbc>
 4008b3c:	11bfff17 	ldw	r6,-4(r2)
 4008b40:	1021883a 	mov	r16,r2
 4008b44:	00bfff04 	movi	r2,-4
 4008b48:	308c703a 	and	r6,r6,r2
 4008b4c:	00c00904 	movi	r3,36
 4008b50:	308d883a 	add	r6,r6,r2
 4008b54:	19801636 	bltu	r3,r6,4008bb0 <_calloc_r+0x8c>
 4008b58:	008004c4 	movi	r2,19
 4008b5c:	11800b2e 	bgeu	r2,r6,4008b8c <_calloc_r+0x68>
 4008b60:	80000015 	stw	zero,0(r16)
 4008b64:	80000115 	stw	zero,4(r16)
 4008b68:	008006c4 	movi	r2,27
 4008b6c:	11801a2e 	bgeu	r2,r6,4008bd8 <_calloc_r+0xb4>
 4008b70:	80000215 	stw	zero,8(r16)
 4008b74:	80000315 	stw	zero,12(r16)
 4008b78:	30c0151e 	bne	r6,r3,4008bd0 <_calloc_r+0xac>
 4008b7c:	80000415 	stw	zero,16(r16)
 4008b80:	80800604 	addi	r2,r16,24
 4008b84:	80000515 	stw	zero,20(r16)
 4008b88:	00000106 	br	4008b90 <_calloc_r+0x6c>
 4008b8c:	8005883a 	mov	r2,r16
 4008b90:	10000015 	stw	zero,0(r2)
 4008b94:	10000115 	stw	zero,4(r2)
 4008b98:	10000215 	stw	zero,8(r2)
 4008b9c:	8005883a 	mov	r2,r16
 4008ba0:	dfc00117 	ldw	ra,4(sp)
 4008ba4:	dc000017 	ldw	r16,0(sp)
 4008ba8:	dec00204 	addi	sp,sp,8
 4008bac:	f800283a 	ret
 4008bb0:	000b883a 	mov	r5,zero
 4008bb4:	8009883a 	mov	r4,r16
 4008bb8:	4005f8c0 	call	4005f8c <memset>
 4008bbc:	8005883a 	mov	r2,r16
 4008bc0:	dfc00117 	ldw	ra,4(sp)
 4008bc4:	dc000017 	ldw	r16,0(sp)
 4008bc8:	dec00204 	addi	sp,sp,8
 4008bcc:	f800283a 	ret
 4008bd0:	80800404 	addi	r2,r16,16
 4008bd4:	003fee06 	br	4008b90 <__ram_exceptions_end+0xfac04a04>
 4008bd8:	80800204 	addi	r2,r16,8
 4008bdc:	003fec06 	br	4008b90 <__ram_exceptions_end+0xfac04a04>
 4008be0:	0005883a 	mov	r2,zero
 4008be4:	003fee06 	br	4008ba0 <__ram_exceptions_end+0xfac04a14>

04008be8 <_fclose_r>:
 4008be8:	28003926 	beq	r5,zero,4008cd0 <_fclose_r+0xe8>
 4008bec:	defffc04 	addi	sp,sp,-16
 4008bf0:	dc400115 	stw	r17,4(sp)
 4008bf4:	dc000015 	stw	r16,0(sp)
 4008bf8:	dfc00315 	stw	ra,12(sp)
 4008bfc:	dc800215 	stw	r18,8(sp)
 4008c00:	2023883a 	mov	r17,r4
 4008c04:	2821883a 	mov	r16,r5
 4008c08:	20000226 	beq	r4,zero,4008c14 <_fclose_r+0x2c>
 4008c0c:	20800e17 	ldw	r2,56(r4)
 4008c10:	10002726 	beq	r2,zero,4008cb0 <_fclose_r+0xc8>
 4008c14:	8080030f 	ldh	r2,12(r16)
 4008c18:	1000071e 	bne	r2,zero,4008c38 <_fclose_r+0x50>
 4008c1c:	0005883a 	mov	r2,zero
 4008c20:	dfc00317 	ldw	ra,12(sp)
 4008c24:	dc800217 	ldw	r18,8(sp)
 4008c28:	dc400117 	ldw	r17,4(sp)
 4008c2c:	dc000017 	ldw	r16,0(sp)
 4008c30:	dec00404 	addi	sp,sp,16
 4008c34:	f800283a 	ret
 4008c38:	800b883a 	mov	r5,r16
 4008c3c:	8809883a 	mov	r4,r17
 4008c40:	40046b80 	call	40046b8 <__sflush_r>
 4008c44:	1025883a 	mov	r18,r2
 4008c48:	80800b17 	ldw	r2,44(r16)
 4008c4c:	10000426 	beq	r2,zero,4008c60 <_fclose_r+0x78>
 4008c50:	81400717 	ldw	r5,28(r16)
 4008c54:	8809883a 	mov	r4,r17
 4008c58:	103ee83a 	callr	r2
 4008c5c:	10001616 	blt	r2,zero,4008cb8 <_fclose_r+0xd0>
 4008c60:	8080030b 	ldhu	r2,12(r16)
 4008c64:	1080200c 	andi	r2,r2,128
 4008c68:	1000151e 	bne	r2,zero,4008cc0 <_fclose_r+0xd8>
 4008c6c:	81400c17 	ldw	r5,48(r16)
 4008c70:	28000526 	beq	r5,zero,4008c88 <_fclose_r+0xa0>
 4008c74:	80801004 	addi	r2,r16,64
 4008c78:	28800226 	beq	r5,r2,4008c84 <_fclose_r+0x9c>
 4008c7c:	8809883a 	mov	r4,r17
 4008c80:	4004e240 	call	4004e24 <_free_r>
 4008c84:	80000c15 	stw	zero,48(r16)
 4008c88:	81401117 	ldw	r5,68(r16)
 4008c8c:	28000326 	beq	r5,zero,4008c9c <_fclose_r+0xb4>
 4008c90:	8809883a 	mov	r4,r17
 4008c94:	4004e240 	call	4004e24 <_free_r>
 4008c98:	80001115 	stw	zero,68(r16)
 4008c9c:	4004cc00 	call	4004cc0 <__sfp_lock_acquire>
 4008ca0:	8000030d 	sth	zero,12(r16)
 4008ca4:	4004cc40 	call	4004cc4 <__sfp_lock_release>
 4008ca8:	9005883a 	mov	r2,r18
 4008cac:	003fdc06 	br	4008c20 <__ram_exceptions_end+0xfac04a94>
 4008cb0:	4004cb00 	call	4004cb0 <__sinit>
 4008cb4:	003fd706 	br	4008c14 <__ram_exceptions_end+0xfac04a88>
 4008cb8:	04bfffc4 	movi	r18,-1
 4008cbc:	003fe806 	br	4008c60 <__ram_exceptions_end+0xfac04ad4>
 4008cc0:	81400417 	ldw	r5,16(r16)
 4008cc4:	8809883a 	mov	r4,r17
 4008cc8:	4004e240 	call	4004e24 <_free_r>
 4008ccc:	003fe706 	br	4008c6c <__ram_exceptions_end+0xfac04ae0>
 4008cd0:	0005883a 	mov	r2,zero
 4008cd4:	f800283a 	ret

04008cd8 <fclose>:
 4008cd8:	00810074 	movhi	r2,1025
 4008cdc:	10826504 	addi	r2,r2,2452
 4008ce0:	200b883a 	mov	r5,r4
 4008ce4:	11000017 	ldw	r4,0(r2)
 4008ce8:	4008be81 	jmpi	4008be8 <_fclose_r>

04008cec <__fputwc>:
 4008cec:	defff804 	addi	sp,sp,-32
 4008cf0:	dcc00415 	stw	r19,16(sp)
 4008cf4:	dc800315 	stw	r18,12(sp)
 4008cf8:	dc000115 	stw	r16,4(sp)
 4008cfc:	dfc00715 	stw	ra,28(sp)
 4008d00:	dd400615 	stw	r21,24(sp)
 4008d04:	dd000515 	stw	r20,20(sp)
 4008d08:	dc400215 	stw	r17,8(sp)
 4008d0c:	2027883a 	mov	r19,r4
 4008d10:	2825883a 	mov	r18,r5
 4008d14:	3021883a 	mov	r16,r6
 4008d18:	40053440 	call	4005344 <__locale_mb_cur_max>
 4008d1c:	00c00044 	movi	r3,1
 4008d20:	10c03e26 	beq	r2,r3,4008e1c <__fputwc+0x130>
 4008d24:	81c01704 	addi	r7,r16,92
 4008d28:	900d883a 	mov	r6,r18
 4008d2c:	d80b883a 	mov	r5,sp
 4008d30:	9809883a 	mov	r4,r19
 4008d34:	4009d380 	call	4009d38 <_wcrtomb_r>
 4008d38:	1029883a 	mov	r20,r2
 4008d3c:	00bfffc4 	movi	r2,-1
 4008d40:	a0802026 	beq	r20,r2,4008dc4 <__fputwc+0xd8>
 4008d44:	d9400003 	ldbu	r5,0(sp)
 4008d48:	a0001c26 	beq	r20,zero,4008dbc <__fputwc+0xd0>
 4008d4c:	0023883a 	mov	r17,zero
 4008d50:	05400284 	movi	r21,10
 4008d54:	00000906 	br	4008d7c <__fputwc+0x90>
 4008d58:	80800017 	ldw	r2,0(r16)
 4008d5c:	11400005 	stb	r5,0(r2)
 4008d60:	80c00017 	ldw	r3,0(r16)
 4008d64:	18c00044 	addi	r3,r3,1
 4008d68:	80c00015 	stw	r3,0(r16)
 4008d6c:	8c400044 	addi	r17,r17,1
 4008d70:	dc45883a 	add	r2,sp,r17
 4008d74:	8d00112e 	bgeu	r17,r20,4008dbc <__fputwc+0xd0>
 4008d78:	11400003 	ldbu	r5,0(r2)
 4008d7c:	80c00217 	ldw	r3,8(r16)
 4008d80:	18ffffc4 	addi	r3,r3,-1
 4008d84:	80c00215 	stw	r3,8(r16)
 4008d88:	183ff30e 	bge	r3,zero,4008d58 <__ram_exceptions_end+0xfac04bcc>
 4008d8c:	80800617 	ldw	r2,24(r16)
 4008d90:	18801916 	blt	r3,r2,4008df8 <__fputwc+0x10c>
 4008d94:	80800017 	ldw	r2,0(r16)
 4008d98:	11400005 	stb	r5,0(r2)
 4008d9c:	80800017 	ldw	r2,0(r16)
 4008da0:	10c00003 	ldbu	r3,0(r2)
 4008da4:	10800044 	addi	r2,r2,1
 4008da8:	1d402326 	beq	r3,r21,4008e38 <__fputwc+0x14c>
 4008dac:	80800015 	stw	r2,0(r16)
 4008db0:	8c400044 	addi	r17,r17,1
 4008db4:	dc45883a 	add	r2,sp,r17
 4008db8:	8d3fef36 	bltu	r17,r20,4008d78 <__ram_exceptions_end+0xfac04bec>
 4008dbc:	9005883a 	mov	r2,r18
 4008dc0:	00000406 	br	4008dd4 <__fputwc+0xe8>
 4008dc4:	80c0030b 	ldhu	r3,12(r16)
 4008dc8:	a005883a 	mov	r2,r20
 4008dcc:	18c01014 	ori	r3,r3,64
 4008dd0:	80c0030d 	sth	r3,12(r16)
 4008dd4:	dfc00717 	ldw	ra,28(sp)
 4008dd8:	dd400617 	ldw	r21,24(sp)
 4008ddc:	dd000517 	ldw	r20,20(sp)
 4008de0:	dcc00417 	ldw	r19,16(sp)
 4008de4:	dc800317 	ldw	r18,12(sp)
 4008de8:	dc400217 	ldw	r17,8(sp)
 4008dec:	dc000117 	ldw	r16,4(sp)
 4008df0:	dec00804 	addi	sp,sp,32
 4008df4:	f800283a 	ret
 4008df8:	800d883a 	mov	r6,r16
 4008dfc:	29403fcc 	andi	r5,r5,255
 4008e00:	9809883a 	mov	r4,r19
 4008e04:	4009be00 	call	4009be0 <__swbuf_r>
 4008e08:	10bfffe0 	cmpeqi	r2,r2,-1
 4008e0c:	10803fcc 	andi	r2,r2,255
 4008e10:	103fd626 	beq	r2,zero,4008d6c <__ram_exceptions_end+0xfac04be0>
 4008e14:	00bfffc4 	movi	r2,-1
 4008e18:	003fee06 	br	4008dd4 <__ram_exceptions_end+0xfac04c48>
 4008e1c:	90ffffc4 	addi	r3,r18,-1
 4008e20:	01003f84 	movi	r4,254
 4008e24:	20ffbf36 	bltu	r4,r3,4008d24 <__ram_exceptions_end+0xfac04b98>
 4008e28:	900b883a 	mov	r5,r18
 4008e2c:	dc800005 	stb	r18,0(sp)
 4008e30:	1029883a 	mov	r20,r2
 4008e34:	003fc506 	br	4008d4c <__ram_exceptions_end+0xfac04bc0>
 4008e38:	800d883a 	mov	r6,r16
 4008e3c:	a80b883a 	mov	r5,r21
 4008e40:	9809883a 	mov	r4,r19
 4008e44:	4009be00 	call	4009be0 <__swbuf_r>
 4008e48:	10bfffe0 	cmpeqi	r2,r2,-1
 4008e4c:	003fef06 	br	4008e0c <__ram_exceptions_end+0xfac04c80>

04008e50 <_fputwc_r>:
 4008e50:	3080030b 	ldhu	r2,12(r6)
 4008e54:	10c8000c 	andi	r3,r2,8192
 4008e58:	1800051e 	bne	r3,zero,4008e70 <_fputwc_r+0x20>
 4008e5c:	30c01917 	ldw	r3,100(r6)
 4008e60:	10880014 	ori	r2,r2,8192
 4008e64:	3080030d 	sth	r2,12(r6)
 4008e68:	18880014 	ori	r2,r3,8192
 4008e6c:	30801915 	stw	r2,100(r6)
 4008e70:	4008cec1 	jmpi	4008cec <__fputwc>

04008e74 <fputwc>:
 4008e74:	00810074 	movhi	r2,1025
 4008e78:	defffc04 	addi	sp,sp,-16
 4008e7c:	10826504 	addi	r2,r2,2452
 4008e80:	dc000115 	stw	r16,4(sp)
 4008e84:	14000017 	ldw	r16,0(r2)
 4008e88:	dc400215 	stw	r17,8(sp)
 4008e8c:	dfc00315 	stw	ra,12(sp)
 4008e90:	2023883a 	mov	r17,r4
 4008e94:	80000226 	beq	r16,zero,4008ea0 <fputwc+0x2c>
 4008e98:	80800e17 	ldw	r2,56(r16)
 4008e9c:	10001026 	beq	r2,zero,4008ee0 <fputwc+0x6c>
 4008ea0:	2880030b 	ldhu	r2,12(r5)
 4008ea4:	10c8000c 	andi	r3,r2,8192
 4008ea8:	1800051e 	bne	r3,zero,4008ec0 <fputwc+0x4c>
 4008eac:	28c01917 	ldw	r3,100(r5)
 4008eb0:	10880014 	ori	r2,r2,8192
 4008eb4:	2880030d 	sth	r2,12(r5)
 4008eb8:	18880014 	ori	r2,r3,8192
 4008ebc:	28801915 	stw	r2,100(r5)
 4008ec0:	280d883a 	mov	r6,r5
 4008ec4:	8009883a 	mov	r4,r16
 4008ec8:	880b883a 	mov	r5,r17
 4008ecc:	dfc00317 	ldw	ra,12(sp)
 4008ed0:	dc400217 	ldw	r17,8(sp)
 4008ed4:	dc000117 	ldw	r16,4(sp)
 4008ed8:	dec00404 	addi	sp,sp,16
 4008edc:	4008cec1 	jmpi	4008cec <__fputwc>
 4008ee0:	8009883a 	mov	r4,r16
 4008ee4:	d9400015 	stw	r5,0(sp)
 4008ee8:	4004cb00 	call	4004cb0 <__sinit>
 4008eec:	d9400017 	ldw	r5,0(sp)
 4008ef0:	003feb06 	br	4008ea0 <__ram_exceptions_end+0xfac04d14>

04008ef4 <_fstat_r>:
 4008ef4:	defffd04 	addi	sp,sp,-12
 4008ef8:	2805883a 	mov	r2,r5
 4008efc:	dc000015 	stw	r16,0(sp)
 4008f00:	04010074 	movhi	r16,1025
 4008f04:	dc400115 	stw	r17,4(sp)
 4008f08:	84059c04 	addi	r16,r16,5744
 4008f0c:	2023883a 	mov	r17,r4
 4008f10:	300b883a 	mov	r5,r6
 4008f14:	1009883a 	mov	r4,r2
 4008f18:	dfc00215 	stw	ra,8(sp)
 4008f1c:	80000015 	stw	zero,0(r16)
 4008f20:	400d17c0 	call	400d17c <fstat>
 4008f24:	00ffffc4 	movi	r3,-1
 4008f28:	10c00526 	beq	r2,r3,4008f40 <_fstat_r+0x4c>
 4008f2c:	dfc00217 	ldw	ra,8(sp)
 4008f30:	dc400117 	ldw	r17,4(sp)
 4008f34:	dc000017 	ldw	r16,0(sp)
 4008f38:	dec00304 	addi	sp,sp,12
 4008f3c:	f800283a 	ret
 4008f40:	80c00017 	ldw	r3,0(r16)
 4008f44:	183ff926 	beq	r3,zero,4008f2c <__ram_exceptions_end+0xfac04da0>
 4008f48:	88c00015 	stw	r3,0(r17)
 4008f4c:	003ff706 	br	4008f2c <__ram_exceptions_end+0xfac04da0>

04008f50 <__sfvwrite_r>:
 4008f50:	30800217 	ldw	r2,8(r6)
 4008f54:	10006726 	beq	r2,zero,40090f4 <__sfvwrite_r+0x1a4>
 4008f58:	28c0030b 	ldhu	r3,12(r5)
 4008f5c:	defff404 	addi	sp,sp,-48
 4008f60:	dd400715 	stw	r21,28(sp)
 4008f64:	dd000615 	stw	r20,24(sp)
 4008f68:	dc000215 	stw	r16,8(sp)
 4008f6c:	dfc00b15 	stw	ra,44(sp)
 4008f70:	df000a15 	stw	fp,40(sp)
 4008f74:	ddc00915 	stw	r23,36(sp)
 4008f78:	dd800815 	stw	r22,32(sp)
 4008f7c:	dcc00515 	stw	r19,20(sp)
 4008f80:	dc800415 	stw	r18,16(sp)
 4008f84:	dc400315 	stw	r17,12(sp)
 4008f88:	1880020c 	andi	r2,r3,8
 4008f8c:	2821883a 	mov	r16,r5
 4008f90:	202b883a 	mov	r21,r4
 4008f94:	3029883a 	mov	r20,r6
 4008f98:	10002726 	beq	r2,zero,4009038 <__sfvwrite_r+0xe8>
 4008f9c:	28800417 	ldw	r2,16(r5)
 4008fa0:	10002526 	beq	r2,zero,4009038 <__sfvwrite_r+0xe8>
 4008fa4:	1880008c 	andi	r2,r3,2
 4008fa8:	a4400017 	ldw	r17,0(r20)
 4008fac:	10002a26 	beq	r2,zero,4009058 <__sfvwrite_r+0x108>
 4008fb0:	05a00034 	movhi	r22,32768
 4008fb4:	0027883a 	mov	r19,zero
 4008fb8:	0025883a 	mov	r18,zero
 4008fbc:	b5bf0004 	addi	r22,r22,-1024
 4008fc0:	980d883a 	mov	r6,r19
 4008fc4:	a809883a 	mov	r4,r21
 4008fc8:	90004626 	beq	r18,zero,40090e4 <__sfvwrite_r+0x194>
 4008fcc:	900f883a 	mov	r7,r18
 4008fd0:	b480022e 	bgeu	r22,r18,4008fdc <__sfvwrite_r+0x8c>
 4008fd4:	01e00034 	movhi	r7,32768
 4008fd8:	39ff0004 	addi	r7,r7,-1024
 4008fdc:	80800917 	ldw	r2,36(r16)
 4008fe0:	81400717 	ldw	r5,28(r16)
 4008fe4:	103ee83a 	callr	r2
 4008fe8:	0080570e 	bge	zero,r2,4009148 <__sfvwrite_r+0x1f8>
 4008fec:	a0c00217 	ldw	r3,8(r20)
 4008ff0:	98a7883a 	add	r19,r19,r2
 4008ff4:	90a5c83a 	sub	r18,r18,r2
 4008ff8:	1885c83a 	sub	r2,r3,r2
 4008ffc:	a0800215 	stw	r2,8(r20)
 4009000:	103fef1e 	bne	r2,zero,4008fc0 <__ram_exceptions_end+0xfac04e34>
 4009004:	0005883a 	mov	r2,zero
 4009008:	dfc00b17 	ldw	ra,44(sp)
 400900c:	df000a17 	ldw	fp,40(sp)
 4009010:	ddc00917 	ldw	r23,36(sp)
 4009014:	dd800817 	ldw	r22,32(sp)
 4009018:	dd400717 	ldw	r21,28(sp)
 400901c:	dd000617 	ldw	r20,24(sp)
 4009020:	dcc00517 	ldw	r19,20(sp)
 4009024:	dc800417 	ldw	r18,16(sp)
 4009028:	dc400317 	ldw	r17,12(sp)
 400902c:	dc000217 	ldw	r16,8(sp)
 4009030:	dec00c04 	addi	sp,sp,48
 4009034:	f800283a 	ret
 4009038:	800b883a 	mov	r5,r16
 400903c:	a809883a 	mov	r4,r21
 4009040:	4002cdc0 	call	4002cdc <__swsetup_r>
 4009044:	1000eb1e 	bne	r2,zero,40093f4 <__sfvwrite_r+0x4a4>
 4009048:	80c0030b 	ldhu	r3,12(r16)
 400904c:	a4400017 	ldw	r17,0(r20)
 4009050:	1880008c 	andi	r2,r3,2
 4009054:	103fd61e 	bne	r2,zero,4008fb0 <__ram_exceptions_end+0xfac04e24>
 4009058:	1880004c 	andi	r2,r3,1
 400905c:	10003f1e 	bne	r2,zero,400915c <__sfvwrite_r+0x20c>
 4009060:	0039883a 	mov	fp,zero
 4009064:	0025883a 	mov	r18,zero
 4009068:	90001a26 	beq	r18,zero,40090d4 <__sfvwrite_r+0x184>
 400906c:	1880800c 	andi	r2,r3,512
 4009070:	84c00217 	ldw	r19,8(r16)
 4009074:	10002126 	beq	r2,zero,40090fc <__sfvwrite_r+0x1ac>
 4009078:	982f883a 	mov	r23,r19
 400907c:	94c09336 	bltu	r18,r19,40092cc <__sfvwrite_r+0x37c>
 4009080:	1881200c 	andi	r2,r3,1152
 4009084:	10009e1e 	bne	r2,zero,4009300 <__sfvwrite_r+0x3b0>
 4009088:	81000017 	ldw	r4,0(r16)
 400908c:	b80d883a 	mov	r6,r23
 4009090:	e00b883a 	mov	r5,fp
 4009094:	40094c00 	call	40094c0 <memmove>
 4009098:	80c00217 	ldw	r3,8(r16)
 400909c:	81000017 	ldw	r4,0(r16)
 40090a0:	9005883a 	mov	r2,r18
 40090a4:	1ce7c83a 	sub	r19,r3,r19
 40090a8:	25cf883a 	add	r7,r4,r23
 40090ac:	84c00215 	stw	r19,8(r16)
 40090b0:	81c00015 	stw	r7,0(r16)
 40090b4:	a0c00217 	ldw	r3,8(r20)
 40090b8:	e0b9883a 	add	fp,fp,r2
 40090bc:	90a5c83a 	sub	r18,r18,r2
 40090c0:	18a7c83a 	sub	r19,r3,r2
 40090c4:	a4c00215 	stw	r19,8(r20)
 40090c8:	983fce26 	beq	r19,zero,4009004 <__ram_exceptions_end+0xfac04e78>
 40090cc:	80c0030b 	ldhu	r3,12(r16)
 40090d0:	903fe61e 	bne	r18,zero,400906c <__ram_exceptions_end+0xfac04ee0>
 40090d4:	8f000017 	ldw	fp,0(r17)
 40090d8:	8c800117 	ldw	r18,4(r17)
 40090dc:	8c400204 	addi	r17,r17,8
 40090e0:	003fe106 	br	4009068 <__ram_exceptions_end+0xfac04edc>
 40090e4:	8cc00017 	ldw	r19,0(r17)
 40090e8:	8c800117 	ldw	r18,4(r17)
 40090ec:	8c400204 	addi	r17,r17,8
 40090f0:	003fb306 	br	4008fc0 <__ram_exceptions_end+0xfac04e34>
 40090f4:	0005883a 	mov	r2,zero
 40090f8:	f800283a 	ret
 40090fc:	81000017 	ldw	r4,0(r16)
 4009100:	80800417 	ldw	r2,16(r16)
 4009104:	11005736 	bltu	r2,r4,4009264 <__sfvwrite_r+0x314>
 4009108:	85c00517 	ldw	r23,20(r16)
 400910c:	95c05536 	bltu	r18,r23,4009264 <__sfvwrite_r+0x314>
 4009110:	00a00034 	movhi	r2,32768
 4009114:	10bfffc4 	addi	r2,r2,-1
 4009118:	9009883a 	mov	r4,r18
 400911c:	1480012e 	bgeu	r2,r18,4009124 <__sfvwrite_r+0x1d4>
 4009120:	1009883a 	mov	r4,r2
 4009124:	b80b883a 	mov	r5,r23
 4009128:	40007ec0 	call	40007ec <__divsi3>
 400912c:	15cf383a 	mul	r7,r2,r23
 4009130:	81400717 	ldw	r5,28(r16)
 4009134:	80800917 	ldw	r2,36(r16)
 4009138:	e00d883a 	mov	r6,fp
 400913c:	a809883a 	mov	r4,r21
 4009140:	103ee83a 	callr	r2
 4009144:	00bfdb16 	blt	zero,r2,40090b4 <__ram_exceptions_end+0xfac04f28>
 4009148:	8080030b 	ldhu	r2,12(r16)
 400914c:	10801014 	ori	r2,r2,64
 4009150:	8080030d 	sth	r2,12(r16)
 4009154:	00bfffc4 	movi	r2,-1
 4009158:	003fab06 	br	4009008 <__ram_exceptions_end+0xfac04e7c>
 400915c:	0027883a 	mov	r19,zero
 4009160:	0011883a 	mov	r8,zero
 4009164:	0039883a 	mov	fp,zero
 4009168:	0025883a 	mov	r18,zero
 400916c:	90001f26 	beq	r18,zero,40091ec <__sfvwrite_r+0x29c>
 4009170:	40005a26 	beq	r8,zero,40092dc <__sfvwrite_r+0x38c>
 4009174:	982d883a 	mov	r22,r19
 4009178:	94c0012e 	bgeu	r18,r19,4009180 <__sfvwrite_r+0x230>
 400917c:	902d883a 	mov	r22,r18
 4009180:	81000017 	ldw	r4,0(r16)
 4009184:	80800417 	ldw	r2,16(r16)
 4009188:	b02f883a 	mov	r23,r22
 400918c:	81c00517 	ldw	r7,20(r16)
 4009190:	1100032e 	bgeu	r2,r4,40091a0 <__sfvwrite_r+0x250>
 4009194:	80c00217 	ldw	r3,8(r16)
 4009198:	38c7883a 	add	r3,r7,r3
 400919c:	1d801816 	blt	r3,r22,4009200 <__sfvwrite_r+0x2b0>
 40091a0:	b1c03e16 	blt	r22,r7,400929c <__sfvwrite_r+0x34c>
 40091a4:	80800917 	ldw	r2,36(r16)
 40091a8:	81400717 	ldw	r5,28(r16)
 40091ac:	e00d883a 	mov	r6,fp
 40091b0:	da000115 	stw	r8,4(sp)
 40091b4:	a809883a 	mov	r4,r21
 40091b8:	103ee83a 	callr	r2
 40091bc:	102f883a 	mov	r23,r2
 40091c0:	da000117 	ldw	r8,4(sp)
 40091c4:	00bfe00e 	bge	zero,r2,4009148 <__ram_exceptions_end+0xfac04fbc>
 40091c8:	9de7c83a 	sub	r19,r19,r23
 40091cc:	98001f26 	beq	r19,zero,400924c <__sfvwrite_r+0x2fc>
 40091d0:	a0800217 	ldw	r2,8(r20)
 40091d4:	e5f9883a 	add	fp,fp,r23
 40091d8:	95e5c83a 	sub	r18,r18,r23
 40091dc:	15efc83a 	sub	r23,r2,r23
 40091e0:	a5c00215 	stw	r23,8(r20)
 40091e4:	b83f8726 	beq	r23,zero,4009004 <__ram_exceptions_end+0xfac04e78>
 40091e8:	903fe11e 	bne	r18,zero,4009170 <__ram_exceptions_end+0xfac04fe4>
 40091ec:	8f000017 	ldw	fp,0(r17)
 40091f0:	8c800117 	ldw	r18,4(r17)
 40091f4:	0011883a 	mov	r8,zero
 40091f8:	8c400204 	addi	r17,r17,8
 40091fc:	003fdb06 	br	400916c <__ram_exceptions_end+0xfac04fe0>
 4009200:	180d883a 	mov	r6,r3
 4009204:	e00b883a 	mov	r5,fp
 4009208:	da000115 	stw	r8,4(sp)
 400920c:	d8c00015 	stw	r3,0(sp)
 4009210:	40094c00 	call	40094c0 <memmove>
 4009214:	d8c00017 	ldw	r3,0(sp)
 4009218:	80800017 	ldw	r2,0(r16)
 400921c:	800b883a 	mov	r5,r16
 4009220:	a809883a 	mov	r4,r21
 4009224:	10c5883a 	add	r2,r2,r3
 4009228:	80800015 	stw	r2,0(r16)
 400922c:	d8c00015 	stw	r3,0(sp)
 4009230:	40048d40 	call	40048d4 <_fflush_r>
 4009234:	d8c00017 	ldw	r3,0(sp)
 4009238:	da000117 	ldw	r8,4(sp)
 400923c:	103fc21e 	bne	r2,zero,4009148 <__ram_exceptions_end+0xfac04fbc>
 4009240:	182f883a 	mov	r23,r3
 4009244:	9de7c83a 	sub	r19,r19,r23
 4009248:	983fe11e 	bne	r19,zero,40091d0 <__ram_exceptions_end+0xfac05044>
 400924c:	800b883a 	mov	r5,r16
 4009250:	a809883a 	mov	r4,r21
 4009254:	40048d40 	call	40048d4 <_fflush_r>
 4009258:	103fbb1e 	bne	r2,zero,4009148 <__ram_exceptions_end+0xfac04fbc>
 400925c:	0011883a 	mov	r8,zero
 4009260:	003fdb06 	br	40091d0 <__ram_exceptions_end+0xfac05044>
 4009264:	94c0012e 	bgeu	r18,r19,400926c <__sfvwrite_r+0x31c>
 4009268:	9027883a 	mov	r19,r18
 400926c:	980d883a 	mov	r6,r19
 4009270:	e00b883a 	mov	r5,fp
 4009274:	40094c00 	call	40094c0 <memmove>
 4009278:	80800217 	ldw	r2,8(r16)
 400927c:	80c00017 	ldw	r3,0(r16)
 4009280:	14c5c83a 	sub	r2,r2,r19
 4009284:	1cc7883a 	add	r3,r3,r19
 4009288:	80800215 	stw	r2,8(r16)
 400928c:	80c00015 	stw	r3,0(r16)
 4009290:	10004326 	beq	r2,zero,40093a0 <__sfvwrite_r+0x450>
 4009294:	9805883a 	mov	r2,r19
 4009298:	003f8606 	br	40090b4 <__ram_exceptions_end+0xfac04f28>
 400929c:	b00d883a 	mov	r6,r22
 40092a0:	e00b883a 	mov	r5,fp
 40092a4:	da000115 	stw	r8,4(sp)
 40092a8:	40094c00 	call	40094c0 <memmove>
 40092ac:	80800217 	ldw	r2,8(r16)
 40092b0:	80c00017 	ldw	r3,0(r16)
 40092b4:	da000117 	ldw	r8,4(sp)
 40092b8:	1585c83a 	sub	r2,r2,r22
 40092bc:	1dad883a 	add	r22,r3,r22
 40092c0:	80800215 	stw	r2,8(r16)
 40092c4:	85800015 	stw	r22,0(r16)
 40092c8:	003fbf06 	br	40091c8 <__ram_exceptions_end+0xfac0503c>
 40092cc:	81000017 	ldw	r4,0(r16)
 40092d0:	9027883a 	mov	r19,r18
 40092d4:	902f883a 	mov	r23,r18
 40092d8:	003f6c06 	br	400908c <__ram_exceptions_end+0xfac04f00>
 40092dc:	900d883a 	mov	r6,r18
 40092e0:	01400284 	movi	r5,10
 40092e4:	e009883a 	mov	r4,fp
 40092e8:	4005d600 	call	4005d60 <memchr>
 40092ec:	10003e26 	beq	r2,zero,40093e8 <__sfvwrite_r+0x498>
 40092f0:	10800044 	addi	r2,r2,1
 40092f4:	1727c83a 	sub	r19,r2,fp
 40092f8:	02000044 	movi	r8,1
 40092fc:	003f9d06 	br	4009174 <__ram_exceptions_end+0xfac04fe8>
 4009300:	80800517 	ldw	r2,20(r16)
 4009304:	81400417 	ldw	r5,16(r16)
 4009308:	81c00017 	ldw	r7,0(r16)
 400930c:	10a7883a 	add	r19,r2,r2
 4009310:	9885883a 	add	r2,r19,r2
 4009314:	1026d7fa 	srli	r19,r2,31
 4009318:	396dc83a 	sub	r22,r7,r5
 400931c:	b1000044 	addi	r4,r22,1
 4009320:	9885883a 	add	r2,r19,r2
 4009324:	1027d07a 	srai	r19,r2,1
 4009328:	2485883a 	add	r2,r4,r18
 400932c:	980d883a 	mov	r6,r19
 4009330:	9880022e 	bgeu	r19,r2,400933c <__sfvwrite_r+0x3ec>
 4009334:	1027883a 	mov	r19,r2
 4009338:	100d883a 	mov	r6,r2
 400933c:	18c1000c 	andi	r3,r3,1024
 4009340:	18001c26 	beq	r3,zero,40093b4 <__sfvwrite_r+0x464>
 4009344:	300b883a 	mov	r5,r6
 4009348:	a809883a 	mov	r4,r21
 400934c:	40055540 	call	4005554 <_malloc_r>
 4009350:	102f883a 	mov	r23,r2
 4009354:	10002926 	beq	r2,zero,40093fc <__sfvwrite_r+0x4ac>
 4009358:	81400417 	ldw	r5,16(r16)
 400935c:	b00d883a 	mov	r6,r22
 4009360:	1009883a 	mov	r4,r2
 4009364:	4005e440 	call	4005e44 <memcpy>
 4009368:	8080030b 	ldhu	r2,12(r16)
 400936c:	00fedfc4 	movi	r3,-1153
 4009370:	10c4703a 	and	r2,r2,r3
 4009374:	10802014 	ori	r2,r2,128
 4009378:	8080030d 	sth	r2,12(r16)
 400937c:	bd89883a 	add	r4,r23,r22
 4009380:	9d8fc83a 	sub	r7,r19,r22
 4009384:	85c00415 	stw	r23,16(r16)
 4009388:	84c00515 	stw	r19,20(r16)
 400938c:	81000015 	stw	r4,0(r16)
 4009390:	9027883a 	mov	r19,r18
 4009394:	81c00215 	stw	r7,8(r16)
 4009398:	902f883a 	mov	r23,r18
 400939c:	003f3b06 	br	400908c <__ram_exceptions_end+0xfac04f00>
 40093a0:	800b883a 	mov	r5,r16
 40093a4:	a809883a 	mov	r4,r21
 40093a8:	40048d40 	call	40048d4 <_fflush_r>
 40093ac:	103fb926 	beq	r2,zero,4009294 <__ram_exceptions_end+0xfac05108>
 40093b0:	003f6506 	br	4009148 <__ram_exceptions_end+0xfac04fbc>
 40093b4:	a809883a 	mov	r4,r21
 40093b8:	400967c0 	call	400967c <_realloc_r>
 40093bc:	102f883a 	mov	r23,r2
 40093c0:	103fee1e 	bne	r2,zero,400937c <__ram_exceptions_end+0xfac051f0>
 40093c4:	81400417 	ldw	r5,16(r16)
 40093c8:	a809883a 	mov	r4,r21
 40093cc:	4004e240 	call	4004e24 <_free_r>
 40093d0:	8080030b 	ldhu	r2,12(r16)
 40093d4:	00ffdfc4 	movi	r3,-129
 40093d8:	1884703a 	and	r2,r3,r2
 40093dc:	00c00304 	movi	r3,12
 40093e0:	a8c00015 	stw	r3,0(r21)
 40093e4:	003f5906 	br	400914c <__ram_exceptions_end+0xfac04fc0>
 40093e8:	94c00044 	addi	r19,r18,1
 40093ec:	02000044 	movi	r8,1
 40093f0:	003f6006 	br	4009174 <__ram_exceptions_end+0xfac04fe8>
 40093f4:	00bfffc4 	movi	r2,-1
 40093f8:	003f0306 	br	4009008 <__ram_exceptions_end+0xfac04e7c>
 40093fc:	00800304 	movi	r2,12
 4009400:	a8800015 	stw	r2,0(r21)
 4009404:	8080030b 	ldhu	r2,12(r16)
 4009408:	003f5006 	br	400914c <__ram_exceptions_end+0xfac04fc0>

0400940c <_isatty_r>:
 400940c:	defffd04 	addi	sp,sp,-12
 4009410:	dc000015 	stw	r16,0(sp)
 4009414:	04010074 	movhi	r16,1025
 4009418:	dc400115 	stw	r17,4(sp)
 400941c:	84059c04 	addi	r16,r16,5744
 4009420:	2023883a 	mov	r17,r4
 4009424:	2809883a 	mov	r4,r5
 4009428:	dfc00215 	stw	ra,8(sp)
 400942c:	80000015 	stw	zero,0(r16)
 4009430:	400d2000 	call	400d200 <isatty>
 4009434:	00ffffc4 	movi	r3,-1
 4009438:	10c00526 	beq	r2,r3,4009450 <_isatty_r+0x44>
 400943c:	dfc00217 	ldw	ra,8(sp)
 4009440:	dc400117 	ldw	r17,4(sp)
 4009444:	dc000017 	ldw	r16,0(sp)
 4009448:	dec00304 	addi	sp,sp,12
 400944c:	f800283a 	ret
 4009450:	80c00017 	ldw	r3,0(r16)
 4009454:	183ff926 	beq	r3,zero,400943c <__ram_exceptions_end+0xfac052b0>
 4009458:	88c00015 	stw	r3,0(r17)
 400945c:	003ff706 	br	400943c <__ram_exceptions_end+0xfac052b0>

04009460 <_lseek_r>:
 4009460:	defffd04 	addi	sp,sp,-12
 4009464:	2805883a 	mov	r2,r5
 4009468:	dc000015 	stw	r16,0(sp)
 400946c:	04010074 	movhi	r16,1025
 4009470:	dc400115 	stw	r17,4(sp)
 4009474:	300b883a 	mov	r5,r6
 4009478:	84059c04 	addi	r16,r16,5744
 400947c:	2023883a 	mov	r17,r4
 4009480:	380d883a 	mov	r6,r7
 4009484:	1009883a 	mov	r4,r2
 4009488:	dfc00215 	stw	ra,8(sp)
 400948c:	80000015 	stw	zero,0(r16)
 4009490:	400d3980 	call	400d398 <lseek>
 4009494:	00ffffc4 	movi	r3,-1
 4009498:	10c00526 	beq	r2,r3,40094b0 <_lseek_r+0x50>
 400949c:	dfc00217 	ldw	ra,8(sp)
 40094a0:	dc400117 	ldw	r17,4(sp)
 40094a4:	dc000017 	ldw	r16,0(sp)
 40094a8:	dec00304 	addi	sp,sp,12
 40094ac:	f800283a 	ret
 40094b0:	80c00017 	ldw	r3,0(r16)
 40094b4:	183ff926 	beq	r3,zero,400949c <__ram_exceptions_end+0xfac05310>
 40094b8:	88c00015 	stw	r3,0(r17)
 40094bc:	003ff706 	br	400949c <__ram_exceptions_end+0xfac05310>

040094c0 <memmove>:
 40094c0:	2005883a 	mov	r2,r4
 40094c4:	29000b2e 	bgeu	r5,r4,40094f4 <memmove+0x34>
 40094c8:	298f883a 	add	r7,r5,r6
 40094cc:	21c0092e 	bgeu	r4,r7,40094f4 <memmove+0x34>
 40094d0:	2187883a 	add	r3,r4,r6
 40094d4:	198bc83a 	sub	r5,r3,r6
 40094d8:	30004826 	beq	r6,zero,40095fc <memmove+0x13c>
 40094dc:	39ffffc4 	addi	r7,r7,-1
 40094e0:	39000003 	ldbu	r4,0(r7)
 40094e4:	18ffffc4 	addi	r3,r3,-1
 40094e8:	19000005 	stb	r4,0(r3)
 40094ec:	28fffb1e 	bne	r5,r3,40094dc <__ram_exceptions_end+0xfac05350>
 40094f0:	f800283a 	ret
 40094f4:	00c003c4 	movi	r3,15
 40094f8:	1980412e 	bgeu	r3,r6,4009600 <memmove+0x140>
 40094fc:	2886b03a 	or	r3,r5,r2
 4009500:	18c000cc 	andi	r3,r3,3
 4009504:	1800401e 	bne	r3,zero,4009608 <memmove+0x148>
 4009508:	33fffc04 	addi	r15,r6,-16
 400950c:	781ed13a 	srli	r15,r15,4
 4009510:	28c00104 	addi	r3,r5,4
 4009514:	13400104 	addi	r13,r2,4
 4009518:	781c913a 	slli	r14,r15,4
 400951c:	2b000204 	addi	r12,r5,8
 4009520:	12c00204 	addi	r11,r2,8
 4009524:	73800504 	addi	r14,r14,20
 4009528:	2a800304 	addi	r10,r5,12
 400952c:	12400304 	addi	r9,r2,12
 4009530:	2b9d883a 	add	r14,r5,r14
 4009534:	2811883a 	mov	r8,r5
 4009538:	100f883a 	mov	r7,r2
 400953c:	41000017 	ldw	r4,0(r8)
 4009540:	39c00404 	addi	r7,r7,16
 4009544:	18c00404 	addi	r3,r3,16
 4009548:	393ffc15 	stw	r4,-16(r7)
 400954c:	193ffc17 	ldw	r4,-16(r3)
 4009550:	6b400404 	addi	r13,r13,16
 4009554:	5ac00404 	addi	r11,r11,16
 4009558:	693ffc15 	stw	r4,-16(r13)
 400955c:	61000017 	ldw	r4,0(r12)
 4009560:	4a400404 	addi	r9,r9,16
 4009564:	42000404 	addi	r8,r8,16
 4009568:	593ffc15 	stw	r4,-16(r11)
 400956c:	51000017 	ldw	r4,0(r10)
 4009570:	63000404 	addi	r12,r12,16
 4009574:	52800404 	addi	r10,r10,16
 4009578:	493ffc15 	stw	r4,-16(r9)
 400957c:	1bbfef1e 	bne	r3,r14,400953c <__ram_exceptions_end+0xfac053b0>
 4009580:	79000044 	addi	r4,r15,1
 4009584:	2008913a 	slli	r4,r4,4
 4009588:	328003cc 	andi	r10,r6,15
 400958c:	02c000c4 	movi	r11,3
 4009590:	1107883a 	add	r3,r2,r4
 4009594:	290b883a 	add	r5,r5,r4
 4009598:	5a801e2e 	bgeu	r11,r10,4009614 <memmove+0x154>
 400959c:	1813883a 	mov	r9,r3
 40095a0:	2811883a 	mov	r8,r5
 40095a4:	500f883a 	mov	r7,r10
 40095a8:	41000017 	ldw	r4,0(r8)
 40095ac:	4a400104 	addi	r9,r9,4
 40095b0:	39ffff04 	addi	r7,r7,-4
 40095b4:	493fff15 	stw	r4,-4(r9)
 40095b8:	42000104 	addi	r8,r8,4
 40095bc:	59fffa36 	bltu	r11,r7,40095a8 <__ram_exceptions_end+0xfac0541c>
 40095c0:	513fff04 	addi	r4,r10,-4
 40095c4:	2008d0ba 	srli	r4,r4,2
 40095c8:	318000cc 	andi	r6,r6,3
 40095cc:	21000044 	addi	r4,r4,1
 40095d0:	2109883a 	add	r4,r4,r4
 40095d4:	2109883a 	add	r4,r4,r4
 40095d8:	1907883a 	add	r3,r3,r4
 40095dc:	290b883a 	add	r5,r5,r4
 40095e0:	30000b26 	beq	r6,zero,4009610 <memmove+0x150>
 40095e4:	198d883a 	add	r6,r3,r6
 40095e8:	29c00003 	ldbu	r7,0(r5)
 40095ec:	18c00044 	addi	r3,r3,1
 40095f0:	29400044 	addi	r5,r5,1
 40095f4:	19ffffc5 	stb	r7,-1(r3)
 40095f8:	19bffb1e 	bne	r3,r6,40095e8 <__ram_exceptions_end+0xfac0545c>
 40095fc:	f800283a 	ret
 4009600:	1007883a 	mov	r3,r2
 4009604:	003ff606 	br	40095e0 <__ram_exceptions_end+0xfac05454>
 4009608:	1007883a 	mov	r3,r2
 400960c:	003ff506 	br	40095e4 <__ram_exceptions_end+0xfac05458>
 4009610:	f800283a 	ret
 4009614:	500d883a 	mov	r6,r10
 4009618:	003ff106 	br	40095e0 <__ram_exceptions_end+0xfac05454>

0400961c <_read_r>:
 400961c:	defffd04 	addi	sp,sp,-12
 4009620:	2805883a 	mov	r2,r5
 4009624:	dc000015 	stw	r16,0(sp)
 4009628:	04010074 	movhi	r16,1025
 400962c:	dc400115 	stw	r17,4(sp)
 4009630:	300b883a 	mov	r5,r6
 4009634:	84059c04 	addi	r16,r16,5744
 4009638:	2023883a 	mov	r17,r4
 400963c:	380d883a 	mov	r6,r7
 4009640:	1009883a 	mov	r4,r2
 4009644:	dfc00215 	stw	ra,8(sp)
 4009648:	80000015 	stw	zero,0(r16)
 400964c:	400d5f40 	call	400d5f4 <read>
 4009650:	00ffffc4 	movi	r3,-1
 4009654:	10c00526 	beq	r2,r3,400966c <_read_r+0x50>
 4009658:	dfc00217 	ldw	ra,8(sp)
 400965c:	dc400117 	ldw	r17,4(sp)
 4009660:	dc000017 	ldw	r16,0(sp)
 4009664:	dec00304 	addi	sp,sp,12
 4009668:	f800283a 	ret
 400966c:	80c00017 	ldw	r3,0(r16)
 4009670:	183ff926 	beq	r3,zero,4009658 <__ram_exceptions_end+0xfac054cc>
 4009674:	88c00015 	stw	r3,0(r17)
 4009678:	003ff706 	br	4009658 <__ram_exceptions_end+0xfac054cc>

0400967c <_realloc_r>:
 400967c:	defff604 	addi	sp,sp,-40
 4009680:	dc800215 	stw	r18,8(sp)
 4009684:	dfc00915 	stw	ra,36(sp)
 4009688:	df000815 	stw	fp,32(sp)
 400968c:	ddc00715 	stw	r23,28(sp)
 4009690:	dd800615 	stw	r22,24(sp)
 4009694:	dd400515 	stw	r21,20(sp)
 4009698:	dd000415 	stw	r20,16(sp)
 400969c:	dcc00315 	stw	r19,12(sp)
 40096a0:	dc400115 	stw	r17,4(sp)
 40096a4:	dc000015 	stw	r16,0(sp)
 40096a8:	3025883a 	mov	r18,r6
 40096ac:	2800b726 	beq	r5,zero,400998c <_realloc_r+0x310>
 40096b0:	282b883a 	mov	r21,r5
 40096b4:	2029883a 	mov	r20,r4
 40096b8:	400d4640 	call	400d464 <__malloc_lock>
 40096bc:	a8bfff17 	ldw	r2,-4(r21)
 40096c0:	043fff04 	movi	r16,-4
 40096c4:	90c002c4 	addi	r3,r18,11
 40096c8:	01000584 	movi	r4,22
 40096cc:	acfffe04 	addi	r19,r21,-8
 40096d0:	1420703a 	and	r16,r2,r16
 40096d4:	20c0332e 	bgeu	r4,r3,40097a4 <_realloc_r+0x128>
 40096d8:	047ffe04 	movi	r17,-8
 40096dc:	1c62703a 	and	r17,r3,r17
 40096e0:	8807883a 	mov	r3,r17
 40096e4:	88005816 	blt	r17,zero,4009848 <_realloc_r+0x1cc>
 40096e8:	8c805736 	bltu	r17,r18,4009848 <_realloc_r+0x1cc>
 40096ec:	80c0300e 	bge	r16,r3,40097b0 <_realloc_r+0x134>
 40096f0:	07010074 	movhi	fp,1025
 40096f4:	e7009204 	addi	fp,fp,584
 40096f8:	e1c00217 	ldw	r7,8(fp)
 40096fc:	9c09883a 	add	r4,r19,r16
 4009700:	22000117 	ldw	r8,4(r4)
 4009704:	21c06326 	beq	r4,r7,4009894 <_realloc_r+0x218>
 4009708:	017fff84 	movi	r5,-2
 400970c:	414a703a 	and	r5,r8,r5
 4009710:	214b883a 	add	r5,r4,r5
 4009714:	29800117 	ldw	r6,4(r5)
 4009718:	3180004c 	andi	r6,r6,1
 400971c:	30003f26 	beq	r6,zero,400981c <_realloc_r+0x1a0>
 4009720:	1080004c 	andi	r2,r2,1
 4009724:	10008326 	beq	r2,zero,4009934 <_realloc_r+0x2b8>
 4009728:	900b883a 	mov	r5,r18
 400972c:	a009883a 	mov	r4,r20
 4009730:	40055540 	call	4005554 <_malloc_r>
 4009734:	1025883a 	mov	r18,r2
 4009738:	10011e26 	beq	r2,zero,4009bb4 <_realloc_r+0x538>
 400973c:	a93fff17 	ldw	r4,-4(r21)
 4009740:	10fffe04 	addi	r3,r2,-8
 4009744:	00bfff84 	movi	r2,-2
 4009748:	2084703a 	and	r2,r4,r2
 400974c:	9885883a 	add	r2,r19,r2
 4009750:	1880ee26 	beq	r3,r2,4009b0c <_realloc_r+0x490>
 4009754:	81bfff04 	addi	r6,r16,-4
 4009758:	00800904 	movi	r2,36
 400975c:	1180b836 	bltu	r2,r6,4009a40 <_realloc_r+0x3c4>
 4009760:	00c004c4 	movi	r3,19
 4009764:	19809636 	bltu	r3,r6,40099c0 <_realloc_r+0x344>
 4009768:	9005883a 	mov	r2,r18
 400976c:	a807883a 	mov	r3,r21
 4009770:	19000017 	ldw	r4,0(r3)
 4009774:	11000015 	stw	r4,0(r2)
 4009778:	19000117 	ldw	r4,4(r3)
 400977c:	11000115 	stw	r4,4(r2)
 4009780:	18c00217 	ldw	r3,8(r3)
 4009784:	10c00215 	stw	r3,8(r2)
 4009788:	a80b883a 	mov	r5,r21
 400978c:	a009883a 	mov	r4,r20
 4009790:	4004e240 	call	4004e24 <_free_r>
 4009794:	a009883a 	mov	r4,r20
 4009798:	400d4680 	call	400d468 <__malloc_unlock>
 400979c:	9005883a 	mov	r2,r18
 40097a0:	00001206 	br	40097ec <_realloc_r+0x170>
 40097a4:	00c00404 	movi	r3,16
 40097a8:	1823883a 	mov	r17,r3
 40097ac:	003fce06 	br	40096e8 <__ram_exceptions_end+0xfac0555c>
 40097b0:	a825883a 	mov	r18,r21
 40097b4:	8445c83a 	sub	r2,r16,r17
 40097b8:	00c003c4 	movi	r3,15
 40097bc:	18802636 	bltu	r3,r2,4009858 <_realloc_r+0x1dc>
 40097c0:	99800117 	ldw	r6,4(r19)
 40097c4:	9c07883a 	add	r3,r19,r16
 40097c8:	3180004c 	andi	r6,r6,1
 40097cc:	3420b03a 	or	r16,r6,r16
 40097d0:	9c000115 	stw	r16,4(r19)
 40097d4:	18800117 	ldw	r2,4(r3)
 40097d8:	10800054 	ori	r2,r2,1
 40097dc:	18800115 	stw	r2,4(r3)
 40097e0:	a009883a 	mov	r4,r20
 40097e4:	400d4680 	call	400d468 <__malloc_unlock>
 40097e8:	9005883a 	mov	r2,r18
 40097ec:	dfc00917 	ldw	ra,36(sp)
 40097f0:	df000817 	ldw	fp,32(sp)
 40097f4:	ddc00717 	ldw	r23,28(sp)
 40097f8:	dd800617 	ldw	r22,24(sp)
 40097fc:	dd400517 	ldw	r21,20(sp)
 4009800:	dd000417 	ldw	r20,16(sp)
 4009804:	dcc00317 	ldw	r19,12(sp)
 4009808:	dc800217 	ldw	r18,8(sp)
 400980c:	dc400117 	ldw	r17,4(sp)
 4009810:	dc000017 	ldw	r16,0(sp)
 4009814:	dec00a04 	addi	sp,sp,40
 4009818:	f800283a 	ret
 400981c:	017fff04 	movi	r5,-4
 4009820:	414a703a 	and	r5,r8,r5
 4009824:	814d883a 	add	r6,r16,r5
 4009828:	30c01f16 	blt	r6,r3,40098a8 <_realloc_r+0x22c>
 400982c:	20800317 	ldw	r2,12(r4)
 4009830:	20c00217 	ldw	r3,8(r4)
 4009834:	a825883a 	mov	r18,r21
 4009838:	3021883a 	mov	r16,r6
 400983c:	18800315 	stw	r2,12(r3)
 4009840:	10c00215 	stw	r3,8(r2)
 4009844:	003fdb06 	br	40097b4 <__ram_exceptions_end+0xfac05628>
 4009848:	00800304 	movi	r2,12
 400984c:	a0800015 	stw	r2,0(r20)
 4009850:	0005883a 	mov	r2,zero
 4009854:	003fe506 	br	40097ec <__ram_exceptions_end+0xfac05660>
 4009858:	98c00117 	ldw	r3,4(r19)
 400985c:	9c4b883a 	add	r5,r19,r17
 4009860:	11000054 	ori	r4,r2,1
 4009864:	18c0004c 	andi	r3,r3,1
 4009868:	1c62b03a 	or	r17,r3,r17
 400986c:	9c400115 	stw	r17,4(r19)
 4009870:	29000115 	stw	r4,4(r5)
 4009874:	2885883a 	add	r2,r5,r2
 4009878:	10c00117 	ldw	r3,4(r2)
 400987c:	29400204 	addi	r5,r5,8
 4009880:	a009883a 	mov	r4,r20
 4009884:	18c00054 	ori	r3,r3,1
 4009888:	10c00115 	stw	r3,4(r2)
 400988c:	4004e240 	call	4004e24 <_free_r>
 4009890:	003fd306 	br	40097e0 <__ram_exceptions_end+0xfac05654>
 4009894:	017fff04 	movi	r5,-4
 4009898:	414a703a 	and	r5,r8,r5
 400989c:	89800404 	addi	r6,r17,16
 40098a0:	8151883a 	add	r8,r16,r5
 40098a4:	4180590e 	bge	r8,r6,4009a0c <_realloc_r+0x390>
 40098a8:	1080004c 	andi	r2,r2,1
 40098ac:	103f9e1e 	bne	r2,zero,4009728 <__ram_exceptions_end+0xfac0559c>
 40098b0:	adbffe17 	ldw	r22,-8(r21)
 40098b4:	00bfff04 	movi	r2,-4
 40098b8:	9dadc83a 	sub	r22,r19,r22
 40098bc:	b1800117 	ldw	r6,4(r22)
 40098c0:	3084703a 	and	r2,r6,r2
 40098c4:	20002026 	beq	r4,zero,4009948 <_realloc_r+0x2cc>
 40098c8:	80af883a 	add	r23,r16,r2
 40098cc:	b96f883a 	add	r23,r23,r5
 40098d0:	21c05f26 	beq	r4,r7,4009a50 <_realloc_r+0x3d4>
 40098d4:	b8c01c16 	blt	r23,r3,4009948 <_realloc_r+0x2cc>
 40098d8:	20800317 	ldw	r2,12(r4)
 40098dc:	20c00217 	ldw	r3,8(r4)
 40098e0:	81bfff04 	addi	r6,r16,-4
 40098e4:	01000904 	movi	r4,36
 40098e8:	18800315 	stw	r2,12(r3)
 40098ec:	10c00215 	stw	r3,8(r2)
 40098f0:	b0c00217 	ldw	r3,8(r22)
 40098f4:	b0800317 	ldw	r2,12(r22)
 40098f8:	b4800204 	addi	r18,r22,8
 40098fc:	18800315 	stw	r2,12(r3)
 4009900:	10c00215 	stw	r3,8(r2)
 4009904:	21801b36 	bltu	r4,r6,4009974 <_realloc_r+0x2f8>
 4009908:	008004c4 	movi	r2,19
 400990c:	1180352e 	bgeu	r2,r6,40099e4 <_realloc_r+0x368>
 4009910:	a8800017 	ldw	r2,0(r21)
 4009914:	b0800215 	stw	r2,8(r22)
 4009918:	a8800117 	ldw	r2,4(r21)
 400991c:	b0800315 	stw	r2,12(r22)
 4009920:	008006c4 	movi	r2,27
 4009924:	11807f36 	bltu	r2,r6,4009b24 <_realloc_r+0x4a8>
 4009928:	b0800404 	addi	r2,r22,16
 400992c:	ad400204 	addi	r21,r21,8
 4009930:	00002d06 	br	40099e8 <_realloc_r+0x36c>
 4009934:	adbffe17 	ldw	r22,-8(r21)
 4009938:	00bfff04 	movi	r2,-4
 400993c:	9dadc83a 	sub	r22,r19,r22
 4009940:	b1000117 	ldw	r4,4(r22)
 4009944:	2084703a 	and	r2,r4,r2
 4009948:	b03f7726 	beq	r22,zero,4009728 <__ram_exceptions_end+0xfac0559c>
 400994c:	80af883a 	add	r23,r16,r2
 4009950:	b8ff7516 	blt	r23,r3,4009728 <__ram_exceptions_end+0xfac0559c>
 4009954:	b0800317 	ldw	r2,12(r22)
 4009958:	b0c00217 	ldw	r3,8(r22)
 400995c:	81bfff04 	addi	r6,r16,-4
 4009960:	01000904 	movi	r4,36
 4009964:	18800315 	stw	r2,12(r3)
 4009968:	10c00215 	stw	r3,8(r2)
 400996c:	b4800204 	addi	r18,r22,8
 4009970:	21bfe52e 	bgeu	r4,r6,4009908 <__ram_exceptions_end+0xfac0577c>
 4009974:	a80b883a 	mov	r5,r21
 4009978:	9009883a 	mov	r4,r18
 400997c:	40094c00 	call	40094c0 <memmove>
 4009980:	b821883a 	mov	r16,r23
 4009984:	b027883a 	mov	r19,r22
 4009988:	003f8a06 	br	40097b4 <__ram_exceptions_end+0xfac05628>
 400998c:	300b883a 	mov	r5,r6
 4009990:	dfc00917 	ldw	ra,36(sp)
 4009994:	df000817 	ldw	fp,32(sp)
 4009998:	ddc00717 	ldw	r23,28(sp)
 400999c:	dd800617 	ldw	r22,24(sp)
 40099a0:	dd400517 	ldw	r21,20(sp)
 40099a4:	dd000417 	ldw	r20,16(sp)
 40099a8:	dcc00317 	ldw	r19,12(sp)
 40099ac:	dc800217 	ldw	r18,8(sp)
 40099b0:	dc400117 	ldw	r17,4(sp)
 40099b4:	dc000017 	ldw	r16,0(sp)
 40099b8:	dec00a04 	addi	sp,sp,40
 40099bc:	40055541 	jmpi	4005554 <_malloc_r>
 40099c0:	a8c00017 	ldw	r3,0(r21)
 40099c4:	90c00015 	stw	r3,0(r18)
 40099c8:	a8c00117 	ldw	r3,4(r21)
 40099cc:	90c00115 	stw	r3,4(r18)
 40099d0:	00c006c4 	movi	r3,27
 40099d4:	19804536 	bltu	r3,r6,4009aec <_realloc_r+0x470>
 40099d8:	90800204 	addi	r2,r18,8
 40099dc:	a8c00204 	addi	r3,r21,8
 40099e0:	003f6306 	br	4009770 <__ram_exceptions_end+0xfac055e4>
 40099e4:	9005883a 	mov	r2,r18
 40099e8:	a8c00017 	ldw	r3,0(r21)
 40099ec:	b821883a 	mov	r16,r23
 40099f0:	b027883a 	mov	r19,r22
 40099f4:	10c00015 	stw	r3,0(r2)
 40099f8:	a8c00117 	ldw	r3,4(r21)
 40099fc:	10c00115 	stw	r3,4(r2)
 4009a00:	a8c00217 	ldw	r3,8(r21)
 4009a04:	10c00215 	stw	r3,8(r2)
 4009a08:	003f6a06 	br	40097b4 <__ram_exceptions_end+0xfac05628>
 4009a0c:	9c67883a 	add	r19,r19,r17
 4009a10:	4445c83a 	sub	r2,r8,r17
 4009a14:	e4c00215 	stw	r19,8(fp)
 4009a18:	10800054 	ori	r2,r2,1
 4009a1c:	98800115 	stw	r2,4(r19)
 4009a20:	a8bfff17 	ldw	r2,-4(r21)
 4009a24:	a009883a 	mov	r4,r20
 4009a28:	1080004c 	andi	r2,r2,1
 4009a2c:	1462b03a 	or	r17,r2,r17
 4009a30:	ac7fff15 	stw	r17,-4(r21)
 4009a34:	400d4680 	call	400d468 <__malloc_unlock>
 4009a38:	a805883a 	mov	r2,r21
 4009a3c:	003f6b06 	br	40097ec <__ram_exceptions_end+0xfac05660>
 4009a40:	a80b883a 	mov	r5,r21
 4009a44:	9009883a 	mov	r4,r18
 4009a48:	40094c00 	call	40094c0 <memmove>
 4009a4c:	003f4e06 	br	4009788 <__ram_exceptions_end+0xfac055fc>
 4009a50:	89000404 	addi	r4,r17,16
 4009a54:	b93fbc16 	blt	r23,r4,4009948 <__ram_exceptions_end+0xfac057bc>
 4009a58:	b0800317 	ldw	r2,12(r22)
 4009a5c:	b0c00217 	ldw	r3,8(r22)
 4009a60:	81bfff04 	addi	r6,r16,-4
 4009a64:	01000904 	movi	r4,36
 4009a68:	18800315 	stw	r2,12(r3)
 4009a6c:	10c00215 	stw	r3,8(r2)
 4009a70:	b4800204 	addi	r18,r22,8
 4009a74:	21804336 	bltu	r4,r6,4009b84 <_realloc_r+0x508>
 4009a78:	008004c4 	movi	r2,19
 4009a7c:	11803f2e 	bgeu	r2,r6,4009b7c <_realloc_r+0x500>
 4009a80:	a8800017 	ldw	r2,0(r21)
 4009a84:	b0800215 	stw	r2,8(r22)
 4009a88:	a8800117 	ldw	r2,4(r21)
 4009a8c:	b0800315 	stw	r2,12(r22)
 4009a90:	008006c4 	movi	r2,27
 4009a94:	11803f36 	bltu	r2,r6,4009b94 <_realloc_r+0x518>
 4009a98:	b0800404 	addi	r2,r22,16
 4009a9c:	ad400204 	addi	r21,r21,8
 4009aa0:	a8c00017 	ldw	r3,0(r21)
 4009aa4:	10c00015 	stw	r3,0(r2)
 4009aa8:	a8c00117 	ldw	r3,4(r21)
 4009aac:	10c00115 	stw	r3,4(r2)
 4009ab0:	a8c00217 	ldw	r3,8(r21)
 4009ab4:	10c00215 	stw	r3,8(r2)
 4009ab8:	b447883a 	add	r3,r22,r17
 4009abc:	bc45c83a 	sub	r2,r23,r17
 4009ac0:	e0c00215 	stw	r3,8(fp)
 4009ac4:	10800054 	ori	r2,r2,1
 4009ac8:	18800115 	stw	r2,4(r3)
 4009acc:	b0800117 	ldw	r2,4(r22)
 4009ad0:	a009883a 	mov	r4,r20
 4009ad4:	1080004c 	andi	r2,r2,1
 4009ad8:	1462b03a 	or	r17,r2,r17
 4009adc:	b4400115 	stw	r17,4(r22)
 4009ae0:	400d4680 	call	400d468 <__malloc_unlock>
 4009ae4:	9005883a 	mov	r2,r18
 4009ae8:	003f4006 	br	40097ec <__ram_exceptions_end+0xfac05660>
 4009aec:	a8c00217 	ldw	r3,8(r21)
 4009af0:	90c00215 	stw	r3,8(r18)
 4009af4:	a8c00317 	ldw	r3,12(r21)
 4009af8:	90c00315 	stw	r3,12(r18)
 4009afc:	30801126 	beq	r6,r2,4009b44 <_realloc_r+0x4c8>
 4009b00:	90800404 	addi	r2,r18,16
 4009b04:	a8c00404 	addi	r3,r21,16
 4009b08:	003f1906 	br	4009770 <__ram_exceptions_end+0xfac055e4>
 4009b0c:	90ffff17 	ldw	r3,-4(r18)
 4009b10:	00bfff04 	movi	r2,-4
 4009b14:	a825883a 	mov	r18,r21
 4009b18:	1884703a 	and	r2,r3,r2
 4009b1c:	80a1883a 	add	r16,r16,r2
 4009b20:	003f2406 	br	40097b4 <__ram_exceptions_end+0xfac05628>
 4009b24:	a8800217 	ldw	r2,8(r21)
 4009b28:	b0800415 	stw	r2,16(r22)
 4009b2c:	a8800317 	ldw	r2,12(r21)
 4009b30:	b0800515 	stw	r2,20(r22)
 4009b34:	31000a26 	beq	r6,r4,4009b60 <_realloc_r+0x4e4>
 4009b38:	b0800604 	addi	r2,r22,24
 4009b3c:	ad400404 	addi	r21,r21,16
 4009b40:	003fa906 	br	40099e8 <__ram_exceptions_end+0xfac0585c>
 4009b44:	a9000417 	ldw	r4,16(r21)
 4009b48:	90800604 	addi	r2,r18,24
 4009b4c:	a8c00604 	addi	r3,r21,24
 4009b50:	91000415 	stw	r4,16(r18)
 4009b54:	a9000517 	ldw	r4,20(r21)
 4009b58:	91000515 	stw	r4,20(r18)
 4009b5c:	003f0406 	br	4009770 <__ram_exceptions_end+0xfac055e4>
 4009b60:	a8c00417 	ldw	r3,16(r21)
 4009b64:	ad400604 	addi	r21,r21,24
 4009b68:	b0800804 	addi	r2,r22,32
 4009b6c:	b0c00615 	stw	r3,24(r22)
 4009b70:	a8ffff17 	ldw	r3,-4(r21)
 4009b74:	b0c00715 	stw	r3,28(r22)
 4009b78:	003f9b06 	br	40099e8 <__ram_exceptions_end+0xfac0585c>
 4009b7c:	9005883a 	mov	r2,r18
 4009b80:	003fc706 	br	4009aa0 <__ram_exceptions_end+0xfac05914>
 4009b84:	a80b883a 	mov	r5,r21
 4009b88:	9009883a 	mov	r4,r18
 4009b8c:	40094c00 	call	40094c0 <memmove>
 4009b90:	003fc906 	br	4009ab8 <__ram_exceptions_end+0xfac0592c>
 4009b94:	a8800217 	ldw	r2,8(r21)
 4009b98:	b0800415 	stw	r2,16(r22)
 4009b9c:	a8800317 	ldw	r2,12(r21)
 4009ba0:	b0800515 	stw	r2,20(r22)
 4009ba4:	31000726 	beq	r6,r4,4009bc4 <_realloc_r+0x548>
 4009ba8:	b0800604 	addi	r2,r22,24
 4009bac:	ad400404 	addi	r21,r21,16
 4009bb0:	003fbb06 	br	4009aa0 <__ram_exceptions_end+0xfac05914>
 4009bb4:	a009883a 	mov	r4,r20
 4009bb8:	400d4680 	call	400d468 <__malloc_unlock>
 4009bbc:	0005883a 	mov	r2,zero
 4009bc0:	003f0a06 	br	40097ec <__ram_exceptions_end+0xfac05660>
 4009bc4:	a8c00417 	ldw	r3,16(r21)
 4009bc8:	ad400604 	addi	r21,r21,24
 4009bcc:	b0800804 	addi	r2,r22,32
 4009bd0:	b0c00615 	stw	r3,24(r22)
 4009bd4:	a8ffff17 	ldw	r3,-4(r21)
 4009bd8:	b0c00715 	stw	r3,28(r22)
 4009bdc:	003fb006 	br	4009aa0 <__ram_exceptions_end+0xfac05914>

04009be0 <__swbuf_r>:
 4009be0:	defffb04 	addi	sp,sp,-20
 4009be4:	dcc00315 	stw	r19,12(sp)
 4009be8:	dc800215 	stw	r18,8(sp)
 4009bec:	dc000015 	stw	r16,0(sp)
 4009bf0:	dfc00415 	stw	ra,16(sp)
 4009bf4:	dc400115 	stw	r17,4(sp)
 4009bf8:	2025883a 	mov	r18,r4
 4009bfc:	2827883a 	mov	r19,r5
 4009c00:	3021883a 	mov	r16,r6
 4009c04:	20000226 	beq	r4,zero,4009c10 <__swbuf_r+0x30>
 4009c08:	20800e17 	ldw	r2,56(r4)
 4009c0c:	10004226 	beq	r2,zero,4009d18 <__swbuf_r+0x138>
 4009c10:	80800617 	ldw	r2,24(r16)
 4009c14:	8100030b 	ldhu	r4,12(r16)
 4009c18:	80800215 	stw	r2,8(r16)
 4009c1c:	2080020c 	andi	r2,r4,8
 4009c20:	10003626 	beq	r2,zero,4009cfc <__swbuf_r+0x11c>
 4009c24:	80c00417 	ldw	r3,16(r16)
 4009c28:	18003426 	beq	r3,zero,4009cfc <__swbuf_r+0x11c>
 4009c2c:	2088000c 	andi	r2,r4,8192
 4009c30:	9c403fcc 	andi	r17,r19,255
 4009c34:	10001a26 	beq	r2,zero,4009ca0 <__swbuf_r+0xc0>
 4009c38:	80800017 	ldw	r2,0(r16)
 4009c3c:	81000517 	ldw	r4,20(r16)
 4009c40:	10c7c83a 	sub	r3,r2,r3
 4009c44:	1900200e 	bge	r3,r4,4009cc8 <__swbuf_r+0xe8>
 4009c48:	18c00044 	addi	r3,r3,1
 4009c4c:	81000217 	ldw	r4,8(r16)
 4009c50:	11400044 	addi	r5,r2,1
 4009c54:	81400015 	stw	r5,0(r16)
 4009c58:	213fffc4 	addi	r4,r4,-1
 4009c5c:	81000215 	stw	r4,8(r16)
 4009c60:	14c00005 	stb	r19,0(r2)
 4009c64:	80800517 	ldw	r2,20(r16)
 4009c68:	10c01e26 	beq	r2,r3,4009ce4 <__swbuf_r+0x104>
 4009c6c:	8080030b 	ldhu	r2,12(r16)
 4009c70:	1080004c 	andi	r2,r2,1
 4009c74:	10000226 	beq	r2,zero,4009c80 <__swbuf_r+0xa0>
 4009c78:	00800284 	movi	r2,10
 4009c7c:	88801926 	beq	r17,r2,4009ce4 <__swbuf_r+0x104>
 4009c80:	8805883a 	mov	r2,r17
 4009c84:	dfc00417 	ldw	ra,16(sp)
 4009c88:	dcc00317 	ldw	r19,12(sp)
 4009c8c:	dc800217 	ldw	r18,8(sp)
 4009c90:	dc400117 	ldw	r17,4(sp)
 4009c94:	dc000017 	ldw	r16,0(sp)
 4009c98:	dec00504 	addi	sp,sp,20
 4009c9c:	f800283a 	ret
 4009ca0:	81401917 	ldw	r5,100(r16)
 4009ca4:	00b7ffc4 	movi	r2,-8193
 4009ca8:	21080014 	ori	r4,r4,8192
 4009cac:	2884703a 	and	r2,r5,r2
 4009cb0:	80801915 	stw	r2,100(r16)
 4009cb4:	80800017 	ldw	r2,0(r16)
 4009cb8:	8100030d 	sth	r4,12(r16)
 4009cbc:	81000517 	ldw	r4,20(r16)
 4009cc0:	10c7c83a 	sub	r3,r2,r3
 4009cc4:	193fe016 	blt	r3,r4,4009c48 <__ram_exceptions_end+0xfac05abc>
 4009cc8:	800b883a 	mov	r5,r16
 4009ccc:	9009883a 	mov	r4,r18
 4009cd0:	40048d40 	call	40048d4 <_fflush_r>
 4009cd4:	1000071e 	bne	r2,zero,4009cf4 <__swbuf_r+0x114>
 4009cd8:	80800017 	ldw	r2,0(r16)
 4009cdc:	00c00044 	movi	r3,1
 4009ce0:	003fda06 	br	4009c4c <__ram_exceptions_end+0xfac05ac0>
 4009ce4:	800b883a 	mov	r5,r16
 4009ce8:	9009883a 	mov	r4,r18
 4009cec:	40048d40 	call	40048d4 <_fflush_r>
 4009cf0:	103fe326 	beq	r2,zero,4009c80 <__ram_exceptions_end+0xfac05af4>
 4009cf4:	00bfffc4 	movi	r2,-1
 4009cf8:	003fe206 	br	4009c84 <__ram_exceptions_end+0xfac05af8>
 4009cfc:	800b883a 	mov	r5,r16
 4009d00:	9009883a 	mov	r4,r18
 4009d04:	4002cdc0 	call	4002cdc <__swsetup_r>
 4009d08:	103ffa1e 	bne	r2,zero,4009cf4 <__ram_exceptions_end+0xfac05b68>
 4009d0c:	8100030b 	ldhu	r4,12(r16)
 4009d10:	80c00417 	ldw	r3,16(r16)
 4009d14:	003fc506 	br	4009c2c <__ram_exceptions_end+0xfac05aa0>
 4009d18:	4004cb00 	call	4004cb0 <__sinit>
 4009d1c:	003fbc06 	br	4009c10 <__ram_exceptions_end+0xfac05a84>

04009d20 <__swbuf>:
 4009d20:	00810074 	movhi	r2,1025
 4009d24:	10826504 	addi	r2,r2,2452
 4009d28:	280d883a 	mov	r6,r5
 4009d2c:	200b883a 	mov	r5,r4
 4009d30:	11000017 	ldw	r4,0(r2)
 4009d34:	4009be01 	jmpi	4009be0 <__swbuf_r>

04009d38 <_wcrtomb_r>:
 4009d38:	defff604 	addi	sp,sp,-40
 4009d3c:	00810074 	movhi	r2,1025
 4009d40:	dc800815 	stw	r18,32(sp)
 4009d44:	dc400715 	stw	r17,28(sp)
 4009d48:	dc000615 	stw	r16,24(sp)
 4009d4c:	10826904 	addi	r2,r2,2468
 4009d50:	dfc00915 	stw	ra,36(sp)
 4009d54:	2021883a 	mov	r16,r4
 4009d58:	3823883a 	mov	r17,r7
 4009d5c:	14800017 	ldw	r18,0(r2)
 4009d60:	28001426 	beq	r5,zero,4009db4 <_wcrtomb_r+0x7c>
 4009d64:	d9400415 	stw	r5,16(sp)
 4009d68:	d9800515 	stw	r6,20(sp)
 4009d6c:	40053380 	call	4005338 <__locale_charset>
 4009d70:	d9800517 	ldw	r6,20(sp)
 4009d74:	d9400417 	ldw	r5,16(sp)
 4009d78:	100f883a 	mov	r7,r2
 4009d7c:	dc400015 	stw	r17,0(sp)
 4009d80:	8009883a 	mov	r4,r16
 4009d84:	903ee83a 	callr	r18
 4009d88:	00ffffc4 	movi	r3,-1
 4009d8c:	10c0031e 	bne	r2,r3,4009d9c <_wcrtomb_r+0x64>
 4009d90:	88000015 	stw	zero,0(r17)
 4009d94:	00c02284 	movi	r3,138
 4009d98:	80c00015 	stw	r3,0(r16)
 4009d9c:	dfc00917 	ldw	ra,36(sp)
 4009da0:	dc800817 	ldw	r18,32(sp)
 4009da4:	dc400717 	ldw	r17,28(sp)
 4009da8:	dc000617 	ldw	r16,24(sp)
 4009dac:	dec00a04 	addi	sp,sp,40
 4009db0:	f800283a 	ret
 4009db4:	40053380 	call	4005338 <__locale_charset>
 4009db8:	100f883a 	mov	r7,r2
 4009dbc:	dc400015 	stw	r17,0(sp)
 4009dc0:	000d883a 	mov	r6,zero
 4009dc4:	d9400104 	addi	r5,sp,4
 4009dc8:	8009883a 	mov	r4,r16
 4009dcc:	903ee83a 	callr	r18
 4009dd0:	003fed06 	br	4009d88 <__ram_exceptions_end+0xfac05bfc>

04009dd4 <wcrtomb>:
 4009dd4:	defff604 	addi	sp,sp,-40
 4009dd8:	00810074 	movhi	r2,1025
 4009ddc:	dc800615 	stw	r18,24(sp)
 4009de0:	dc400515 	stw	r17,20(sp)
 4009de4:	10826504 	addi	r2,r2,2452
 4009de8:	dfc00915 	stw	ra,36(sp)
 4009dec:	dd000815 	stw	r20,32(sp)
 4009df0:	dcc00715 	stw	r19,28(sp)
 4009df4:	dc000415 	stw	r16,16(sp)
 4009df8:	3025883a 	mov	r18,r6
 4009dfc:	14400017 	ldw	r17,0(r2)
 4009e00:	20001926 	beq	r4,zero,4009e68 <wcrtomb+0x94>
 4009e04:	00810074 	movhi	r2,1025
 4009e08:	10826904 	addi	r2,r2,2468
 4009e0c:	15000017 	ldw	r20,0(r2)
 4009e10:	2021883a 	mov	r16,r4
 4009e14:	2827883a 	mov	r19,r5
 4009e18:	40053380 	call	4005338 <__locale_charset>
 4009e1c:	100f883a 	mov	r7,r2
 4009e20:	dc800015 	stw	r18,0(sp)
 4009e24:	980d883a 	mov	r6,r19
 4009e28:	800b883a 	mov	r5,r16
 4009e2c:	8809883a 	mov	r4,r17
 4009e30:	a03ee83a 	callr	r20
 4009e34:	00ffffc4 	movi	r3,-1
 4009e38:	10c0031e 	bne	r2,r3,4009e48 <wcrtomb+0x74>
 4009e3c:	90000015 	stw	zero,0(r18)
 4009e40:	00c02284 	movi	r3,138
 4009e44:	88c00015 	stw	r3,0(r17)
 4009e48:	dfc00917 	ldw	ra,36(sp)
 4009e4c:	dd000817 	ldw	r20,32(sp)
 4009e50:	dcc00717 	ldw	r19,28(sp)
 4009e54:	dc800617 	ldw	r18,24(sp)
 4009e58:	dc400517 	ldw	r17,20(sp)
 4009e5c:	dc000417 	ldw	r16,16(sp)
 4009e60:	dec00a04 	addi	sp,sp,40
 4009e64:	f800283a 	ret
 4009e68:	00810074 	movhi	r2,1025
 4009e6c:	10826904 	addi	r2,r2,2468
 4009e70:	14000017 	ldw	r16,0(r2)
 4009e74:	40053380 	call	4005338 <__locale_charset>
 4009e78:	100f883a 	mov	r7,r2
 4009e7c:	dc800015 	stw	r18,0(sp)
 4009e80:	000d883a 	mov	r6,zero
 4009e84:	d9400104 	addi	r5,sp,4
 4009e88:	8809883a 	mov	r4,r17
 4009e8c:	803ee83a 	callr	r16
 4009e90:	003fe806 	br	4009e34 <__ram_exceptions_end+0xfac05ca8>

04009e94 <__ascii_wctomb>:
 4009e94:	28000526 	beq	r5,zero,4009eac <__ascii_wctomb+0x18>
 4009e98:	00803fc4 	movi	r2,255
 4009e9c:	11800536 	bltu	r2,r6,4009eb4 <__ascii_wctomb+0x20>
 4009ea0:	29800005 	stb	r6,0(r5)
 4009ea4:	00800044 	movi	r2,1
 4009ea8:	f800283a 	ret
 4009eac:	0005883a 	mov	r2,zero
 4009eb0:	f800283a 	ret
 4009eb4:	00802284 	movi	r2,138
 4009eb8:	20800015 	stw	r2,0(r4)
 4009ebc:	00bfffc4 	movi	r2,-1
 4009ec0:	f800283a 	ret

04009ec4 <_wctomb_r>:
 4009ec4:	00810074 	movhi	r2,1025
 4009ec8:	defff904 	addi	sp,sp,-28
 4009ecc:	10826904 	addi	r2,r2,2468
 4009ed0:	dfc00615 	stw	ra,24(sp)
 4009ed4:	dc400515 	stw	r17,20(sp)
 4009ed8:	dc000415 	stw	r16,16(sp)
 4009edc:	3823883a 	mov	r17,r7
 4009ee0:	14000017 	ldw	r16,0(r2)
 4009ee4:	d9000115 	stw	r4,4(sp)
 4009ee8:	d9400215 	stw	r5,8(sp)
 4009eec:	d9800315 	stw	r6,12(sp)
 4009ef0:	40053380 	call	4005338 <__locale_charset>
 4009ef4:	d9800317 	ldw	r6,12(sp)
 4009ef8:	d9400217 	ldw	r5,8(sp)
 4009efc:	d9000117 	ldw	r4,4(sp)
 4009f00:	100f883a 	mov	r7,r2
 4009f04:	dc400015 	stw	r17,0(sp)
 4009f08:	803ee83a 	callr	r16
 4009f0c:	dfc00617 	ldw	ra,24(sp)
 4009f10:	dc400517 	ldw	r17,20(sp)
 4009f14:	dc000417 	ldw	r16,16(sp)
 4009f18:	dec00704 	addi	sp,sp,28
 4009f1c:	f800283a 	ret

04009f20 <__udivdi3>:
 4009f20:	defff504 	addi	sp,sp,-44
 4009f24:	dcc00415 	stw	r19,16(sp)
 4009f28:	dc000115 	stw	r16,4(sp)
 4009f2c:	dfc00a15 	stw	ra,40(sp)
 4009f30:	df000915 	stw	fp,36(sp)
 4009f34:	ddc00815 	stw	r23,32(sp)
 4009f38:	dd800715 	stw	r22,28(sp)
 4009f3c:	dd400615 	stw	r21,24(sp)
 4009f40:	dd000515 	stw	r20,20(sp)
 4009f44:	dc800315 	stw	r18,12(sp)
 4009f48:	dc400215 	stw	r17,8(sp)
 4009f4c:	2027883a 	mov	r19,r4
 4009f50:	2821883a 	mov	r16,r5
 4009f54:	3800411e 	bne	r7,zero,400a05c <__udivdi3+0x13c>
 4009f58:	3023883a 	mov	r17,r6
 4009f5c:	2025883a 	mov	r18,r4
 4009f60:	2980522e 	bgeu	r5,r6,400a0ac <__udivdi3+0x18c>
 4009f64:	00bfffd4 	movui	r2,65535
 4009f68:	282d883a 	mov	r22,r5
 4009f6c:	1180a836 	bltu	r2,r6,400a210 <__udivdi3+0x2f0>
 4009f70:	00803fc4 	movi	r2,255
 4009f74:	1185803a 	cmpltu	r2,r2,r6
 4009f78:	100490fa 	slli	r2,r2,3
 4009f7c:	3086d83a 	srl	r3,r6,r2
 4009f80:	01010074 	movhi	r4,1025
 4009f84:	213f1404 	addi	r4,r4,-944
 4009f88:	20c7883a 	add	r3,r4,r3
 4009f8c:	18c00003 	ldbu	r3,0(r3)
 4009f90:	1885883a 	add	r2,r3,r2
 4009f94:	00c00804 	movi	r3,32
 4009f98:	1887c83a 	sub	r3,r3,r2
 4009f9c:	18000526 	beq	r3,zero,4009fb4 <__udivdi3+0x94>
 4009fa0:	80e0983a 	sll	r16,r16,r3
 4009fa4:	9884d83a 	srl	r2,r19,r2
 4009fa8:	30e2983a 	sll	r17,r6,r3
 4009fac:	98e4983a 	sll	r18,r19,r3
 4009fb0:	142cb03a 	or	r22,r2,r16
 4009fb4:	882ad43a 	srli	r21,r17,16
 4009fb8:	b009883a 	mov	r4,r22
 4009fbc:	8d3fffcc 	andi	r20,r17,65535
 4009fc0:	a80b883a 	mov	r5,r21
 4009fc4:	40009480 	call	4000948 <__umodsi3>
 4009fc8:	b009883a 	mov	r4,r22
 4009fcc:	a80b883a 	mov	r5,r21
 4009fd0:	1027883a 	mov	r19,r2
 4009fd4:	40008e40 	call	40008e4 <__udivsi3>
 4009fd8:	102d883a 	mov	r22,r2
 4009fdc:	9826943a 	slli	r19,r19,16
 4009fe0:	9004d43a 	srli	r2,r18,16
 4009fe4:	a5a1383a 	mul	r16,r20,r22
 4009fe8:	14c4b03a 	or	r2,r2,r19
 4009fec:	1400052e 	bgeu	r2,r16,400a004 <__udivdi3+0xe4>
 4009ff0:	1445883a 	add	r2,r2,r17
 4009ff4:	b0ffffc4 	addi	r3,r22,-1
 4009ff8:	14400136 	bltu	r2,r17,400a000 <__udivdi3+0xe0>
 4009ffc:	14012336 	bltu	r2,r16,400a48c <__udivdi3+0x56c>
 400a000:	182d883a 	mov	r22,r3
 400a004:	1421c83a 	sub	r16,r2,r16
 400a008:	a80b883a 	mov	r5,r21
 400a00c:	8009883a 	mov	r4,r16
 400a010:	40009480 	call	4000948 <__umodsi3>
 400a014:	1027883a 	mov	r19,r2
 400a018:	a80b883a 	mov	r5,r21
 400a01c:	8009883a 	mov	r4,r16
 400a020:	40008e40 	call	40008e4 <__udivsi3>
 400a024:	9826943a 	slli	r19,r19,16
 400a028:	a0a9383a 	mul	r20,r20,r2
 400a02c:	94bfffcc 	andi	r18,r18,65535
 400a030:	94e4b03a 	or	r18,r18,r19
 400a034:	9500052e 	bgeu	r18,r20,400a04c <__udivdi3+0x12c>
 400a038:	8ca5883a 	add	r18,r17,r18
 400a03c:	10ffffc4 	addi	r3,r2,-1
 400a040:	9440f136 	bltu	r18,r17,400a408 <__udivdi3+0x4e8>
 400a044:	9500f02e 	bgeu	r18,r20,400a408 <__udivdi3+0x4e8>
 400a048:	10bfff84 	addi	r2,r2,-2
 400a04c:	b00c943a 	slli	r6,r22,16
 400a050:	0007883a 	mov	r3,zero
 400a054:	3084b03a 	or	r2,r6,r2
 400a058:	00005906 	br	400a1c0 <__udivdi3+0x2a0>
 400a05c:	29c05636 	bltu	r5,r7,400a1b8 <__udivdi3+0x298>
 400a060:	00bfffd4 	movui	r2,65535
 400a064:	11c0622e 	bgeu	r2,r7,400a1f0 <__udivdi3+0x2d0>
 400a068:	00804034 	movhi	r2,256
 400a06c:	10bfffc4 	addi	r2,r2,-1
 400a070:	11c0ee36 	bltu	r2,r7,400a42c <__udivdi3+0x50c>
 400a074:	00800404 	movi	r2,16
 400a078:	3886d83a 	srl	r3,r7,r2
 400a07c:	01010074 	movhi	r4,1025
 400a080:	213f1404 	addi	r4,r4,-944
 400a084:	20c7883a 	add	r3,r4,r3
 400a088:	18c00003 	ldbu	r3,0(r3)
 400a08c:	05400804 	movi	r21,32
 400a090:	1885883a 	add	r2,r3,r2
 400a094:	a8abc83a 	sub	r21,r21,r2
 400a098:	a800621e 	bne	r21,zero,400a224 <__udivdi3+0x304>
 400a09c:	3c00e936 	bltu	r7,r16,400a444 <__udivdi3+0x524>
 400a0a0:	9985403a 	cmpgeu	r2,r19,r6
 400a0a4:	0007883a 	mov	r3,zero
 400a0a8:	00004506 	br	400a1c0 <__udivdi3+0x2a0>
 400a0ac:	3000041e 	bne	r6,zero,400a0c0 <__udivdi3+0x1a0>
 400a0b0:	000b883a 	mov	r5,zero
 400a0b4:	01000044 	movi	r4,1
 400a0b8:	40008e40 	call	40008e4 <__udivsi3>
 400a0bc:	1023883a 	mov	r17,r2
 400a0c0:	00bfffd4 	movui	r2,65535
 400a0c4:	14404e2e 	bgeu	r2,r17,400a200 <__udivdi3+0x2e0>
 400a0c8:	00804034 	movhi	r2,256
 400a0cc:	10bfffc4 	addi	r2,r2,-1
 400a0d0:	1440d836 	bltu	r2,r17,400a434 <__udivdi3+0x514>
 400a0d4:	00800404 	movi	r2,16
 400a0d8:	8886d83a 	srl	r3,r17,r2
 400a0dc:	01010074 	movhi	r4,1025
 400a0e0:	213f1404 	addi	r4,r4,-944
 400a0e4:	20c7883a 	add	r3,r4,r3
 400a0e8:	18c00003 	ldbu	r3,0(r3)
 400a0ec:	1885883a 	add	r2,r3,r2
 400a0f0:	00c00804 	movi	r3,32
 400a0f4:	1887c83a 	sub	r3,r3,r2
 400a0f8:	18008f1e 	bne	r3,zero,400a338 <__udivdi3+0x418>
 400a0fc:	882ad43a 	srli	r21,r17,16
 400a100:	8461c83a 	sub	r16,r16,r17
 400a104:	8d3fffcc 	andi	r20,r17,65535
 400a108:	00c00044 	movi	r3,1
 400a10c:	8009883a 	mov	r4,r16
 400a110:	a80b883a 	mov	r5,r21
 400a114:	d8c00015 	stw	r3,0(sp)
 400a118:	40009480 	call	4000948 <__umodsi3>
 400a11c:	8009883a 	mov	r4,r16
 400a120:	a80b883a 	mov	r5,r21
 400a124:	1027883a 	mov	r19,r2
 400a128:	40008e40 	call	40008e4 <__udivsi3>
 400a12c:	9826943a 	slli	r19,r19,16
 400a130:	9008d43a 	srli	r4,r18,16
 400a134:	1521383a 	mul	r16,r2,r20
 400a138:	102d883a 	mov	r22,r2
 400a13c:	24c8b03a 	or	r4,r4,r19
 400a140:	d8c00017 	ldw	r3,0(sp)
 400a144:	2400052e 	bgeu	r4,r16,400a15c <__udivdi3+0x23c>
 400a148:	2449883a 	add	r4,r4,r17
 400a14c:	b0bfffc4 	addi	r2,r22,-1
 400a150:	24400136 	bltu	r4,r17,400a158 <__udivdi3+0x238>
 400a154:	2400ca36 	bltu	r4,r16,400a480 <__udivdi3+0x560>
 400a158:	102d883a 	mov	r22,r2
 400a15c:	2421c83a 	sub	r16,r4,r16
 400a160:	a80b883a 	mov	r5,r21
 400a164:	8009883a 	mov	r4,r16
 400a168:	d8c00015 	stw	r3,0(sp)
 400a16c:	40009480 	call	4000948 <__umodsi3>
 400a170:	1027883a 	mov	r19,r2
 400a174:	a80b883a 	mov	r5,r21
 400a178:	8009883a 	mov	r4,r16
 400a17c:	40008e40 	call	40008e4 <__udivsi3>
 400a180:	9826943a 	slli	r19,r19,16
 400a184:	1529383a 	mul	r20,r2,r20
 400a188:	94bfffcc 	andi	r18,r18,65535
 400a18c:	94e4b03a 	or	r18,r18,r19
 400a190:	d8c00017 	ldw	r3,0(sp)
 400a194:	9500052e 	bgeu	r18,r20,400a1ac <__udivdi3+0x28c>
 400a198:	8ca5883a 	add	r18,r17,r18
 400a19c:	113fffc4 	addi	r4,r2,-1
 400a1a0:	94409736 	bltu	r18,r17,400a400 <__udivdi3+0x4e0>
 400a1a4:	9500962e 	bgeu	r18,r20,400a400 <__udivdi3+0x4e0>
 400a1a8:	10bfff84 	addi	r2,r2,-2
 400a1ac:	b00c943a 	slli	r6,r22,16
 400a1b0:	3084b03a 	or	r2,r6,r2
 400a1b4:	00000206 	br	400a1c0 <__udivdi3+0x2a0>
 400a1b8:	0007883a 	mov	r3,zero
 400a1bc:	0005883a 	mov	r2,zero
 400a1c0:	dfc00a17 	ldw	ra,40(sp)
 400a1c4:	df000917 	ldw	fp,36(sp)
 400a1c8:	ddc00817 	ldw	r23,32(sp)
 400a1cc:	dd800717 	ldw	r22,28(sp)
 400a1d0:	dd400617 	ldw	r21,24(sp)
 400a1d4:	dd000517 	ldw	r20,20(sp)
 400a1d8:	dcc00417 	ldw	r19,16(sp)
 400a1dc:	dc800317 	ldw	r18,12(sp)
 400a1e0:	dc400217 	ldw	r17,8(sp)
 400a1e4:	dc000117 	ldw	r16,4(sp)
 400a1e8:	dec00b04 	addi	sp,sp,44
 400a1ec:	f800283a 	ret
 400a1f0:	00803fc4 	movi	r2,255
 400a1f4:	11c5803a 	cmpltu	r2,r2,r7
 400a1f8:	100490fa 	slli	r2,r2,3
 400a1fc:	003f9e06 	br	400a078 <__ram_exceptions_end+0xfac05eec>
 400a200:	00803fc4 	movi	r2,255
 400a204:	1445803a 	cmpltu	r2,r2,r17
 400a208:	100490fa 	slli	r2,r2,3
 400a20c:	003fb206 	br	400a0d8 <__ram_exceptions_end+0xfac05f4c>
 400a210:	00804034 	movhi	r2,256
 400a214:	10bfffc4 	addi	r2,r2,-1
 400a218:	11808836 	bltu	r2,r6,400a43c <__udivdi3+0x51c>
 400a21c:	00800404 	movi	r2,16
 400a220:	003f5606 	br	4009f7c <__ram_exceptions_end+0xfac05df0>
 400a224:	30aed83a 	srl	r23,r6,r2
 400a228:	3d4e983a 	sll	r7,r7,r21
 400a22c:	80acd83a 	srl	r22,r16,r2
 400a230:	9884d83a 	srl	r2,r19,r2
 400a234:	3deeb03a 	or	r23,r7,r23
 400a238:	b824d43a 	srli	r18,r23,16
 400a23c:	8560983a 	sll	r16,r16,r21
 400a240:	b009883a 	mov	r4,r22
 400a244:	900b883a 	mov	r5,r18
 400a248:	3568983a 	sll	r20,r6,r21
 400a24c:	1420b03a 	or	r16,r2,r16
 400a250:	40009480 	call	4000948 <__umodsi3>
 400a254:	b009883a 	mov	r4,r22
 400a258:	900b883a 	mov	r5,r18
 400a25c:	1023883a 	mov	r17,r2
 400a260:	40008e40 	call	40008e4 <__udivsi3>
 400a264:	8808943a 	slli	r4,r17,16
 400a268:	bf3fffcc 	andi	fp,r23,65535
 400a26c:	8006d43a 	srli	r3,r16,16
 400a270:	e0a3383a 	mul	r17,fp,r2
 400a274:	100d883a 	mov	r6,r2
 400a278:	1906b03a 	or	r3,r3,r4
 400a27c:	1c40042e 	bgeu	r3,r17,400a290 <__udivdi3+0x370>
 400a280:	1dc7883a 	add	r3,r3,r23
 400a284:	10bfffc4 	addi	r2,r2,-1
 400a288:	1dc0752e 	bgeu	r3,r23,400a460 <__udivdi3+0x540>
 400a28c:	100d883a 	mov	r6,r2
 400a290:	1c63c83a 	sub	r17,r3,r17
 400a294:	900b883a 	mov	r5,r18
 400a298:	8809883a 	mov	r4,r17
 400a29c:	d9800015 	stw	r6,0(sp)
 400a2a0:	40009480 	call	4000948 <__umodsi3>
 400a2a4:	102d883a 	mov	r22,r2
 400a2a8:	8809883a 	mov	r4,r17
 400a2ac:	900b883a 	mov	r5,r18
 400a2b0:	40008e40 	call	40008e4 <__udivsi3>
 400a2b4:	b02c943a 	slli	r22,r22,16
 400a2b8:	e089383a 	mul	r4,fp,r2
 400a2bc:	843fffcc 	andi	r16,r16,65535
 400a2c0:	85a0b03a 	or	r16,r16,r22
 400a2c4:	d9800017 	ldw	r6,0(sp)
 400a2c8:	8100042e 	bgeu	r16,r4,400a2dc <__udivdi3+0x3bc>
 400a2cc:	85e1883a 	add	r16,r16,r23
 400a2d0:	10ffffc4 	addi	r3,r2,-1
 400a2d4:	85c05e2e 	bgeu	r16,r23,400a450 <__udivdi3+0x530>
 400a2d8:	1805883a 	mov	r2,r3
 400a2dc:	300c943a 	slli	r6,r6,16
 400a2e0:	a17fffcc 	andi	r5,r20,65535
 400a2e4:	a028d43a 	srli	r20,r20,16
 400a2e8:	3084b03a 	or	r2,r6,r2
 400a2ec:	10ffffcc 	andi	r3,r2,65535
 400a2f0:	100cd43a 	srli	r6,r2,16
 400a2f4:	194f383a 	mul	r7,r3,r5
 400a2f8:	1d07383a 	mul	r3,r3,r20
 400a2fc:	314b383a 	mul	r5,r6,r5
 400a300:	3810d43a 	srli	r8,r7,16
 400a304:	8121c83a 	sub	r16,r16,r4
 400a308:	1947883a 	add	r3,r3,r5
 400a30c:	40c7883a 	add	r3,r8,r3
 400a310:	350d383a 	mul	r6,r6,r20
 400a314:	1940022e 	bgeu	r3,r5,400a320 <__udivdi3+0x400>
 400a318:	01000074 	movhi	r4,1
 400a31c:	310d883a 	add	r6,r6,r4
 400a320:	1828d43a 	srli	r20,r3,16
 400a324:	a18d883a 	add	r6,r20,r6
 400a328:	81803e36 	bltu	r16,r6,400a424 <__udivdi3+0x504>
 400a32c:	81803826 	beq	r16,r6,400a410 <__udivdi3+0x4f0>
 400a330:	0007883a 	mov	r3,zero
 400a334:	003fa206 	br	400a1c0 <__ram_exceptions_end+0xfac06034>
 400a338:	88e2983a 	sll	r17,r17,r3
 400a33c:	80a8d83a 	srl	r20,r16,r2
 400a340:	80e0983a 	sll	r16,r16,r3
 400a344:	882ad43a 	srli	r21,r17,16
 400a348:	9884d83a 	srl	r2,r19,r2
 400a34c:	a009883a 	mov	r4,r20
 400a350:	a80b883a 	mov	r5,r21
 400a354:	142eb03a 	or	r23,r2,r16
 400a358:	98e4983a 	sll	r18,r19,r3
 400a35c:	40009480 	call	4000948 <__umodsi3>
 400a360:	a009883a 	mov	r4,r20
 400a364:	a80b883a 	mov	r5,r21
 400a368:	1021883a 	mov	r16,r2
 400a36c:	40008e40 	call	40008e4 <__udivsi3>
 400a370:	1039883a 	mov	fp,r2
 400a374:	8d3fffcc 	andi	r20,r17,65535
 400a378:	8020943a 	slli	r16,r16,16
 400a37c:	b804d43a 	srli	r2,r23,16
 400a380:	a72d383a 	mul	r22,r20,fp
 400a384:	1404b03a 	or	r2,r2,r16
 400a388:	1580062e 	bgeu	r2,r22,400a3a4 <__udivdi3+0x484>
 400a38c:	1445883a 	add	r2,r2,r17
 400a390:	e0ffffc4 	addi	r3,fp,-1
 400a394:	14403836 	bltu	r2,r17,400a478 <__udivdi3+0x558>
 400a398:	1580372e 	bgeu	r2,r22,400a478 <__udivdi3+0x558>
 400a39c:	e73fff84 	addi	fp,fp,-2
 400a3a0:	1445883a 	add	r2,r2,r17
 400a3a4:	15adc83a 	sub	r22,r2,r22
 400a3a8:	a80b883a 	mov	r5,r21
 400a3ac:	b009883a 	mov	r4,r22
 400a3b0:	40009480 	call	4000948 <__umodsi3>
 400a3b4:	1027883a 	mov	r19,r2
 400a3b8:	b009883a 	mov	r4,r22
 400a3bc:	a80b883a 	mov	r5,r21
 400a3c0:	40008e40 	call	40008e4 <__udivsi3>
 400a3c4:	9826943a 	slli	r19,r19,16
 400a3c8:	a0a1383a 	mul	r16,r20,r2
 400a3cc:	b93fffcc 	andi	r4,r23,65535
 400a3d0:	24c8b03a 	or	r4,r4,r19
 400a3d4:	2400062e 	bgeu	r4,r16,400a3f0 <__udivdi3+0x4d0>
 400a3d8:	2449883a 	add	r4,r4,r17
 400a3dc:	10ffffc4 	addi	r3,r2,-1
 400a3e0:	24402336 	bltu	r4,r17,400a470 <__udivdi3+0x550>
 400a3e4:	2400222e 	bgeu	r4,r16,400a470 <__udivdi3+0x550>
 400a3e8:	10bfff84 	addi	r2,r2,-2
 400a3ec:	2449883a 	add	r4,r4,r17
 400a3f0:	e038943a 	slli	fp,fp,16
 400a3f4:	2421c83a 	sub	r16,r4,r16
 400a3f8:	e086b03a 	or	r3,fp,r2
 400a3fc:	003f4306 	br	400a10c <__ram_exceptions_end+0xfac05f80>
 400a400:	2005883a 	mov	r2,r4
 400a404:	003f6906 	br	400a1ac <__ram_exceptions_end+0xfac06020>
 400a408:	1805883a 	mov	r2,r3
 400a40c:	003f0f06 	br	400a04c <__ram_exceptions_end+0xfac05ec0>
 400a410:	1806943a 	slli	r3,r3,16
 400a414:	9d66983a 	sll	r19,r19,r21
 400a418:	39ffffcc 	andi	r7,r7,65535
 400a41c:	19c7883a 	add	r3,r3,r7
 400a420:	98ffc32e 	bgeu	r19,r3,400a330 <__ram_exceptions_end+0xfac061a4>
 400a424:	10bfffc4 	addi	r2,r2,-1
 400a428:	003fc106 	br	400a330 <__ram_exceptions_end+0xfac061a4>
 400a42c:	00800604 	movi	r2,24
 400a430:	003f1106 	br	400a078 <__ram_exceptions_end+0xfac05eec>
 400a434:	00800604 	movi	r2,24
 400a438:	003f2706 	br	400a0d8 <__ram_exceptions_end+0xfac05f4c>
 400a43c:	00800604 	movi	r2,24
 400a440:	003ece06 	br	4009f7c <__ram_exceptions_end+0xfac05df0>
 400a444:	0007883a 	mov	r3,zero
 400a448:	00800044 	movi	r2,1
 400a44c:	003f5c06 	br	400a1c0 <__ram_exceptions_end+0xfac06034>
 400a450:	813fa12e 	bgeu	r16,r4,400a2d8 <__ram_exceptions_end+0xfac0614c>
 400a454:	10bfff84 	addi	r2,r2,-2
 400a458:	85e1883a 	add	r16,r16,r23
 400a45c:	003f9f06 	br	400a2dc <__ram_exceptions_end+0xfac06150>
 400a460:	1c7f8a2e 	bgeu	r3,r17,400a28c <__ram_exceptions_end+0xfac06100>
 400a464:	31bfff84 	addi	r6,r6,-2
 400a468:	1dc7883a 	add	r3,r3,r23
 400a46c:	003f8806 	br	400a290 <__ram_exceptions_end+0xfac06104>
 400a470:	1805883a 	mov	r2,r3
 400a474:	003fde06 	br	400a3f0 <__ram_exceptions_end+0xfac06264>
 400a478:	1839883a 	mov	fp,r3
 400a47c:	003fc906 	br	400a3a4 <__ram_exceptions_end+0xfac06218>
 400a480:	b5bfff84 	addi	r22,r22,-2
 400a484:	2449883a 	add	r4,r4,r17
 400a488:	003f3406 	br	400a15c <__ram_exceptions_end+0xfac05fd0>
 400a48c:	b5bfff84 	addi	r22,r22,-2
 400a490:	1445883a 	add	r2,r2,r17
 400a494:	003edb06 	br	400a004 <__ram_exceptions_end+0xfac05e78>

0400a498 <__umoddi3>:
 400a498:	defff404 	addi	sp,sp,-48
 400a49c:	df000a15 	stw	fp,40(sp)
 400a4a0:	dc400315 	stw	r17,12(sp)
 400a4a4:	dc000215 	stw	r16,8(sp)
 400a4a8:	dfc00b15 	stw	ra,44(sp)
 400a4ac:	ddc00915 	stw	r23,36(sp)
 400a4b0:	dd800815 	stw	r22,32(sp)
 400a4b4:	dd400715 	stw	r21,28(sp)
 400a4b8:	dd000615 	stw	r20,24(sp)
 400a4bc:	dcc00515 	stw	r19,20(sp)
 400a4c0:	dc800415 	stw	r18,16(sp)
 400a4c4:	2021883a 	mov	r16,r4
 400a4c8:	2823883a 	mov	r17,r5
 400a4cc:	2839883a 	mov	fp,r5
 400a4d0:	38003c1e 	bne	r7,zero,400a5c4 <__umoddi3+0x12c>
 400a4d4:	3027883a 	mov	r19,r6
 400a4d8:	2029883a 	mov	r20,r4
 400a4dc:	2980512e 	bgeu	r5,r6,400a624 <__umoddi3+0x18c>
 400a4e0:	00bfffd4 	movui	r2,65535
 400a4e4:	11809a36 	bltu	r2,r6,400a750 <__umoddi3+0x2b8>
 400a4e8:	01003fc4 	movi	r4,255
 400a4ec:	2189803a 	cmpltu	r4,r4,r6
 400a4f0:	200890fa 	slli	r4,r4,3
 400a4f4:	3104d83a 	srl	r2,r6,r4
 400a4f8:	00c10074 	movhi	r3,1025
 400a4fc:	18ff1404 	addi	r3,r3,-944
 400a500:	1885883a 	add	r2,r3,r2
 400a504:	10c00003 	ldbu	r3,0(r2)
 400a508:	00800804 	movi	r2,32
 400a50c:	1909883a 	add	r4,r3,r4
 400a510:	1125c83a 	sub	r18,r2,r4
 400a514:	90000526 	beq	r18,zero,400a52c <__umoddi3+0x94>
 400a518:	8ca2983a 	sll	r17,r17,r18
 400a51c:	8108d83a 	srl	r4,r16,r4
 400a520:	34a6983a 	sll	r19,r6,r18
 400a524:	84a8983a 	sll	r20,r16,r18
 400a528:	2478b03a 	or	fp,r4,r17
 400a52c:	982ed43a 	srli	r23,r19,16
 400a530:	e009883a 	mov	r4,fp
 400a534:	9dbfffcc 	andi	r22,r19,65535
 400a538:	b80b883a 	mov	r5,r23
 400a53c:	40009480 	call	4000948 <__umodsi3>
 400a540:	e009883a 	mov	r4,fp
 400a544:	b80b883a 	mov	r5,r23
 400a548:	102b883a 	mov	r21,r2
 400a54c:	40008e40 	call	40008e4 <__udivsi3>
 400a550:	a806943a 	slli	r3,r21,16
 400a554:	a008d43a 	srli	r4,r20,16
 400a558:	b085383a 	mul	r2,r22,r2
 400a55c:	20c8b03a 	or	r4,r4,r3
 400a560:	2080032e 	bgeu	r4,r2,400a570 <__umoddi3+0xd8>
 400a564:	24c9883a 	add	r4,r4,r19
 400a568:	24c00136 	bltu	r4,r19,400a570 <__umoddi3+0xd8>
 400a56c:	20811036 	bltu	r4,r2,400a9b0 <__umoddi3+0x518>
 400a570:	20abc83a 	sub	r21,r4,r2
 400a574:	b80b883a 	mov	r5,r23
 400a578:	a809883a 	mov	r4,r21
 400a57c:	40009480 	call	4000948 <__umodsi3>
 400a580:	1023883a 	mov	r17,r2
 400a584:	b80b883a 	mov	r5,r23
 400a588:	a809883a 	mov	r4,r21
 400a58c:	40008e40 	call	40008e4 <__udivsi3>
 400a590:	8822943a 	slli	r17,r17,16
 400a594:	b085383a 	mul	r2,r22,r2
 400a598:	a0ffffcc 	andi	r3,r20,65535
 400a59c:	1c46b03a 	or	r3,r3,r17
 400a5a0:	1880042e 	bgeu	r3,r2,400a5b4 <__umoddi3+0x11c>
 400a5a4:	1cc7883a 	add	r3,r3,r19
 400a5a8:	1cc00236 	bltu	r3,r19,400a5b4 <__umoddi3+0x11c>
 400a5ac:	1880012e 	bgeu	r3,r2,400a5b4 <__umoddi3+0x11c>
 400a5b0:	1cc7883a 	add	r3,r3,r19
 400a5b4:	1885c83a 	sub	r2,r3,r2
 400a5b8:	1484d83a 	srl	r2,r2,r18
 400a5bc:	0007883a 	mov	r3,zero
 400a5c0:	00004f06 	br	400a700 <__umoddi3+0x268>
 400a5c4:	29c04c36 	bltu	r5,r7,400a6f8 <__umoddi3+0x260>
 400a5c8:	00bfffd4 	movui	r2,65535
 400a5cc:	11c0582e 	bgeu	r2,r7,400a730 <__umoddi3+0x298>
 400a5d0:	00804034 	movhi	r2,256
 400a5d4:	10bfffc4 	addi	r2,r2,-1
 400a5d8:	11c0e736 	bltu	r2,r7,400a978 <__umoddi3+0x4e0>
 400a5dc:	01000404 	movi	r4,16
 400a5e0:	3904d83a 	srl	r2,r7,r4
 400a5e4:	00c10074 	movhi	r3,1025
 400a5e8:	18ff1404 	addi	r3,r3,-944
 400a5ec:	1885883a 	add	r2,r3,r2
 400a5f0:	14c00003 	ldbu	r19,0(r2)
 400a5f4:	00c00804 	movi	r3,32
 400a5f8:	9927883a 	add	r19,r19,r4
 400a5fc:	1ce9c83a 	sub	r20,r3,r19
 400a600:	a000581e 	bne	r20,zero,400a764 <__umoddi3+0x2cc>
 400a604:	3c400136 	bltu	r7,r17,400a60c <__umoddi3+0x174>
 400a608:	8180eb36 	bltu	r16,r6,400a9b8 <__umoddi3+0x520>
 400a60c:	8185c83a 	sub	r2,r16,r6
 400a610:	89e3c83a 	sub	r17,r17,r7
 400a614:	8089803a 	cmpltu	r4,r16,r2
 400a618:	8939c83a 	sub	fp,r17,r4
 400a61c:	e007883a 	mov	r3,fp
 400a620:	00003706 	br	400a700 <__umoddi3+0x268>
 400a624:	3000041e 	bne	r6,zero,400a638 <__umoddi3+0x1a0>
 400a628:	000b883a 	mov	r5,zero
 400a62c:	01000044 	movi	r4,1
 400a630:	40008e40 	call	40008e4 <__udivsi3>
 400a634:	1027883a 	mov	r19,r2
 400a638:	00bfffd4 	movui	r2,65535
 400a63c:	14c0402e 	bgeu	r2,r19,400a740 <__umoddi3+0x2a8>
 400a640:	00804034 	movhi	r2,256
 400a644:	10bfffc4 	addi	r2,r2,-1
 400a648:	14c0cd36 	bltu	r2,r19,400a980 <__umoddi3+0x4e8>
 400a64c:	00800404 	movi	r2,16
 400a650:	9886d83a 	srl	r3,r19,r2
 400a654:	01010074 	movhi	r4,1025
 400a658:	213f1404 	addi	r4,r4,-944
 400a65c:	20c7883a 	add	r3,r4,r3
 400a660:	18c00003 	ldbu	r3,0(r3)
 400a664:	1887883a 	add	r3,r3,r2
 400a668:	00800804 	movi	r2,32
 400a66c:	10e5c83a 	sub	r18,r2,r3
 400a670:	9000901e 	bne	r18,zero,400a8b4 <__umoddi3+0x41c>
 400a674:	982cd43a 	srli	r22,r19,16
 400a678:	8ce3c83a 	sub	r17,r17,r19
 400a67c:	9d7fffcc 	andi	r21,r19,65535
 400a680:	b00b883a 	mov	r5,r22
 400a684:	8809883a 	mov	r4,r17
 400a688:	40009480 	call	4000948 <__umodsi3>
 400a68c:	8809883a 	mov	r4,r17
 400a690:	b00b883a 	mov	r5,r22
 400a694:	1021883a 	mov	r16,r2
 400a698:	40008e40 	call	40008e4 <__udivsi3>
 400a69c:	8006943a 	slli	r3,r16,16
 400a6a0:	a008d43a 	srli	r4,r20,16
 400a6a4:	1545383a 	mul	r2,r2,r21
 400a6a8:	20c8b03a 	or	r4,r4,r3
 400a6ac:	2080042e 	bgeu	r4,r2,400a6c0 <__umoddi3+0x228>
 400a6b0:	24c9883a 	add	r4,r4,r19
 400a6b4:	24c00236 	bltu	r4,r19,400a6c0 <__umoddi3+0x228>
 400a6b8:	2080012e 	bgeu	r4,r2,400a6c0 <__umoddi3+0x228>
 400a6bc:	24c9883a 	add	r4,r4,r19
 400a6c0:	20a1c83a 	sub	r16,r4,r2
 400a6c4:	b00b883a 	mov	r5,r22
 400a6c8:	8009883a 	mov	r4,r16
 400a6cc:	40009480 	call	4000948 <__umodsi3>
 400a6d0:	1023883a 	mov	r17,r2
 400a6d4:	b00b883a 	mov	r5,r22
 400a6d8:	8009883a 	mov	r4,r16
 400a6dc:	40008e40 	call	40008e4 <__udivsi3>
 400a6e0:	8822943a 	slli	r17,r17,16
 400a6e4:	1545383a 	mul	r2,r2,r21
 400a6e8:	a53fffcc 	andi	r20,r20,65535
 400a6ec:	a446b03a 	or	r3,r20,r17
 400a6f0:	18bfb02e 	bgeu	r3,r2,400a5b4 <__ram_exceptions_end+0xfac06428>
 400a6f4:	003fab06 	br	400a5a4 <__ram_exceptions_end+0xfac06418>
 400a6f8:	2005883a 	mov	r2,r4
 400a6fc:	2807883a 	mov	r3,r5
 400a700:	dfc00b17 	ldw	ra,44(sp)
 400a704:	df000a17 	ldw	fp,40(sp)
 400a708:	ddc00917 	ldw	r23,36(sp)
 400a70c:	dd800817 	ldw	r22,32(sp)
 400a710:	dd400717 	ldw	r21,28(sp)
 400a714:	dd000617 	ldw	r20,24(sp)
 400a718:	dcc00517 	ldw	r19,20(sp)
 400a71c:	dc800417 	ldw	r18,16(sp)
 400a720:	dc400317 	ldw	r17,12(sp)
 400a724:	dc000217 	ldw	r16,8(sp)
 400a728:	dec00c04 	addi	sp,sp,48
 400a72c:	f800283a 	ret
 400a730:	04c03fc4 	movi	r19,255
 400a734:	99c9803a 	cmpltu	r4,r19,r7
 400a738:	200890fa 	slli	r4,r4,3
 400a73c:	003fa806 	br	400a5e0 <__ram_exceptions_end+0xfac06454>
 400a740:	00803fc4 	movi	r2,255
 400a744:	14c5803a 	cmpltu	r2,r2,r19
 400a748:	100490fa 	slli	r2,r2,3
 400a74c:	003fc006 	br	400a650 <__ram_exceptions_end+0xfac064c4>
 400a750:	00804034 	movhi	r2,256
 400a754:	10bfffc4 	addi	r2,r2,-1
 400a758:	11808b36 	bltu	r2,r6,400a988 <__umoddi3+0x4f0>
 400a75c:	01000404 	movi	r4,16
 400a760:	003f6406 	br	400a4f4 <__ram_exceptions_end+0xfac06368>
 400a764:	34c4d83a 	srl	r2,r6,r19
 400a768:	3d0e983a 	sll	r7,r7,r20
 400a76c:	8cf8d83a 	srl	fp,r17,r19
 400a770:	8d10983a 	sll	r8,r17,r20
 400a774:	38aab03a 	or	r21,r7,r2
 400a778:	a82cd43a 	srli	r22,r21,16
 400a77c:	84e2d83a 	srl	r17,r16,r19
 400a780:	e009883a 	mov	r4,fp
 400a784:	b00b883a 	mov	r5,r22
 400a788:	8a22b03a 	or	r17,r17,r8
 400a78c:	3524983a 	sll	r18,r6,r20
 400a790:	40009480 	call	4000948 <__umodsi3>
 400a794:	e009883a 	mov	r4,fp
 400a798:	b00b883a 	mov	r5,r22
 400a79c:	102f883a 	mov	r23,r2
 400a7a0:	40008e40 	call	40008e4 <__udivsi3>
 400a7a4:	100d883a 	mov	r6,r2
 400a7a8:	b808943a 	slli	r4,r23,16
 400a7ac:	aa3fffcc 	andi	r8,r21,65535
 400a7b0:	8804d43a 	srli	r2,r17,16
 400a7b4:	41af383a 	mul	r23,r8,r6
 400a7b8:	8520983a 	sll	r16,r16,r20
 400a7bc:	1104b03a 	or	r2,r2,r4
 400a7c0:	15c0042e 	bgeu	r2,r23,400a7d4 <__umoddi3+0x33c>
 400a7c4:	1545883a 	add	r2,r2,r21
 400a7c8:	30ffffc4 	addi	r3,r6,-1
 400a7cc:	1540742e 	bgeu	r2,r21,400a9a0 <__umoddi3+0x508>
 400a7d0:	180d883a 	mov	r6,r3
 400a7d4:	15efc83a 	sub	r23,r2,r23
 400a7d8:	b00b883a 	mov	r5,r22
 400a7dc:	b809883a 	mov	r4,r23
 400a7e0:	d9800115 	stw	r6,4(sp)
 400a7e4:	da000015 	stw	r8,0(sp)
 400a7e8:	40009480 	call	4000948 <__umodsi3>
 400a7ec:	b00b883a 	mov	r5,r22
 400a7f0:	b809883a 	mov	r4,r23
 400a7f4:	1039883a 	mov	fp,r2
 400a7f8:	40008e40 	call	40008e4 <__udivsi3>
 400a7fc:	da000017 	ldw	r8,0(sp)
 400a800:	e038943a 	slli	fp,fp,16
 400a804:	100b883a 	mov	r5,r2
 400a808:	4089383a 	mul	r4,r8,r2
 400a80c:	8a3fffcc 	andi	r8,r17,65535
 400a810:	4710b03a 	or	r8,r8,fp
 400a814:	d9800117 	ldw	r6,4(sp)
 400a818:	4100042e 	bgeu	r8,r4,400a82c <__umoddi3+0x394>
 400a81c:	4551883a 	add	r8,r8,r21
 400a820:	10bfffc4 	addi	r2,r2,-1
 400a824:	45405a2e 	bgeu	r8,r21,400a990 <__umoddi3+0x4f8>
 400a828:	100b883a 	mov	r5,r2
 400a82c:	300c943a 	slli	r6,r6,16
 400a830:	91ffffcc 	andi	r7,r18,65535
 400a834:	9004d43a 	srli	r2,r18,16
 400a838:	314cb03a 	or	r6,r6,r5
 400a83c:	317fffcc 	andi	r5,r6,65535
 400a840:	300cd43a 	srli	r6,r6,16
 400a844:	29d3383a 	mul	r9,r5,r7
 400a848:	288b383a 	mul	r5,r5,r2
 400a84c:	31cf383a 	mul	r7,r6,r7
 400a850:	4806d43a 	srli	r3,r9,16
 400a854:	4111c83a 	sub	r8,r8,r4
 400a858:	29cb883a 	add	r5,r5,r7
 400a85c:	194b883a 	add	r5,r3,r5
 400a860:	3085383a 	mul	r2,r6,r2
 400a864:	29c0022e 	bgeu	r5,r7,400a870 <__umoddi3+0x3d8>
 400a868:	00c00074 	movhi	r3,1
 400a86c:	10c5883a 	add	r2,r2,r3
 400a870:	2808d43a 	srli	r4,r5,16
 400a874:	280a943a 	slli	r5,r5,16
 400a878:	4a7fffcc 	andi	r9,r9,65535
 400a87c:	2085883a 	add	r2,r4,r2
 400a880:	2a4b883a 	add	r5,r5,r9
 400a884:	40803636 	bltu	r8,r2,400a960 <__umoddi3+0x4c8>
 400a888:	40804d26 	beq	r8,r2,400a9c0 <__umoddi3+0x528>
 400a88c:	4089c83a 	sub	r4,r8,r2
 400a890:	280f883a 	mov	r7,r5
 400a894:	81cfc83a 	sub	r7,r16,r7
 400a898:	81c7803a 	cmpltu	r3,r16,r7
 400a89c:	20c7c83a 	sub	r3,r4,r3
 400a8a0:	1cc4983a 	sll	r2,r3,r19
 400a8a4:	3d0ed83a 	srl	r7,r7,r20
 400a8a8:	1d06d83a 	srl	r3,r3,r20
 400a8ac:	11c4b03a 	or	r2,r2,r7
 400a8b0:	003f9306 	br	400a700 <__ram_exceptions_end+0xfac06574>
 400a8b4:	9ca6983a 	sll	r19,r19,r18
 400a8b8:	88e8d83a 	srl	r20,r17,r3
 400a8bc:	80c4d83a 	srl	r2,r16,r3
 400a8c0:	982cd43a 	srli	r22,r19,16
 400a8c4:	8ca2983a 	sll	r17,r17,r18
 400a8c8:	a009883a 	mov	r4,r20
 400a8cc:	b00b883a 	mov	r5,r22
 400a8d0:	1478b03a 	or	fp,r2,r17
 400a8d4:	40009480 	call	4000948 <__umodsi3>
 400a8d8:	a009883a 	mov	r4,r20
 400a8dc:	b00b883a 	mov	r5,r22
 400a8e0:	1023883a 	mov	r17,r2
 400a8e4:	40008e40 	call	40008e4 <__udivsi3>
 400a8e8:	9d7fffcc 	andi	r21,r19,65535
 400a8ec:	880a943a 	slli	r5,r17,16
 400a8f0:	e008d43a 	srli	r4,fp,16
 400a8f4:	a885383a 	mul	r2,r21,r2
 400a8f8:	84a8983a 	sll	r20,r16,r18
 400a8fc:	2148b03a 	or	r4,r4,r5
 400a900:	2080042e 	bgeu	r4,r2,400a914 <__umoddi3+0x47c>
 400a904:	24c9883a 	add	r4,r4,r19
 400a908:	24c00236 	bltu	r4,r19,400a914 <__umoddi3+0x47c>
 400a90c:	2080012e 	bgeu	r4,r2,400a914 <__umoddi3+0x47c>
 400a910:	24c9883a 	add	r4,r4,r19
 400a914:	20a3c83a 	sub	r17,r4,r2
 400a918:	b00b883a 	mov	r5,r22
 400a91c:	8809883a 	mov	r4,r17
 400a920:	40009480 	call	4000948 <__umodsi3>
 400a924:	102f883a 	mov	r23,r2
 400a928:	8809883a 	mov	r4,r17
 400a92c:	b00b883a 	mov	r5,r22
 400a930:	40008e40 	call	40008e4 <__udivsi3>
 400a934:	b82e943a 	slli	r23,r23,16
 400a938:	a885383a 	mul	r2,r21,r2
 400a93c:	e13fffcc 	andi	r4,fp,65535
 400a940:	25c8b03a 	or	r4,r4,r23
 400a944:	2080042e 	bgeu	r4,r2,400a958 <__umoddi3+0x4c0>
 400a948:	24c9883a 	add	r4,r4,r19
 400a94c:	24c00236 	bltu	r4,r19,400a958 <__umoddi3+0x4c0>
 400a950:	2080012e 	bgeu	r4,r2,400a958 <__umoddi3+0x4c0>
 400a954:	24c9883a 	add	r4,r4,r19
 400a958:	20a3c83a 	sub	r17,r4,r2
 400a95c:	003f4806 	br	400a680 <__ram_exceptions_end+0xfac064f4>
 400a960:	2c8fc83a 	sub	r7,r5,r18
 400a964:	1545c83a 	sub	r2,r2,r21
 400a968:	29cb803a 	cmpltu	r5,r5,r7
 400a96c:	1145c83a 	sub	r2,r2,r5
 400a970:	4089c83a 	sub	r4,r8,r2
 400a974:	003fc706 	br	400a894 <__ram_exceptions_end+0xfac06708>
 400a978:	01000604 	movi	r4,24
 400a97c:	003f1806 	br	400a5e0 <__ram_exceptions_end+0xfac06454>
 400a980:	00800604 	movi	r2,24
 400a984:	003f3206 	br	400a650 <__ram_exceptions_end+0xfac064c4>
 400a988:	01000604 	movi	r4,24
 400a98c:	003ed906 	br	400a4f4 <__ram_exceptions_end+0xfac06368>
 400a990:	413fa52e 	bgeu	r8,r4,400a828 <__ram_exceptions_end+0xfac0669c>
 400a994:	297fff84 	addi	r5,r5,-2
 400a998:	4551883a 	add	r8,r8,r21
 400a99c:	003fa306 	br	400a82c <__ram_exceptions_end+0xfac066a0>
 400a9a0:	15ff8b2e 	bgeu	r2,r23,400a7d0 <__ram_exceptions_end+0xfac06644>
 400a9a4:	31bfff84 	addi	r6,r6,-2
 400a9a8:	1545883a 	add	r2,r2,r21
 400a9ac:	003f8906 	br	400a7d4 <__ram_exceptions_end+0xfac06648>
 400a9b0:	24c9883a 	add	r4,r4,r19
 400a9b4:	003eee06 	br	400a570 <__ram_exceptions_end+0xfac063e4>
 400a9b8:	8005883a 	mov	r2,r16
 400a9bc:	003f1706 	br	400a61c <__ram_exceptions_end+0xfac06490>
 400a9c0:	817fe736 	bltu	r16,r5,400a960 <__ram_exceptions_end+0xfac067d4>
 400a9c4:	280f883a 	mov	r7,r5
 400a9c8:	0009883a 	mov	r4,zero
 400a9cc:	003fb106 	br	400a894 <__ram_exceptions_end+0xfac06708>

0400a9d0 <__adddf3>:
 400a9d0:	02c00434 	movhi	r11,16
 400a9d4:	5affffc4 	addi	r11,r11,-1
 400a9d8:	2806d7fa 	srli	r3,r5,31
 400a9dc:	2ad4703a 	and	r10,r5,r11
 400a9e0:	3ad2703a 	and	r9,r7,r11
 400a9e4:	3804d53a 	srli	r2,r7,20
 400a9e8:	3018d77a 	srli	r12,r6,29
 400a9ec:	280ad53a 	srli	r5,r5,20
 400a9f0:	501490fa 	slli	r10,r10,3
 400a9f4:	2010d77a 	srli	r8,r4,29
 400a9f8:	481290fa 	slli	r9,r9,3
 400a9fc:	380ed7fa 	srli	r7,r7,31
 400aa00:	defffb04 	addi	sp,sp,-20
 400aa04:	dc800215 	stw	r18,8(sp)
 400aa08:	dc400115 	stw	r17,4(sp)
 400aa0c:	dc000015 	stw	r16,0(sp)
 400aa10:	dfc00415 	stw	ra,16(sp)
 400aa14:	dcc00315 	stw	r19,12(sp)
 400aa18:	1c803fcc 	andi	r18,r3,255
 400aa1c:	2c01ffcc 	andi	r16,r5,2047
 400aa20:	5210b03a 	or	r8,r10,r8
 400aa24:	202290fa 	slli	r17,r4,3
 400aa28:	1081ffcc 	andi	r2,r2,2047
 400aa2c:	4b12b03a 	or	r9,r9,r12
 400aa30:	300c90fa 	slli	r6,r6,3
 400aa34:	91c07526 	beq	r18,r7,400ac0c <__adddf3+0x23c>
 400aa38:	8087c83a 	sub	r3,r16,r2
 400aa3c:	00c0ab0e 	bge	zero,r3,400acec <__adddf3+0x31c>
 400aa40:	10002a1e 	bne	r2,zero,400aaec <__adddf3+0x11c>
 400aa44:	4984b03a 	or	r2,r9,r6
 400aa48:	1000961e 	bne	r2,zero,400aca4 <__adddf3+0x2d4>
 400aa4c:	888001cc 	andi	r2,r17,7
 400aa50:	10000726 	beq	r2,zero,400aa70 <__adddf3+0xa0>
 400aa54:	888003cc 	andi	r2,r17,15
 400aa58:	00c00104 	movi	r3,4
 400aa5c:	10c00426 	beq	r2,r3,400aa70 <__adddf3+0xa0>
 400aa60:	88c7883a 	add	r3,r17,r3
 400aa64:	1c63803a 	cmpltu	r17,r3,r17
 400aa68:	4451883a 	add	r8,r8,r17
 400aa6c:	1823883a 	mov	r17,r3
 400aa70:	4080202c 	andhi	r2,r8,128
 400aa74:	10005926 	beq	r2,zero,400abdc <__adddf3+0x20c>
 400aa78:	84000044 	addi	r16,r16,1
 400aa7c:	0081ffc4 	movi	r2,2047
 400aa80:	8080ba26 	beq	r16,r2,400ad6c <__adddf3+0x39c>
 400aa84:	00bfe034 	movhi	r2,65408
 400aa88:	10bfffc4 	addi	r2,r2,-1
 400aa8c:	4090703a 	and	r8,r8,r2
 400aa90:	4004977a 	slli	r2,r8,29
 400aa94:	4010927a 	slli	r8,r8,9
 400aa98:	8822d0fa 	srli	r17,r17,3
 400aa9c:	8401ffcc 	andi	r16,r16,2047
 400aaa0:	4010d33a 	srli	r8,r8,12
 400aaa4:	9007883a 	mov	r3,r18
 400aaa8:	1444b03a 	or	r2,r2,r17
 400aaac:	8401ffcc 	andi	r16,r16,2047
 400aab0:	8020953a 	slli	r16,r16,20
 400aab4:	18c03fcc 	andi	r3,r3,255
 400aab8:	01000434 	movhi	r4,16
 400aabc:	213fffc4 	addi	r4,r4,-1
 400aac0:	180697fa 	slli	r3,r3,31
 400aac4:	4110703a 	and	r8,r8,r4
 400aac8:	4410b03a 	or	r8,r8,r16
 400aacc:	40c6b03a 	or	r3,r8,r3
 400aad0:	dfc00417 	ldw	ra,16(sp)
 400aad4:	dcc00317 	ldw	r19,12(sp)
 400aad8:	dc800217 	ldw	r18,8(sp)
 400aadc:	dc400117 	ldw	r17,4(sp)
 400aae0:	dc000017 	ldw	r16,0(sp)
 400aae4:	dec00504 	addi	sp,sp,20
 400aae8:	f800283a 	ret
 400aaec:	0081ffc4 	movi	r2,2047
 400aaf0:	80bfd626 	beq	r16,r2,400aa4c <__ram_exceptions_end+0xfac068c0>
 400aaf4:	4a402034 	orhi	r9,r9,128
 400aaf8:	00800e04 	movi	r2,56
 400aafc:	10c09f16 	blt	r2,r3,400ad7c <__adddf3+0x3ac>
 400ab00:	008007c4 	movi	r2,31
 400ab04:	10c0c216 	blt	r2,r3,400ae10 <__adddf3+0x440>
 400ab08:	00800804 	movi	r2,32
 400ab0c:	10c5c83a 	sub	r2,r2,r3
 400ab10:	488a983a 	sll	r5,r9,r2
 400ab14:	30c8d83a 	srl	r4,r6,r3
 400ab18:	3084983a 	sll	r2,r6,r2
 400ab1c:	48c6d83a 	srl	r3,r9,r3
 400ab20:	290cb03a 	or	r6,r5,r4
 400ab24:	1004c03a 	cmpne	r2,r2,zero
 400ab28:	308cb03a 	or	r6,r6,r2
 400ab2c:	898dc83a 	sub	r6,r17,r6
 400ab30:	89a3803a 	cmpltu	r17,r17,r6
 400ab34:	40d1c83a 	sub	r8,r8,r3
 400ab38:	4451c83a 	sub	r8,r8,r17
 400ab3c:	3023883a 	mov	r17,r6
 400ab40:	4080202c 	andhi	r2,r8,128
 400ab44:	10002326 	beq	r2,zero,400abd4 <__adddf3+0x204>
 400ab48:	04c02034 	movhi	r19,128
 400ab4c:	9cffffc4 	addi	r19,r19,-1
 400ab50:	44e6703a 	and	r19,r8,r19
 400ab54:	98007626 	beq	r19,zero,400ad30 <__adddf3+0x360>
 400ab58:	9809883a 	mov	r4,r19
 400ab5c:	400cfd40 	call	400cfd4 <__clzsi2>
 400ab60:	10fffe04 	addi	r3,r2,-8
 400ab64:	010007c4 	movi	r4,31
 400ab68:	20c07716 	blt	r4,r3,400ad48 <__adddf3+0x378>
 400ab6c:	00800804 	movi	r2,32
 400ab70:	10c5c83a 	sub	r2,r2,r3
 400ab74:	8884d83a 	srl	r2,r17,r2
 400ab78:	98d0983a 	sll	r8,r19,r3
 400ab7c:	88e2983a 	sll	r17,r17,r3
 400ab80:	1204b03a 	or	r2,r2,r8
 400ab84:	1c007416 	blt	r3,r16,400ad58 <__adddf3+0x388>
 400ab88:	1c21c83a 	sub	r16,r3,r16
 400ab8c:	82000044 	addi	r8,r16,1
 400ab90:	00c007c4 	movi	r3,31
 400ab94:	1a009116 	blt	r3,r8,400addc <__adddf3+0x40c>
 400ab98:	00c00804 	movi	r3,32
 400ab9c:	1a07c83a 	sub	r3,r3,r8
 400aba0:	8a08d83a 	srl	r4,r17,r8
 400aba4:	88e2983a 	sll	r17,r17,r3
 400aba8:	10c6983a 	sll	r3,r2,r3
 400abac:	1210d83a 	srl	r8,r2,r8
 400abb0:	8804c03a 	cmpne	r2,r17,zero
 400abb4:	1906b03a 	or	r3,r3,r4
 400abb8:	18a2b03a 	or	r17,r3,r2
 400abbc:	0021883a 	mov	r16,zero
 400abc0:	003fa206 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400abc4:	1890b03a 	or	r8,r3,r2
 400abc8:	40017d26 	beq	r8,zero,400b1c0 <__adddf3+0x7f0>
 400abcc:	1011883a 	mov	r8,r2
 400abd0:	1823883a 	mov	r17,r3
 400abd4:	888001cc 	andi	r2,r17,7
 400abd8:	103f9e1e 	bne	r2,zero,400aa54 <__ram_exceptions_end+0xfac068c8>
 400abdc:	4004977a 	slli	r2,r8,29
 400abe0:	8822d0fa 	srli	r17,r17,3
 400abe4:	4010d0fa 	srli	r8,r8,3
 400abe8:	9007883a 	mov	r3,r18
 400abec:	1444b03a 	or	r2,r2,r17
 400abf0:	0101ffc4 	movi	r4,2047
 400abf4:	81002426 	beq	r16,r4,400ac88 <__adddf3+0x2b8>
 400abf8:	8120703a 	and	r16,r16,r4
 400abfc:	01000434 	movhi	r4,16
 400ac00:	213fffc4 	addi	r4,r4,-1
 400ac04:	4110703a 	and	r8,r8,r4
 400ac08:	003fa806 	br	400aaac <__ram_exceptions_end+0xfac06920>
 400ac0c:	8089c83a 	sub	r4,r16,r2
 400ac10:	01005e0e 	bge	zero,r4,400ad8c <__adddf3+0x3bc>
 400ac14:	10002b26 	beq	r2,zero,400acc4 <__adddf3+0x2f4>
 400ac18:	0081ffc4 	movi	r2,2047
 400ac1c:	80bf8b26 	beq	r16,r2,400aa4c <__ram_exceptions_end+0xfac068c0>
 400ac20:	4a402034 	orhi	r9,r9,128
 400ac24:	00800e04 	movi	r2,56
 400ac28:	1100a40e 	bge	r2,r4,400aebc <__adddf3+0x4ec>
 400ac2c:	498cb03a 	or	r6,r9,r6
 400ac30:	300ac03a 	cmpne	r5,r6,zero
 400ac34:	0013883a 	mov	r9,zero
 400ac38:	2c4b883a 	add	r5,r5,r17
 400ac3c:	2c63803a 	cmpltu	r17,r5,r17
 400ac40:	4a11883a 	add	r8,r9,r8
 400ac44:	8a11883a 	add	r8,r17,r8
 400ac48:	2823883a 	mov	r17,r5
 400ac4c:	4080202c 	andhi	r2,r8,128
 400ac50:	103fe026 	beq	r2,zero,400abd4 <__ram_exceptions_end+0xfac06a48>
 400ac54:	84000044 	addi	r16,r16,1
 400ac58:	0081ffc4 	movi	r2,2047
 400ac5c:	8080d226 	beq	r16,r2,400afa8 <__adddf3+0x5d8>
 400ac60:	00bfe034 	movhi	r2,65408
 400ac64:	10bfffc4 	addi	r2,r2,-1
 400ac68:	4090703a 	and	r8,r8,r2
 400ac6c:	880ad07a 	srli	r5,r17,1
 400ac70:	400897fa 	slli	r4,r8,31
 400ac74:	88c0004c 	andi	r3,r17,1
 400ac78:	28e2b03a 	or	r17,r5,r3
 400ac7c:	4010d07a 	srli	r8,r8,1
 400ac80:	2462b03a 	or	r17,r4,r17
 400ac84:	003f7106 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400ac88:	4088b03a 	or	r4,r8,r2
 400ac8c:	20014526 	beq	r4,zero,400b1a4 <__adddf3+0x7d4>
 400ac90:	01000434 	movhi	r4,16
 400ac94:	42000234 	orhi	r8,r8,8
 400ac98:	213fffc4 	addi	r4,r4,-1
 400ac9c:	4110703a 	and	r8,r8,r4
 400aca0:	003f8206 	br	400aaac <__ram_exceptions_end+0xfac06920>
 400aca4:	18ffffc4 	addi	r3,r3,-1
 400aca8:	1800491e 	bne	r3,zero,400add0 <__adddf3+0x400>
 400acac:	898bc83a 	sub	r5,r17,r6
 400acb0:	8963803a 	cmpltu	r17,r17,r5
 400acb4:	4251c83a 	sub	r8,r8,r9
 400acb8:	4451c83a 	sub	r8,r8,r17
 400acbc:	2823883a 	mov	r17,r5
 400acc0:	003f9f06 	br	400ab40 <__ram_exceptions_end+0xfac069b4>
 400acc4:	4984b03a 	or	r2,r9,r6
 400acc8:	103f6026 	beq	r2,zero,400aa4c <__ram_exceptions_end+0xfac068c0>
 400accc:	213fffc4 	addi	r4,r4,-1
 400acd0:	2000931e 	bne	r4,zero,400af20 <__adddf3+0x550>
 400acd4:	898d883a 	add	r6,r17,r6
 400acd8:	3463803a 	cmpltu	r17,r6,r17
 400acdc:	4251883a 	add	r8,r8,r9
 400ace0:	8a11883a 	add	r8,r17,r8
 400ace4:	3023883a 	mov	r17,r6
 400ace8:	003fd806 	br	400ac4c <__ram_exceptions_end+0xfac06ac0>
 400acec:	1800541e 	bne	r3,zero,400ae40 <__adddf3+0x470>
 400acf0:	80800044 	addi	r2,r16,1
 400acf4:	1081ffcc 	andi	r2,r2,2047
 400acf8:	00c00044 	movi	r3,1
 400acfc:	1880a00e 	bge	r3,r2,400af80 <__adddf3+0x5b0>
 400ad00:	8989c83a 	sub	r4,r17,r6
 400ad04:	8905803a 	cmpltu	r2,r17,r4
 400ad08:	4267c83a 	sub	r19,r8,r9
 400ad0c:	98a7c83a 	sub	r19,r19,r2
 400ad10:	9880202c 	andhi	r2,r19,128
 400ad14:	10006326 	beq	r2,zero,400aea4 <__adddf3+0x4d4>
 400ad18:	3463c83a 	sub	r17,r6,r17
 400ad1c:	4a07c83a 	sub	r3,r9,r8
 400ad20:	344d803a 	cmpltu	r6,r6,r17
 400ad24:	19a7c83a 	sub	r19,r3,r6
 400ad28:	3825883a 	mov	r18,r7
 400ad2c:	983f8a1e 	bne	r19,zero,400ab58 <__ram_exceptions_end+0xfac069cc>
 400ad30:	8809883a 	mov	r4,r17
 400ad34:	400cfd40 	call	400cfd4 <__clzsi2>
 400ad38:	10800804 	addi	r2,r2,32
 400ad3c:	10fffe04 	addi	r3,r2,-8
 400ad40:	010007c4 	movi	r4,31
 400ad44:	20ff890e 	bge	r4,r3,400ab6c <__ram_exceptions_end+0xfac069e0>
 400ad48:	10bff604 	addi	r2,r2,-40
 400ad4c:	8884983a 	sll	r2,r17,r2
 400ad50:	0023883a 	mov	r17,zero
 400ad54:	1c3f8c0e 	bge	r3,r16,400ab88 <__ram_exceptions_end+0xfac069fc>
 400ad58:	023fe034 	movhi	r8,65408
 400ad5c:	423fffc4 	addi	r8,r8,-1
 400ad60:	80e1c83a 	sub	r16,r16,r3
 400ad64:	1210703a 	and	r8,r2,r8
 400ad68:	003f3806 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400ad6c:	9007883a 	mov	r3,r18
 400ad70:	0011883a 	mov	r8,zero
 400ad74:	0005883a 	mov	r2,zero
 400ad78:	003f4c06 	br	400aaac <__ram_exceptions_end+0xfac06920>
 400ad7c:	498cb03a 	or	r6,r9,r6
 400ad80:	300cc03a 	cmpne	r6,r6,zero
 400ad84:	0007883a 	mov	r3,zero
 400ad88:	003f6806 	br	400ab2c <__ram_exceptions_end+0xfac069a0>
 400ad8c:	20009c1e 	bne	r4,zero,400b000 <__adddf3+0x630>
 400ad90:	80800044 	addi	r2,r16,1
 400ad94:	1141ffcc 	andi	r5,r2,2047
 400ad98:	01000044 	movi	r4,1
 400ad9c:	2140670e 	bge	r4,r5,400af3c <__adddf3+0x56c>
 400ada0:	0101ffc4 	movi	r4,2047
 400ada4:	11007f26 	beq	r2,r4,400afa4 <__adddf3+0x5d4>
 400ada8:	898d883a 	add	r6,r17,r6
 400adac:	4247883a 	add	r3,r8,r9
 400adb0:	3451803a 	cmpltu	r8,r6,r17
 400adb4:	40d1883a 	add	r8,r8,r3
 400adb8:	402297fa 	slli	r17,r8,31
 400adbc:	300cd07a 	srli	r6,r6,1
 400adc0:	4010d07a 	srli	r8,r8,1
 400adc4:	1021883a 	mov	r16,r2
 400adc8:	89a2b03a 	or	r17,r17,r6
 400adcc:	003f1f06 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400add0:	0081ffc4 	movi	r2,2047
 400add4:	80bf481e 	bne	r16,r2,400aaf8 <__ram_exceptions_end+0xfac0696c>
 400add8:	003f1c06 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400addc:	843ff844 	addi	r16,r16,-31
 400ade0:	01000804 	movi	r4,32
 400ade4:	1406d83a 	srl	r3,r2,r16
 400ade8:	41005026 	beq	r8,r4,400af2c <__adddf3+0x55c>
 400adec:	01001004 	movi	r4,64
 400adf0:	2211c83a 	sub	r8,r4,r8
 400adf4:	1204983a 	sll	r2,r2,r8
 400adf8:	88a2b03a 	or	r17,r17,r2
 400adfc:	8822c03a 	cmpne	r17,r17,zero
 400ae00:	1c62b03a 	or	r17,r3,r17
 400ae04:	0011883a 	mov	r8,zero
 400ae08:	0021883a 	mov	r16,zero
 400ae0c:	003f7106 	br	400abd4 <__ram_exceptions_end+0xfac06a48>
 400ae10:	193ff804 	addi	r4,r3,-32
 400ae14:	00800804 	movi	r2,32
 400ae18:	4908d83a 	srl	r4,r9,r4
 400ae1c:	18804526 	beq	r3,r2,400af34 <__adddf3+0x564>
 400ae20:	00801004 	movi	r2,64
 400ae24:	10c5c83a 	sub	r2,r2,r3
 400ae28:	4886983a 	sll	r3,r9,r2
 400ae2c:	198cb03a 	or	r6,r3,r6
 400ae30:	300cc03a 	cmpne	r6,r6,zero
 400ae34:	218cb03a 	or	r6,r4,r6
 400ae38:	0007883a 	mov	r3,zero
 400ae3c:	003f3b06 	br	400ab2c <__ram_exceptions_end+0xfac069a0>
 400ae40:	80002a26 	beq	r16,zero,400aeec <__adddf3+0x51c>
 400ae44:	0101ffc4 	movi	r4,2047
 400ae48:	11006826 	beq	r2,r4,400afec <__adddf3+0x61c>
 400ae4c:	00c7c83a 	sub	r3,zero,r3
 400ae50:	42002034 	orhi	r8,r8,128
 400ae54:	01000e04 	movi	r4,56
 400ae58:	20c07c16 	blt	r4,r3,400b04c <__adddf3+0x67c>
 400ae5c:	010007c4 	movi	r4,31
 400ae60:	20c0da16 	blt	r4,r3,400b1cc <__adddf3+0x7fc>
 400ae64:	01000804 	movi	r4,32
 400ae68:	20c9c83a 	sub	r4,r4,r3
 400ae6c:	4114983a 	sll	r10,r8,r4
 400ae70:	88cad83a 	srl	r5,r17,r3
 400ae74:	8908983a 	sll	r4,r17,r4
 400ae78:	40c6d83a 	srl	r3,r8,r3
 400ae7c:	5162b03a 	or	r17,r10,r5
 400ae80:	2008c03a 	cmpne	r4,r4,zero
 400ae84:	8922b03a 	or	r17,r17,r4
 400ae88:	3463c83a 	sub	r17,r6,r17
 400ae8c:	48c7c83a 	sub	r3,r9,r3
 400ae90:	344d803a 	cmpltu	r6,r6,r17
 400ae94:	1991c83a 	sub	r8,r3,r6
 400ae98:	1021883a 	mov	r16,r2
 400ae9c:	3825883a 	mov	r18,r7
 400aea0:	003f2706 	br	400ab40 <__ram_exceptions_end+0xfac069b4>
 400aea4:	24d0b03a 	or	r8,r4,r19
 400aea8:	40001b1e 	bne	r8,zero,400af18 <__adddf3+0x548>
 400aeac:	0005883a 	mov	r2,zero
 400aeb0:	0007883a 	mov	r3,zero
 400aeb4:	0021883a 	mov	r16,zero
 400aeb8:	003f4d06 	br	400abf0 <__ram_exceptions_end+0xfac06a64>
 400aebc:	008007c4 	movi	r2,31
 400aec0:	11003c16 	blt	r2,r4,400afb4 <__adddf3+0x5e4>
 400aec4:	00800804 	movi	r2,32
 400aec8:	1105c83a 	sub	r2,r2,r4
 400aecc:	488e983a 	sll	r7,r9,r2
 400aed0:	310ad83a 	srl	r5,r6,r4
 400aed4:	3084983a 	sll	r2,r6,r2
 400aed8:	4912d83a 	srl	r9,r9,r4
 400aedc:	394ab03a 	or	r5,r7,r5
 400aee0:	1004c03a 	cmpne	r2,r2,zero
 400aee4:	288ab03a 	or	r5,r5,r2
 400aee8:	003f5306 	br	400ac38 <__ram_exceptions_end+0xfac06aac>
 400aeec:	4448b03a 	or	r4,r8,r17
 400aef0:	20003e26 	beq	r4,zero,400afec <__adddf3+0x61c>
 400aef4:	00c6303a 	nor	r3,zero,r3
 400aef8:	18003a1e 	bne	r3,zero,400afe4 <__adddf3+0x614>
 400aefc:	3463c83a 	sub	r17,r6,r17
 400af00:	4a07c83a 	sub	r3,r9,r8
 400af04:	344d803a 	cmpltu	r6,r6,r17
 400af08:	1991c83a 	sub	r8,r3,r6
 400af0c:	1021883a 	mov	r16,r2
 400af10:	3825883a 	mov	r18,r7
 400af14:	003f0a06 	br	400ab40 <__ram_exceptions_end+0xfac069b4>
 400af18:	2023883a 	mov	r17,r4
 400af1c:	003f0d06 	br	400ab54 <__ram_exceptions_end+0xfac069c8>
 400af20:	0081ffc4 	movi	r2,2047
 400af24:	80bf3f1e 	bne	r16,r2,400ac24 <__ram_exceptions_end+0xfac06a98>
 400af28:	003ec806 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400af2c:	0005883a 	mov	r2,zero
 400af30:	003fb106 	br	400adf8 <__ram_exceptions_end+0xfac06c6c>
 400af34:	0007883a 	mov	r3,zero
 400af38:	003fbc06 	br	400ae2c <__ram_exceptions_end+0xfac06ca0>
 400af3c:	4444b03a 	or	r2,r8,r17
 400af40:	8000871e 	bne	r16,zero,400b160 <__adddf3+0x790>
 400af44:	1000ba26 	beq	r2,zero,400b230 <__adddf3+0x860>
 400af48:	4984b03a 	or	r2,r9,r6
 400af4c:	103ebf26 	beq	r2,zero,400aa4c <__ram_exceptions_end+0xfac068c0>
 400af50:	8985883a 	add	r2,r17,r6
 400af54:	4247883a 	add	r3,r8,r9
 400af58:	1451803a 	cmpltu	r8,r2,r17
 400af5c:	40d1883a 	add	r8,r8,r3
 400af60:	40c0202c 	andhi	r3,r8,128
 400af64:	1023883a 	mov	r17,r2
 400af68:	183f1a26 	beq	r3,zero,400abd4 <__ram_exceptions_end+0xfac06a48>
 400af6c:	00bfe034 	movhi	r2,65408
 400af70:	10bfffc4 	addi	r2,r2,-1
 400af74:	2021883a 	mov	r16,r4
 400af78:	4090703a 	and	r8,r8,r2
 400af7c:	003eb306 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400af80:	4444b03a 	or	r2,r8,r17
 400af84:	8000291e 	bne	r16,zero,400b02c <__adddf3+0x65c>
 400af88:	10004b1e 	bne	r2,zero,400b0b8 <__adddf3+0x6e8>
 400af8c:	4990b03a 	or	r8,r9,r6
 400af90:	40008b26 	beq	r8,zero,400b1c0 <__adddf3+0x7f0>
 400af94:	4811883a 	mov	r8,r9
 400af98:	3023883a 	mov	r17,r6
 400af9c:	3825883a 	mov	r18,r7
 400afa0:	003eaa06 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400afa4:	1021883a 	mov	r16,r2
 400afa8:	0011883a 	mov	r8,zero
 400afac:	0005883a 	mov	r2,zero
 400afb0:	003f0f06 	br	400abf0 <__ram_exceptions_end+0xfac06a64>
 400afb4:	217ff804 	addi	r5,r4,-32
 400afb8:	00800804 	movi	r2,32
 400afbc:	494ad83a 	srl	r5,r9,r5
 400afc0:	20807d26 	beq	r4,r2,400b1b8 <__adddf3+0x7e8>
 400afc4:	00801004 	movi	r2,64
 400afc8:	1109c83a 	sub	r4,r2,r4
 400afcc:	4912983a 	sll	r9,r9,r4
 400afd0:	498cb03a 	or	r6,r9,r6
 400afd4:	300cc03a 	cmpne	r6,r6,zero
 400afd8:	298ab03a 	or	r5,r5,r6
 400afdc:	0013883a 	mov	r9,zero
 400afe0:	003f1506 	br	400ac38 <__ram_exceptions_end+0xfac06aac>
 400afe4:	0101ffc4 	movi	r4,2047
 400afe8:	113f9a1e 	bne	r2,r4,400ae54 <__ram_exceptions_end+0xfac06cc8>
 400afec:	4811883a 	mov	r8,r9
 400aff0:	3023883a 	mov	r17,r6
 400aff4:	1021883a 	mov	r16,r2
 400aff8:	3825883a 	mov	r18,r7
 400affc:	003e9306 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400b000:	8000161e 	bne	r16,zero,400b05c <__adddf3+0x68c>
 400b004:	444ab03a 	or	r5,r8,r17
 400b008:	28005126 	beq	r5,zero,400b150 <__adddf3+0x780>
 400b00c:	0108303a 	nor	r4,zero,r4
 400b010:	20004d1e 	bne	r4,zero,400b148 <__adddf3+0x778>
 400b014:	89a3883a 	add	r17,r17,r6
 400b018:	4253883a 	add	r9,r8,r9
 400b01c:	898d803a 	cmpltu	r6,r17,r6
 400b020:	3251883a 	add	r8,r6,r9
 400b024:	1021883a 	mov	r16,r2
 400b028:	003f0806 	br	400ac4c <__ram_exceptions_end+0xfac06ac0>
 400b02c:	1000301e 	bne	r2,zero,400b0f0 <__adddf3+0x720>
 400b030:	4984b03a 	or	r2,r9,r6
 400b034:	10007126 	beq	r2,zero,400b1fc <__adddf3+0x82c>
 400b038:	4811883a 	mov	r8,r9
 400b03c:	3023883a 	mov	r17,r6
 400b040:	3825883a 	mov	r18,r7
 400b044:	0401ffc4 	movi	r16,2047
 400b048:	003e8006 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400b04c:	4462b03a 	or	r17,r8,r17
 400b050:	8822c03a 	cmpne	r17,r17,zero
 400b054:	0007883a 	mov	r3,zero
 400b058:	003f8b06 	br	400ae88 <__ram_exceptions_end+0xfac06cfc>
 400b05c:	0141ffc4 	movi	r5,2047
 400b060:	11403b26 	beq	r2,r5,400b150 <__adddf3+0x780>
 400b064:	0109c83a 	sub	r4,zero,r4
 400b068:	42002034 	orhi	r8,r8,128
 400b06c:	01400e04 	movi	r5,56
 400b070:	29006716 	blt	r5,r4,400b210 <__adddf3+0x840>
 400b074:	014007c4 	movi	r5,31
 400b078:	29007016 	blt	r5,r4,400b23c <__adddf3+0x86c>
 400b07c:	01400804 	movi	r5,32
 400b080:	290bc83a 	sub	r5,r5,r4
 400b084:	4154983a 	sll	r10,r8,r5
 400b088:	890ed83a 	srl	r7,r17,r4
 400b08c:	894a983a 	sll	r5,r17,r5
 400b090:	4108d83a 	srl	r4,r8,r4
 400b094:	51e2b03a 	or	r17,r10,r7
 400b098:	280ac03a 	cmpne	r5,r5,zero
 400b09c:	8962b03a 	or	r17,r17,r5
 400b0a0:	89a3883a 	add	r17,r17,r6
 400b0a4:	2253883a 	add	r9,r4,r9
 400b0a8:	898d803a 	cmpltu	r6,r17,r6
 400b0ac:	3251883a 	add	r8,r6,r9
 400b0b0:	1021883a 	mov	r16,r2
 400b0b4:	003ee506 	br	400ac4c <__ram_exceptions_end+0xfac06ac0>
 400b0b8:	4984b03a 	or	r2,r9,r6
 400b0bc:	103e6326 	beq	r2,zero,400aa4c <__ram_exceptions_end+0xfac068c0>
 400b0c0:	8987c83a 	sub	r3,r17,r6
 400b0c4:	88c9803a 	cmpltu	r4,r17,r3
 400b0c8:	4245c83a 	sub	r2,r8,r9
 400b0cc:	1105c83a 	sub	r2,r2,r4
 400b0d0:	1100202c 	andhi	r4,r2,128
 400b0d4:	203ebb26 	beq	r4,zero,400abc4 <__ram_exceptions_end+0xfac06a38>
 400b0d8:	3463c83a 	sub	r17,r6,r17
 400b0dc:	4a07c83a 	sub	r3,r9,r8
 400b0e0:	344d803a 	cmpltu	r6,r6,r17
 400b0e4:	1991c83a 	sub	r8,r3,r6
 400b0e8:	3825883a 	mov	r18,r7
 400b0ec:	003e5706 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400b0f0:	4984b03a 	or	r2,r9,r6
 400b0f4:	10002e26 	beq	r2,zero,400b1b0 <__adddf3+0x7e0>
 400b0f8:	4004d0fa 	srli	r2,r8,3
 400b0fc:	8822d0fa 	srli	r17,r17,3
 400b100:	4010977a 	slli	r8,r8,29
 400b104:	10c0022c 	andhi	r3,r2,8
 400b108:	4462b03a 	or	r17,r8,r17
 400b10c:	18000826 	beq	r3,zero,400b130 <__adddf3+0x760>
 400b110:	4808d0fa 	srli	r4,r9,3
 400b114:	20c0022c 	andhi	r3,r4,8
 400b118:	1800051e 	bne	r3,zero,400b130 <__adddf3+0x760>
 400b11c:	300cd0fa 	srli	r6,r6,3
 400b120:	4806977a 	slli	r3,r9,29
 400b124:	2005883a 	mov	r2,r4
 400b128:	3825883a 	mov	r18,r7
 400b12c:	19a2b03a 	or	r17,r3,r6
 400b130:	8810d77a 	srli	r8,r17,29
 400b134:	100490fa 	slli	r2,r2,3
 400b138:	882290fa 	slli	r17,r17,3
 400b13c:	0401ffc4 	movi	r16,2047
 400b140:	4090b03a 	or	r8,r8,r2
 400b144:	003e4106 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400b148:	0141ffc4 	movi	r5,2047
 400b14c:	117fc71e 	bne	r2,r5,400b06c <__ram_exceptions_end+0xfac06ee0>
 400b150:	4811883a 	mov	r8,r9
 400b154:	3023883a 	mov	r17,r6
 400b158:	1021883a 	mov	r16,r2
 400b15c:	003e3b06 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400b160:	10002f26 	beq	r2,zero,400b220 <__adddf3+0x850>
 400b164:	4984b03a 	or	r2,r9,r6
 400b168:	10001126 	beq	r2,zero,400b1b0 <__adddf3+0x7e0>
 400b16c:	4004d0fa 	srli	r2,r8,3
 400b170:	8822d0fa 	srli	r17,r17,3
 400b174:	4010977a 	slli	r8,r8,29
 400b178:	10c0022c 	andhi	r3,r2,8
 400b17c:	4462b03a 	or	r17,r8,r17
 400b180:	183feb26 	beq	r3,zero,400b130 <__ram_exceptions_end+0xfac06fa4>
 400b184:	4808d0fa 	srli	r4,r9,3
 400b188:	20c0022c 	andhi	r3,r4,8
 400b18c:	183fe81e 	bne	r3,zero,400b130 <__ram_exceptions_end+0xfac06fa4>
 400b190:	300cd0fa 	srli	r6,r6,3
 400b194:	4806977a 	slli	r3,r9,29
 400b198:	2005883a 	mov	r2,r4
 400b19c:	19a2b03a 	or	r17,r3,r6
 400b1a0:	003fe306 	br	400b130 <__ram_exceptions_end+0xfac06fa4>
 400b1a4:	0011883a 	mov	r8,zero
 400b1a8:	0005883a 	mov	r2,zero
 400b1ac:	003e3f06 	br	400aaac <__ram_exceptions_end+0xfac06920>
 400b1b0:	0401ffc4 	movi	r16,2047
 400b1b4:	003e2506 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400b1b8:	0013883a 	mov	r9,zero
 400b1bc:	003f8406 	br	400afd0 <__ram_exceptions_end+0xfac06e44>
 400b1c0:	0005883a 	mov	r2,zero
 400b1c4:	0007883a 	mov	r3,zero
 400b1c8:	003e8906 	br	400abf0 <__ram_exceptions_end+0xfac06a64>
 400b1cc:	197ff804 	addi	r5,r3,-32
 400b1d0:	01000804 	movi	r4,32
 400b1d4:	414ad83a 	srl	r5,r8,r5
 400b1d8:	19002426 	beq	r3,r4,400b26c <__adddf3+0x89c>
 400b1dc:	01001004 	movi	r4,64
 400b1e0:	20c7c83a 	sub	r3,r4,r3
 400b1e4:	40c6983a 	sll	r3,r8,r3
 400b1e8:	1c46b03a 	or	r3,r3,r17
 400b1ec:	1806c03a 	cmpne	r3,r3,zero
 400b1f0:	28e2b03a 	or	r17,r5,r3
 400b1f4:	0007883a 	mov	r3,zero
 400b1f8:	003f2306 	br	400ae88 <__ram_exceptions_end+0xfac06cfc>
 400b1fc:	0007883a 	mov	r3,zero
 400b200:	5811883a 	mov	r8,r11
 400b204:	00bfffc4 	movi	r2,-1
 400b208:	0401ffc4 	movi	r16,2047
 400b20c:	003e7806 	br	400abf0 <__ram_exceptions_end+0xfac06a64>
 400b210:	4462b03a 	or	r17,r8,r17
 400b214:	8822c03a 	cmpne	r17,r17,zero
 400b218:	0009883a 	mov	r4,zero
 400b21c:	003fa006 	br	400b0a0 <__ram_exceptions_end+0xfac06f14>
 400b220:	4811883a 	mov	r8,r9
 400b224:	3023883a 	mov	r17,r6
 400b228:	0401ffc4 	movi	r16,2047
 400b22c:	003e0706 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400b230:	4811883a 	mov	r8,r9
 400b234:	3023883a 	mov	r17,r6
 400b238:	003e0406 	br	400aa4c <__ram_exceptions_end+0xfac068c0>
 400b23c:	21fff804 	addi	r7,r4,-32
 400b240:	01400804 	movi	r5,32
 400b244:	41ced83a 	srl	r7,r8,r7
 400b248:	21400a26 	beq	r4,r5,400b274 <__adddf3+0x8a4>
 400b24c:	01401004 	movi	r5,64
 400b250:	2909c83a 	sub	r4,r5,r4
 400b254:	4108983a 	sll	r4,r8,r4
 400b258:	2448b03a 	or	r4,r4,r17
 400b25c:	2008c03a 	cmpne	r4,r4,zero
 400b260:	3922b03a 	or	r17,r7,r4
 400b264:	0009883a 	mov	r4,zero
 400b268:	003f8d06 	br	400b0a0 <__ram_exceptions_end+0xfac06f14>
 400b26c:	0007883a 	mov	r3,zero
 400b270:	003fdd06 	br	400b1e8 <__ram_exceptions_end+0xfac0705c>
 400b274:	0009883a 	mov	r4,zero
 400b278:	003ff706 	br	400b258 <__ram_exceptions_end+0xfac070cc>

0400b27c <__divdf3>:
 400b27c:	defff204 	addi	sp,sp,-56
 400b280:	dd400915 	stw	r21,36(sp)
 400b284:	282ad53a 	srli	r21,r5,20
 400b288:	dd000815 	stw	r20,32(sp)
 400b28c:	2828d7fa 	srli	r20,r5,31
 400b290:	dc000415 	stw	r16,16(sp)
 400b294:	04000434 	movhi	r16,16
 400b298:	df000c15 	stw	fp,48(sp)
 400b29c:	843fffc4 	addi	r16,r16,-1
 400b2a0:	dfc00d15 	stw	ra,52(sp)
 400b2a4:	ddc00b15 	stw	r23,44(sp)
 400b2a8:	dd800a15 	stw	r22,40(sp)
 400b2ac:	dcc00715 	stw	r19,28(sp)
 400b2b0:	dc800615 	stw	r18,24(sp)
 400b2b4:	dc400515 	stw	r17,20(sp)
 400b2b8:	ad41ffcc 	andi	r21,r21,2047
 400b2bc:	2c20703a 	and	r16,r5,r16
 400b2c0:	a7003fcc 	andi	fp,r20,255
 400b2c4:	a8006126 	beq	r21,zero,400b44c <__divdf3+0x1d0>
 400b2c8:	0081ffc4 	movi	r2,2047
 400b2cc:	2025883a 	mov	r18,r4
 400b2d0:	a8803726 	beq	r21,r2,400b3b0 <__divdf3+0x134>
 400b2d4:	80800434 	orhi	r2,r16,16
 400b2d8:	100490fa 	slli	r2,r2,3
 400b2dc:	2020d77a 	srli	r16,r4,29
 400b2e0:	202490fa 	slli	r18,r4,3
 400b2e4:	ad7f0044 	addi	r21,r21,-1023
 400b2e8:	80a0b03a 	or	r16,r16,r2
 400b2ec:	0027883a 	mov	r19,zero
 400b2f0:	0013883a 	mov	r9,zero
 400b2f4:	3804d53a 	srli	r2,r7,20
 400b2f8:	382cd7fa 	srli	r22,r7,31
 400b2fc:	04400434 	movhi	r17,16
 400b300:	8c7fffc4 	addi	r17,r17,-1
 400b304:	1081ffcc 	andi	r2,r2,2047
 400b308:	3011883a 	mov	r8,r6
 400b30c:	3c62703a 	and	r17,r7,r17
 400b310:	b5c03fcc 	andi	r23,r22,255
 400b314:	10006c26 	beq	r2,zero,400b4c8 <__divdf3+0x24c>
 400b318:	00c1ffc4 	movi	r3,2047
 400b31c:	10c06426 	beq	r2,r3,400b4b0 <__divdf3+0x234>
 400b320:	88c00434 	orhi	r3,r17,16
 400b324:	180690fa 	slli	r3,r3,3
 400b328:	3022d77a 	srli	r17,r6,29
 400b32c:	301090fa 	slli	r8,r6,3
 400b330:	10bf0044 	addi	r2,r2,-1023
 400b334:	88e2b03a 	or	r17,r17,r3
 400b338:	000f883a 	mov	r7,zero
 400b33c:	a58cf03a 	xor	r6,r20,r22
 400b340:	3cc8b03a 	or	r4,r7,r19
 400b344:	a8abc83a 	sub	r21,r21,r2
 400b348:	008003c4 	movi	r2,15
 400b34c:	3007883a 	mov	r3,r6
 400b350:	34c03fcc 	andi	r19,r6,255
 400b354:	11009036 	bltu	r2,r4,400b598 <__divdf3+0x31c>
 400b358:	200890ba 	slli	r4,r4,2
 400b35c:	00810074 	movhi	r2,1025
 400b360:	10acdc04 	addi	r2,r2,-19600
 400b364:	2089883a 	add	r4,r4,r2
 400b368:	20800017 	ldw	r2,0(r4)
 400b36c:	1000683a 	jmp	r2
 400b370:	0400b598 	cmpnei	r16,zero,726
 400b374:	0400b3e8 	cmpgeui	r16,zero,719
 400b378:	0400b588 	cmpgei	r16,zero,726
 400b37c:	0400b3dc 	xori	r16,zero,719
 400b380:	0400b588 	cmpgei	r16,zero,726
 400b384:	0400b55c 	xori	r16,zero,725
 400b388:	0400b588 	cmpgei	r16,zero,726
 400b38c:	0400b3dc 	xori	r16,zero,719
 400b390:	0400b3e8 	cmpgeui	r16,zero,719
 400b394:	0400b3e8 	cmpgeui	r16,zero,719
 400b398:	0400b55c 	xori	r16,zero,725
 400b39c:	0400b3dc 	xori	r16,zero,719
 400b3a0:	0400b3cc 	andi	r16,zero,719
 400b3a4:	0400b3cc 	andi	r16,zero,719
 400b3a8:	0400b3cc 	andi	r16,zero,719
 400b3ac:	0400b87c 	xorhi	r16,zero,737
 400b3b0:	2404b03a 	or	r2,r4,r16
 400b3b4:	1000661e 	bne	r2,zero,400b550 <__divdf3+0x2d4>
 400b3b8:	04c00204 	movi	r19,8
 400b3bc:	0021883a 	mov	r16,zero
 400b3c0:	0025883a 	mov	r18,zero
 400b3c4:	02400084 	movi	r9,2
 400b3c8:	003fca06 	br	400b2f4 <__ram_exceptions_end+0xfac07168>
 400b3cc:	8023883a 	mov	r17,r16
 400b3d0:	9011883a 	mov	r8,r18
 400b3d4:	e02f883a 	mov	r23,fp
 400b3d8:	480f883a 	mov	r7,r9
 400b3dc:	00800084 	movi	r2,2
 400b3e0:	3881311e 	bne	r7,r2,400b8a8 <__divdf3+0x62c>
 400b3e4:	b827883a 	mov	r19,r23
 400b3e8:	98c0004c 	andi	r3,r19,1
 400b3ec:	0081ffc4 	movi	r2,2047
 400b3f0:	000b883a 	mov	r5,zero
 400b3f4:	0025883a 	mov	r18,zero
 400b3f8:	1004953a 	slli	r2,r2,20
 400b3fc:	18c03fcc 	andi	r3,r3,255
 400b400:	04400434 	movhi	r17,16
 400b404:	8c7fffc4 	addi	r17,r17,-1
 400b408:	180697fa 	slli	r3,r3,31
 400b40c:	2c4a703a 	and	r5,r5,r17
 400b410:	288ab03a 	or	r5,r5,r2
 400b414:	28c6b03a 	or	r3,r5,r3
 400b418:	9005883a 	mov	r2,r18
 400b41c:	dfc00d17 	ldw	ra,52(sp)
 400b420:	df000c17 	ldw	fp,48(sp)
 400b424:	ddc00b17 	ldw	r23,44(sp)
 400b428:	dd800a17 	ldw	r22,40(sp)
 400b42c:	dd400917 	ldw	r21,36(sp)
 400b430:	dd000817 	ldw	r20,32(sp)
 400b434:	dcc00717 	ldw	r19,28(sp)
 400b438:	dc800617 	ldw	r18,24(sp)
 400b43c:	dc400517 	ldw	r17,20(sp)
 400b440:	dc000417 	ldw	r16,16(sp)
 400b444:	dec00e04 	addi	sp,sp,56
 400b448:	f800283a 	ret
 400b44c:	2404b03a 	or	r2,r4,r16
 400b450:	2027883a 	mov	r19,r4
 400b454:	10003926 	beq	r2,zero,400b53c <__divdf3+0x2c0>
 400b458:	80012e26 	beq	r16,zero,400b914 <__divdf3+0x698>
 400b45c:	8009883a 	mov	r4,r16
 400b460:	d9800315 	stw	r6,12(sp)
 400b464:	d9c00215 	stw	r7,8(sp)
 400b468:	400cfd40 	call	400cfd4 <__clzsi2>
 400b46c:	d9800317 	ldw	r6,12(sp)
 400b470:	d9c00217 	ldw	r7,8(sp)
 400b474:	113ffd44 	addi	r4,r2,-11
 400b478:	00c00704 	movi	r3,28
 400b47c:	19012116 	blt	r3,r4,400b904 <__divdf3+0x688>
 400b480:	00c00744 	movi	r3,29
 400b484:	147ffe04 	addi	r17,r2,-8
 400b488:	1907c83a 	sub	r3,r3,r4
 400b48c:	8460983a 	sll	r16,r16,r17
 400b490:	98c6d83a 	srl	r3,r19,r3
 400b494:	9c64983a 	sll	r18,r19,r17
 400b498:	1c20b03a 	or	r16,r3,r16
 400b49c:	1080fcc4 	addi	r2,r2,1011
 400b4a0:	00abc83a 	sub	r21,zero,r2
 400b4a4:	0027883a 	mov	r19,zero
 400b4a8:	0013883a 	mov	r9,zero
 400b4ac:	003f9106 	br	400b2f4 <__ram_exceptions_end+0xfac07168>
 400b4b0:	3446b03a 	or	r3,r6,r17
 400b4b4:	18001f1e 	bne	r3,zero,400b534 <__divdf3+0x2b8>
 400b4b8:	0023883a 	mov	r17,zero
 400b4bc:	0011883a 	mov	r8,zero
 400b4c0:	01c00084 	movi	r7,2
 400b4c4:	003f9d06 	br	400b33c <__ram_exceptions_end+0xfac071b0>
 400b4c8:	3446b03a 	or	r3,r6,r17
 400b4cc:	18001526 	beq	r3,zero,400b524 <__divdf3+0x2a8>
 400b4d0:	88011b26 	beq	r17,zero,400b940 <__divdf3+0x6c4>
 400b4d4:	8809883a 	mov	r4,r17
 400b4d8:	d9800315 	stw	r6,12(sp)
 400b4dc:	da400115 	stw	r9,4(sp)
 400b4e0:	400cfd40 	call	400cfd4 <__clzsi2>
 400b4e4:	d9800317 	ldw	r6,12(sp)
 400b4e8:	da400117 	ldw	r9,4(sp)
 400b4ec:	113ffd44 	addi	r4,r2,-11
 400b4f0:	00c00704 	movi	r3,28
 400b4f4:	19010e16 	blt	r3,r4,400b930 <__divdf3+0x6b4>
 400b4f8:	00c00744 	movi	r3,29
 400b4fc:	123ffe04 	addi	r8,r2,-8
 400b500:	1907c83a 	sub	r3,r3,r4
 400b504:	8a22983a 	sll	r17,r17,r8
 400b508:	30c6d83a 	srl	r3,r6,r3
 400b50c:	3210983a 	sll	r8,r6,r8
 400b510:	1c62b03a 	or	r17,r3,r17
 400b514:	1080fcc4 	addi	r2,r2,1011
 400b518:	0085c83a 	sub	r2,zero,r2
 400b51c:	000f883a 	mov	r7,zero
 400b520:	003f8606 	br	400b33c <__ram_exceptions_end+0xfac071b0>
 400b524:	0023883a 	mov	r17,zero
 400b528:	0011883a 	mov	r8,zero
 400b52c:	01c00044 	movi	r7,1
 400b530:	003f8206 	br	400b33c <__ram_exceptions_end+0xfac071b0>
 400b534:	01c000c4 	movi	r7,3
 400b538:	003f8006 	br	400b33c <__ram_exceptions_end+0xfac071b0>
 400b53c:	04c00104 	movi	r19,4
 400b540:	0021883a 	mov	r16,zero
 400b544:	0025883a 	mov	r18,zero
 400b548:	02400044 	movi	r9,1
 400b54c:	003f6906 	br	400b2f4 <__ram_exceptions_end+0xfac07168>
 400b550:	04c00304 	movi	r19,12
 400b554:	024000c4 	movi	r9,3
 400b558:	003f6606 	br	400b2f4 <__ram_exceptions_end+0xfac07168>
 400b55c:	01400434 	movhi	r5,16
 400b560:	0007883a 	mov	r3,zero
 400b564:	297fffc4 	addi	r5,r5,-1
 400b568:	04bfffc4 	movi	r18,-1
 400b56c:	0081ffc4 	movi	r2,2047
 400b570:	003fa106 	br	400b3f8 <__ram_exceptions_end+0xfac0726c>
 400b574:	00c00044 	movi	r3,1
 400b578:	1887c83a 	sub	r3,r3,r2
 400b57c:	01000e04 	movi	r4,56
 400b580:	20c1210e 	bge	r4,r3,400ba08 <__divdf3+0x78c>
 400b584:	98c0004c 	andi	r3,r19,1
 400b588:	0005883a 	mov	r2,zero
 400b58c:	000b883a 	mov	r5,zero
 400b590:	0025883a 	mov	r18,zero
 400b594:	003f9806 	br	400b3f8 <__ram_exceptions_end+0xfac0726c>
 400b598:	8c00fd36 	bltu	r17,r16,400b990 <__divdf3+0x714>
 400b59c:	8440fb26 	beq	r16,r17,400b98c <__divdf3+0x710>
 400b5a0:	8007883a 	mov	r3,r16
 400b5a4:	ad7fffc4 	addi	r21,r21,-1
 400b5a8:	0021883a 	mov	r16,zero
 400b5ac:	4004d63a 	srli	r2,r8,24
 400b5b0:	8822923a 	slli	r17,r17,8
 400b5b4:	1809883a 	mov	r4,r3
 400b5b8:	402c923a 	slli	r22,r8,8
 400b5bc:	88b8b03a 	or	fp,r17,r2
 400b5c0:	e028d43a 	srli	r20,fp,16
 400b5c4:	d8c00015 	stw	r3,0(sp)
 400b5c8:	e5ffffcc 	andi	r23,fp,65535
 400b5cc:	a00b883a 	mov	r5,r20
 400b5d0:	40008e40 	call	40008e4 <__udivsi3>
 400b5d4:	d8c00017 	ldw	r3,0(sp)
 400b5d8:	a00b883a 	mov	r5,r20
 400b5dc:	d8800315 	stw	r2,12(sp)
 400b5e0:	1809883a 	mov	r4,r3
 400b5e4:	40009480 	call	4000948 <__umodsi3>
 400b5e8:	d9800317 	ldw	r6,12(sp)
 400b5ec:	1006943a 	slli	r3,r2,16
 400b5f0:	9004d43a 	srli	r2,r18,16
 400b5f4:	b9a3383a 	mul	r17,r23,r6
 400b5f8:	10c4b03a 	or	r2,r2,r3
 400b5fc:	1440062e 	bgeu	r2,r17,400b618 <__divdf3+0x39c>
 400b600:	1705883a 	add	r2,r2,fp
 400b604:	30ffffc4 	addi	r3,r6,-1
 400b608:	1700ee36 	bltu	r2,fp,400b9c4 <__divdf3+0x748>
 400b60c:	1440ed2e 	bgeu	r2,r17,400b9c4 <__divdf3+0x748>
 400b610:	31bfff84 	addi	r6,r6,-2
 400b614:	1705883a 	add	r2,r2,fp
 400b618:	1463c83a 	sub	r17,r2,r17
 400b61c:	a00b883a 	mov	r5,r20
 400b620:	8809883a 	mov	r4,r17
 400b624:	d9800315 	stw	r6,12(sp)
 400b628:	40008e40 	call	40008e4 <__udivsi3>
 400b62c:	a00b883a 	mov	r5,r20
 400b630:	8809883a 	mov	r4,r17
 400b634:	d8800215 	stw	r2,8(sp)
 400b638:	40009480 	call	4000948 <__umodsi3>
 400b63c:	d9c00217 	ldw	r7,8(sp)
 400b640:	1004943a 	slli	r2,r2,16
 400b644:	94bfffcc 	andi	r18,r18,65535
 400b648:	b9d1383a 	mul	r8,r23,r7
 400b64c:	90a4b03a 	or	r18,r18,r2
 400b650:	d9800317 	ldw	r6,12(sp)
 400b654:	9200062e 	bgeu	r18,r8,400b670 <__divdf3+0x3f4>
 400b658:	9725883a 	add	r18,r18,fp
 400b65c:	38bfffc4 	addi	r2,r7,-1
 400b660:	9700d636 	bltu	r18,fp,400b9bc <__divdf3+0x740>
 400b664:	9200d52e 	bgeu	r18,r8,400b9bc <__divdf3+0x740>
 400b668:	39ffff84 	addi	r7,r7,-2
 400b66c:	9725883a 	add	r18,r18,fp
 400b670:	3004943a 	slli	r2,r6,16
 400b674:	b012d43a 	srli	r9,r22,16
 400b678:	b1bfffcc 	andi	r6,r22,65535
 400b67c:	11e2b03a 	or	r17,r2,r7
 400b680:	8806d43a 	srli	r3,r17,16
 400b684:	893fffcc 	andi	r4,r17,65535
 400b688:	218b383a 	mul	r5,r4,r6
 400b68c:	30c5383a 	mul	r2,r6,r3
 400b690:	2249383a 	mul	r4,r4,r9
 400b694:	280ed43a 	srli	r7,r5,16
 400b698:	9225c83a 	sub	r18,r18,r8
 400b69c:	2089883a 	add	r4,r4,r2
 400b6a0:	3909883a 	add	r4,r7,r4
 400b6a4:	1a47383a 	mul	r3,r3,r9
 400b6a8:	2080022e 	bgeu	r4,r2,400b6b4 <__divdf3+0x438>
 400b6ac:	00800074 	movhi	r2,1
 400b6b0:	1887883a 	add	r3,r3,r2
 400b6b4:	2004d43a 	srli	r2,r4,16
 400b6b8:	2008943a 	slli	r4,r4,16
 400b6bc:	297fffcc 	andi	r5,r5,65535
 400b6c0:	10c7883a 	add	r3,r2,r3
 400b6c4:	2149883a 	add	r4,r4,r5
 400b6c8:	90c0a536 	bltu	r18,r3,400b960 <__divdf3+0x6e4>
 400b6cc:	90c0bf26 	beq	r18,r3,400b9cc <__divdf3+0x750>
 400b6d0:	90c7c83a 	sub	r3,r18,r3
 400b6d4:	810fc83a 	sub	r7,r16,r4
 400b6d8:	81e5803a 	cmpltu	r18,r16,r7
 400b6dc:	1ca5c83a 	sub	r18,r3,r18
 400b6e0:	e480c126 	beq	fp,r18,400b9e8 <__divdf3+0x76c>
 400b6e4:	a00b883a 	mov	r5,r20
 400b6e8:	9009883a 	mov	r4,r18
 400b6ec:	d9800315 	stw	r6,12(sp)
 400b6f0:	d9c00215 	stw	r7,8(sp)
 400b6f4:	da400115 	stw	r9,4(sp)
 400b6f8:	40008e40 	call	40008e4 <__udivsi3>
 400b6fc:	a00b883a 	mov	r5,r20
 400b700:	9009883a 	mov	r4,r18
 400b704:	d8800015 	stw	r2,0(sp)
 400b708:	40009480 	call	4000948 <__umodsi3>
 400b70c:	d9c00217 	ldw	r7,8(sp)
 400b710:	da000017 	ldw	r8,0(sp)
 400b714:	1006943a 	slli	r3,r2,16
 400b718:	3804d43a 	srli	r2,r7,16
 400b71c:	ba21383a 	mul	r16,r23,r8
 400b720:	d9800317 	ldw	r6,12(sp)
 400b724:	10c4b03a 	or	r2,r2,r3
 400b728:	da400117 	ldw	r9,4(sp)
 400b72c:	1400062e 	bgeu	r2,r16,400b748 <__divdf3+0x4cc>
 400b730:	1705883a 	add	r2,r2,fp
 400b734:	40ffffc4 	addi	r3,r8,-1
 400b738:	1700ad36 	bltu	r2,fp,400b9f0 <__divdf3+0x774>
 400b73c:	1400ac2e 	bgeu	r2,r16,400b9f0 <__divdf3+0x774>
 400b740:	423fff84 	addi	r8,r8,-2
 400b744:	1705883a 	add	r2,r2,fp
 400b748:	1421c83a 	sub	r16,r2,r16
 400b74c:	a00b883a 	mov	r5,r20
 400b750:	8009883a 	mov	r4,r16
 400b754:	d9800315 	stw	r6,12(sp)
 400b758:	d9c00215 	stw	r7,8(sp)
 400b75c:	da000015 	stw	r8,0(sp)
 400b760:	da400115 	stw	r9,4(sp)
 400b764:	40008e40 	call	40008e4 <__udivsi3>
 400b768:	8009883a 	mov	r4,r16
 400b76c:	a00b883a 	mov	r5,r20
 400b770:	1025883a 	mov	r18,r2
 400b774:	40009480 	call	4000948 <__umodsi3>
 400b778:	d9c00217 	ldw	r7,8(sp)
 400b77c:	1004943a 	slli	r2,r2,16
 400b780:	bcaf383a 	mul	r23,r23,r18
 400b784:	393fffcc 	andi	r4,r7,65535
 400b788:	2088b03a 	or	r4,r4,r2
 400b78c:	d9800317 	ldw	r6,12(sp)
 400b790:	da000017 	ldw	r8,0(sp)
 400b794:	da400117 	ldw	r9,4(sp)
 400b798:	25c0062e 	bgeu	r4,r23,400b7b4 <__divdf3+0x538>
 400b79c:	2709883a 	add	r4,r4,fp
 400b7a0:	90bfffc4 	addi	r2,r18,-1
 400b7a4:	27009436 	bltu	r4,fp,400b9f8 <__divdf3+0x77c>
 400b7a8:	25c0932e 	bgeu	r4,r23,400b9f8 <__divdf3+0x77c>
 400b7ac:	94bfff84 	addi	r18,r18,-2
 400b7b0:	2709883a 	add	r4,r4,fp
 400b7b4:	4004943a 	slli	r2,r8,16
 400b7b8:	25efc83a 	sub	r23,r4,r23
 400b7bc:	1490b03a 	or	r8,r2,r18
 400b7c0:	4008d43a 	srli	r4,r8,16
 400b7c4:	40ffffcc 	andi	r3,r8,65535
 400b7c8:	30c5383a 	mul	r2,r6,r3
 400b7cc:	1a47383a 	mul	r3,r3,r9
 400b7d0:	310d383a 	mul	r6,r6,r4
 400b7d4:	100ad43a 	srli	r5,r2,16
 400b7d8:	4913383a 	mul	r9,r9,r4
 400b7dc:	1987883a 	add	r3,r3,r6
 400b7e0:	28c7883a 	add	r3,r5,r3
 400b7e4:	1980022e 	bgeu	r3,r6,400b7f0 <__divdf3+0x574>
 400b7e8:	01000074 	movhi	r4,1
 400b7ec:	4913883a 	add	r9,r9,r4
 400b7f0:	1808d43a 	srli	r4,r3,16
 400b7f4:	1806943a 	slli	r3,r3,16
 400b7f8:	10bfffcc 	andi	r2,r2,65535
 400b7fc:	2253883a 	add	r9,r4,r9
 400b800:	1887883a 	add	r3,r3,r2
 400b804:	ba403836 	bltu	r23,r9,400b8e8 <__divdf3+0x66c>
 400b808:	ba403626 	beq	r23,r9,400b8e4 <__divdf3+0x668>
 400b80c:	42000054 	ori	r8,r8,1
 400b810:	a880ffc4 	addi	r2,r21,1023
 400b814:	00bf570e 	bge	zero,r2,400b574 <__ram_exceptions_end+0xfac073e8>
 400b818:	40c001cc 	andi	r3,r8,7
 400b81c:	18000726 	beq	r3,zero,400b83c <__divdf3+0x5c0>
 400b820:	40c003cc 	andi	r3,r8,15
 400b824:	01000104 	movi	r4,4
 400b828:	19000426 	beq	r3,r4,400b83c <__divdf3+0x5c0>
 400b82c:	4107883a 	add	r3,r8,r4
 400b830:	1a11803a 	cmpltu	r8,r3,r8
 400b834:	8a23883a 	add	r17,r17,r8
 400b838:	1811883a 	mov	r8,r3
 400b83c:	88c0402c 	andhi	r3,r17,256
 400b840:	18000426 	beq	r3,zero,400b854 <__divdf3+0x5d8>
 400b844:	00ffc034 	movhi	r3,65280
 400b848:	18ffffc4 	addi	r3,r3,-1
 400b84c:	a8810004 	addi	r2,r21,1024
 400b850:	88e2703a 	and	r17,r17,r3
 400b854:	00c1ff84 	movi	r3,2046
 400b858:	18bee316 	blt	r3,r2,400b3e8 <__ram_exceptions_end+0xfac0725c>
 400b85c:	8824977a 	slli	r18,r17,29
 400b860:	4010d0fa 	srli	r8,r8,3
 400b864:	8822927a 	slli	r17,r17,9
 400b868:	1081ffcc 	andi	r2,r2,2047
 400b86c:	9224b03a 	or	r18,r18,r8
 400b870:	880ad33a 	srli	r5,r17,12
 400b874:	98c0004c 	andi	r3,r19,1
 400b878:	003edf06 	br	400b3f8 <__ram_exceptions_end+0xfac0726c>
 400b87c:	8080022c 	andhi	r2,r16,8
 400b880:	10001226 	beq	r2,zero,400b8cc <__divdf3+0x650>
 400b884:	8880022c 	andhi	r2,r17,8
 400b888:	1000101e 	bne	r2,zero,400b8cc <__divdf3+0x650>
 400b88c:	00800434 	movhi	r2,16
 400b890:	89400234 	orhi	r5,r17,8
 400b894:	10bfffc4 	addi	r2,r2,-1
 400b898:	b007883a 	mov	r3,r22
 400b89c:	288a703a 	and	r5,r5,r2
 400b8a0:	4025883a 	mov	r18,r8
 400b8a4:	003f3106 	br	400b56c <__ram_exceptions_end+0xfac073e0>
 400b8a8:	008000c4 	movi	r2,3
 400b8ac:	3880a626 	beq	r7,r2,400bb48 <__divdf3+0x8cc>
 400b8b0:	00800044 	movi	r2,1
 400b8b4:	3880521e 	bne	r7,r2,400ba00 <__divdf3+0x784>
 400b8b8:	b807883a 	mov	r3,r23
 400b8bc:	0005883a 	mov	r2,zero
 400b8c0:	000b883a 	mov	r5,zero
 400b8c4:	0025883a 	mov	r18,zero
 400b8c8:	003ecb06 	br	400b3f8 <__ram_exceptions_end+0xfac0726c>
 400b8cc:	00800434 	movhi	r2,16
 400b8d0:	81400234 	orhi	r5,r16,8
 400b8d4:	10bfffc4 	addi	r2,r2,-1
 400b8d8:	a007883a 	mov	r3,r20
 400b8dc:	288a703a 	and	r5,r5,r2
 400b8e0:	003f2206 	br	400b56c <__ram_exceptions_end+0xfac073e0>
 400b8e4:	183fca26 	beq	r3,zero,400b810 <__ram_exceptions_end+0xfac07684>
 400b8e8:	e5ef883a 	add	r23,fp,r23
 400b8ec:	40bfffc4 	addi	r2,r8,-1
 400b8f0:	bf00392e 	bgeu	r23,fp,400b9d8 <__divdf3+0x75c>
 400b8f4:	1011883a 	mov	r8,r2
 400b8f8:	ba7fc41e 	bne	r23,r9,400b80c <__ram_exceptions_end+0xfac07680>
 400b8fc:	b0ffc31e 	bne	r22,r3,400b80c <__ram_exceptions_end+0xfac07680>
 400b900:	003fc306 	br	400b810 <__ram_exceptions_end+0xfac07684>
 400b904:	143ff604 	addi	r16,r2,-40
 400b908:	9c20983a 	sll	r16,r19,r16
 400b90c:	0025883a 	mov	r18,zero
 400b910:	003ee206 	br	400b49c <__ram_exceptions_end+0xfac07310>
 400b914:	d9800315 	stw	r6,12(sp)
 400b918:	d9c00215 	stw	r7,8(sp)
 400b91c:	400cfd40 	call	400cfd4 <__clzsi2>
 400b920:	10800804 	addi	r2,r2,32
 400b924:	d9c00217 	ldw	r7,8(sp)
 400b928:	d9800317 	ldw	r6,12(sp)
 400b92c:	003ed106 	br	400b474 <__ram_exceptions_end+0xfac072e8>
 400b930:	147ff604 	addi	r17,r2,-40
 400b934:	3462983a 	sll	r17,r6,r17
 400b938:	0011883a 	mov	r8,zero
 400b93c:	003ef506 	br	400b514 <__ram_exceptions_end+0xfac07388>
 400b940:	3009883a 	mov	r4,r6
 400b944:	d9800315 	stw	r6,12(sp)
 400b948:	da400115 	stw	r9,4(sp)
 400b94c:	400cfd40 	call	400cfd4 <__clzsi2>
 400b950:	10800804 	addi	r2,r2,32
 400b954:	da400117 	ldw	r9,4(sp)
 400b958:	d9800317 	ldw	r6,12(sp)
 400b95c:	003ee306 	br	400b4ec <__ram_exceptions_end+0xfac07360>
 400b960:	85a1883a 	add	r16,r16,r22
 400b964:	8585803a 	cmpltu	r2,r16,r22
 400b968:	1705883a 	add	r2,r2,fp
 400b96c:	14a5883a 	add	r18,r2,r18
 400b970:	88bfffc4 	addi	r2,r17,-1
 400b974:	e4800c2e 	bgeu	fp,r18,400b9a8 <__divdf3+0x72c>
 400b978:	90c03e36 	bltu	r18,r3,400ba74 <__divdf3+0x7f8>
 400b97c:	1c806926 	beq	r3,r18,400bb24 <__divdf3+0x8a8>
 400b980:	90c7c83a 	sub	r3,r18,r3
 400b984:	1023883a 	mov	r17,r2
 400b988:	003f5206 	br	400b6d4 <__ram_exceptions_end+0xfac07548>
 400b98c:	923f0436 	bltu	r18,r8,400b5a0 <__ram_exceptions_end+0xfac07414>
 400b990:	800897fa 	slli	r4,r16,31
 400b994:	9004d07a 	srli	r2,r18,1
 400b998:	8006d07a 	srli	r3,r16,1
 400b99c:	902097fa 	slli	r16,r18,31
 400b9a0:	20a4b03a 	or	r18,r4,r2
 400b9a4:	003f0106 	br	400b5ac <__ram_exceptions_end+0xfac07420>
 400b9a8:	e4bff51e 	bne	fp,r18,400b980 <__ram_exceptions_end+0xfac077f4>
 400b9ac:	85bff22e 	bgeu	r16,r22,400b978 <__ram_exceptions_end+0xfac077ec>
 400b9b0:	e0c7c83a 	sub	r3,fp,r3
 400b9b4:	1023883a 	mov	r17,r2
 400b9b8:	003f4606 	br	400b6d4 <__ram_exceptions_end+0xfac07548>
 400b9bc:	100f883a 	mov	r7,r2
 400b9c0:	003f2b06 	br	400b670 <__ram_exceptions_end+0xfac074e4>
 400b9c4:	180d883a 	mov	r6,r3
 400b9c8:	003f1306 	br	400b618 <__ram_exceptions_end+0xfac0748c>
 400b9cc:	813fe436 	bltu	r16,r4,400b960 <__ram_exceptions_end+0xfac077d4>
 400b9d0:	0007883a 	mov	r3,zero
 400b9d4:	003f3f06 	br	400b6d4 <__ram_exceptions_end+0xfac07548>
 400b9d8:	ba402c36 	bltu	r23,r9,400ba8c <__divdf3+0x810>
 400b9dc:	4dc05426 	beq	r9,r23,400bb30 <__divdf3+0x8b4>
 400b9e0:	1011883a 	mov	r8,r2
 400b9e4:	003f8906 	br	400b80c <__ram_exceptions_end+0xfac07680>
 400b9e8:	023fffc4 	movi	r8,-1
 400b9ec:	003f8806 	br	400b810 <__ram_exceptions_end+0xfac07684>
 400b9f0:	1811883a 	mov	r8,r3
 400b9f4:	003f5406 	br	400b748 <__ram_exceptions_end+0xfac075bc>
 400b9f8:	1025883a 	mov	r18,r2
 400b9fc:	003f6d06 	br	400b7b4 <__ram_exceptions_end+0xfac07628>
 400ba00:	b827883a 	mov	r19,r23
 400ba04:	003f8206 	br	400b810 <__ram_exceptions_end+0xfac07684>
 400ba08:	010007c4 	movi	r4,31
 400ba0c:	20c02616 	blt	r4,r3,400baa8 <__divdf3+0x82c>
 400ba10:	00800804 	movi	r2,32
 400ba14:	10c5c83a 	sub	r2,r2,r3
 400ba18:	888a983a 	sll	r5,r17,r2
 400ba1c:	40c8d83a 	srl	r4,r8,r3
 400ba20:	4084983a 	sll	r2,r8,r2
 400ba24:	88e2d83a 	srl	r17,r17,r3
 400ba28:	2906b03a 	or	r3,r5,r4
 400ba2c:	1004c03a 	cmpne	r2,r2,zero
 400ba30:	1886b03a 	or	r3,r3,r2
 400ba34:	188001cc 	andi	r2,r3,7
 400ba38:	10000726 	beq	r2,zero,400ba58 <__divdf3+0x7dc>
 400ba3c:	188003cc 	andi	r2,r3,15
 400ba40:	01000104 	movi	r4,4
 400ba44:	11000426 	beq	r2,r4,400ba58 <__divdf3+0x7dc>
 400ba48:	1805883a 	mov	r2,r3
 400ba4c:	10c00104 	addi	r3,r2,4
 400ba50:	1885803a 	cmpltu	r2,r3,r2
 400ba54:	88a3883a 	add	r17,r17,r2
 400ba58:	8880202c 	andhi	r2,r17,128
 400ba5c:	10002726 	beq	r2,zero,400bafc <__divdf3+0x880>
 400ba60:	98c0004c 	andi	r3,r19,1
 400ba64:	00800044 	movi	r2,1
 400ba68:	000b883a 	mov	r5,zero
 400ba6c:	0025883a 	mov	r18,zero
 400ba70:	003e6106 	br	400b3f8 <__ram_exceptions_end+0xfac0726c>
 400ba74:	85a1883a 	add	r16,r16,r22
 400ba78:	8585803a 	cmpltu	r2,r16,r22
 400ba7c:	1705883a 	add	r2,r2,fp
 400ba80:	14a5883a 	add	r18,r2,r18
 400ba84:	8c7fff84 	addi	r17,r17,-2
 400ba88:	003f1106 	br	400b6d0 <__ram_exceptions_end+0xfac07544>
 400ba8c:	b589883a 	add	r4,r22,r22
 400ba90:	25ad803a 	cmpltu	r22,r4,r22
 400ba94:	b739883a 	add	fp,r22,fp
 400ba98:	40bfff84 	addi	r2,r8,-2
 400ba9c:	bf2f883a 	add	r23,r23,fp
 400baa0:	202d883a 	mov	r22,r4
 400baa4:	003f9306 	br	400b8f4 <__ram_exceptions_end+0xfac07768>
 400baa8:	013ff844 	movi	r4,-31
 400baac:	2085c83a 	sub	r2,r4,r2
 400bab0:	8888d83a 	srl	r4,r17,r2
 400bab4:	00800804 	movi	r2,32
 400bab8:	18802126 	beq	r3,r2,400bb40 <__divdf3+0x8c4>
 400babc:	00801004 	movi	r2,64
 400bac0:	10c5c83a 	sub	r2,r2,r3
 400bac4:	8884983a 	sll	r2,r17,r2
 400bac8:	1204b03a 	or	r2,r2,r8
 400bacc:	1004c03a 	cmpne	r2,r2,zero
 400bad0:	2084b03a 	or	r2,r4,r2
 400bad4:	144001cc 	andi	r17,r2,7
 400bad8:	88000d1e 	bne	r17,zero,400bb10 <__divdf3+0x894>
 400badc:	000b883a 	mov	r5,zero
 400bae0:	1024d0fa 	srli	r18,r2,3
 400bae4:	98c0004c 	andi	r3,r19,1
 400bae8:	0005883a 	mov	r2,zero
 400baec:	9464b03a 	or	r18,r18,r17
 400baf0:	003e4106 	br	400b3f8 <__ram_exceptions_end+0xfac0726c>
 400baf4:	1007883a 	mov	r3,r2
 400baf8:	0023883a 	mov	r17,zero
 400bafc:	880a927a 	slli	r5,r17,9
 400bb00:	1805883a 	mov	r2,r3
 400bb04:	8822977a 	slli	r17,r17,29
 400bb08:	280ad33a 	srli	r5,r5,12
 400bb0c:	003ff406 	br	400bae0 <__ram_exceptions_end+0xfac07954>
 400bb10:	10c003cc 	andi	r3,r2,15
 400bb14:	01000104 	movi	r4,4
 400bb18:	193ff626 	beq	r3,r4,400baf4 <__ram_exceptions_end+0xfac07968>
 400bb1c:	0023883a 	mov	r17,zero
 400bb20:	003fca06 	br	400ba4c <__ram_exceptions_end+0xfac078c0>
 400bb24:	813fd336 	bltu	r16,r4,400ba74 <__ram_exceptions_end+0xfac078e8>
 400bb28:	1023883a 	mov	r17,r2
 400bb2c:	003fa806 	br	400b9d0 <__ram_exceptions_end+0xfac07844>
 400bb30:	b0ffd636 	bltu	r22,r3,400ba8c <__ram_exceptions_end+0xfac07900>
 400bb34:	1011883a 	mov	r8,r2
 400bb38:	b0ff341e 	bne	r22,r3,400b80c <__ram_exceptions_end+0xfac07680>
 400bb3c:	003f3406 	br	400b810 <__ram_exceptions_end+0xfac07684>
 400bb40:	0005883a 	mov	r2,zero
 400bb44:	003fe006 	br	400bac8 <__ram_exceptions_end+0xfac0793c>
 400bb48:	00800434 	movhi	r2,16
 400bb4c:	89400234 	orhi	r5,r17,8
 400bb50:	10bfffc4 	addi	r2,r2,-1
 400bb54:	b807883a 	mov	r3,r23
 400bb58:	288a703a 	and	r5,r5,r2
 400bb5c:	4025883a 	mov	r18,r8
 400bb60:	003e8206 	br	400b56c <__ram_exceptions_end+0xfac073e0>

0400bb64 <__eqdf2>:
 400bb64:	2804d53a 	srli	r2,r5,20
 400bb68:	3806d53a 	srli	r3,r7,20
 400bb6c:	02000434 	movhi	r8,16
 400bb70:	423fffc4 	addi	r8,r8,-1
 400bb74:	1081ffcc 	andi	r2,r2,2047
 400bb78:	0281ffc4 	movi	r10,2047
 400bb7c:	2a12703a 	and	r9,r5,r8
 400bb80:	18c1ffcc 	andi	r3,r3,2047
 400bb84:	3a10703a 	and	r8,r7,r8
 400bb88:	280ad7fa 	srli	r5,r5,31
 400bb8c:	380ed7fa 	srli	r7,r7,31
 400bb90:	12801026 	beq	r2,r10,400bbd4 <__eqdf2+0x70>
 400bb94:	0281ffc4 	movi	r10,2047
 400bb98:	1a800a26 	beq	r3,r10,400bbc4 <__eqdf2+0x60>
 400bb9c:	10c00226 	beq	r2,r3,400bba8 <__eqdf2+0x44>
 400bba0:	00800044 	movi	r2,1
 400bba4:	f800283a 	ret
 400bba8:	4a3ffd1e 	bne	r9,r8,400bba0 <__ram_exceptions_end+0xfac07a14>
 400bbac:	21bffc1e 	bne	r4,r6,400bba0 <__ram_exceptions_end+0xfac07a14>
 400bbb0:	29c00c26 	beq	r5,r7,400bbe4 <__eqdf2+0x80>
 400bbb4:	103ffa1e 	bne	r2,zero,400bba0 <__ram_exceptions_end+0xfac07a14>
 400bbb8:	2244b03a 	or	r2,r4,r9
 400bbbc:	1004c03a 	cmpne	r2,r2,zero
 400bbc0:	f800283a 	ret
 400bbc4:	3214b03a 	or	r10,r6,r8
 400bbc8:	503ff426 	beq	r10,zero,400bb9c <__ram_exceptions_end+0xfac07a10>
 400bbcc:	00800044 	movi	r2,1
 400bbd0:	f800283a 	ret
 400bbd4:	2254b03a 	or	r10,r4,r9
 400bbd8:	503fee26 	beq	r10,zero,400bb94 <__ram_exceptions_end+0xfac07a08>
 400bbdc:	00800044 	movi	r2,1
 400bbe0:	f800283a 	ret
 400bbe4:	0005883a 	mov	r2,zero
 400bbe8:	f800283a 	ret

0400bbec <__gedf2>:
 400bbec:	2804d53a 	srli	r2,r5,20
 400bbf0:	3806d53a 	srli	r3,r7,20
 400bbf4:	02000434 	movhi	r8,16
 400bbf8:	423fffc4 	addi	r8,r8,-1
 400bbfc:	1081ffcc 	andi	r2,r2,2047
 400bc00:	0241ffc4 	movi	r9,2047
 400bc04:	2a14703a 	and	r10,r5,r8
 400bc08:	18c1ffcc 	andi	r3,r3,2047
 400bc0c:	3a10703a 	and	r8,r7,r8
 400bc10:	280ad7fa 	srli	r5,r5,31
 400bc14:	380ed7fa 	srli	r7,r7,31
 400bc18:	12401d26 	beq	r2,r9,400bc90 <__gedf2+0xa4>
 400bc1c:	0241ffc4 	movi	r9,2047
 400bc20:	1a401226 	beq	r3,r9,400bc6c <__gedf2+0x80>
 400bc24:	1000081e 	bne	r2,zero,400bc48 <__gedf2+0x5c>
 400bc28:	2296b03a 	or	r11,r4,r10
 400bc2c:	5813003a 	cmpeq	r9,r11,zero
 400bc30:	1800091e 	bne	r3,zero,400bc58 <__gedf2+0x6c>
 400bc34:	3218b03a 	or	r12,r6,r8
 400bc38:	6000071e 	bne	r12,zero,400bc58 <__gedf2+0x6c>
 400bc3c:	0005883a 	mov	r2,zero
 400bc40:	5800101e 	bne	r11,zero,400bc84 <__gedf2+0x98>
 400bc44:	f800283a 	ret
 400bc48:	18000c1e 	bne	r3,zero,400bc7c <__gedf2+0x90>
 400bc4c:	3212b03a 	or	r9,r6,r8
 400bc50:	48000c26 	beq	r9,zero,400bc84 <__gedf2+0x98>
 400bc54:	0013883a 	mov	r9,zero
 400bc58:	39c03fcc 	andi	r7,r7,255
 400bc5c:	48000826 	beq	r9,zero,400bc80 <__gedf2+0x94>
 400bc60:	38000926 	beq	r7,zero,400bc88 <__gedf2+0x9c>
 400bc64:	00800044 	movi	r2,1
 400bc68:	f800283a 	ret
 400bc6c:	3212b03a 	or	r9,r6,r8
 400bc70:	483fec26 	beq	r9,zero,400bc24 <__ram_exceptions_end+0xfac07a98>
 400bc74:	00bfff84 	movi	r2,-2
 400bc78:	f800283a 	ret
 400bc7c:	39c03fcc 	andi	r7,r7,255
 400bc80:	29c00626 	beq	r5,r7,400bc9c <__gedf2+0xb0>
 400bc84:	283ff726 	beq	r5,zero,400bc64 <__ram_exceptions_end+0xfac07ad8>
 400bc88:	00bfffc4 	movi	r2,-1
 400bc8c:	f800283a 	ret
 400bc90:	2292b03a 	or	r9,r4,r10
 400bc94:	483fe126 	beq	r9,zero,400bc1c <__ram_exceptions_end+0xfac07a90>
 400bc98:	003ff606 	br	400bc74 <__ram_exceptions_end+0xfac07ae8>
 400bc9c:	18bff916 	blt	r3,r2,400bc84 <__ram_exceptions_end+0xfac07af8>
 400bca0:	10c00316 	blt	r2,r3,400bcb0 <__gedf2+0xc4>
 400bca4:	42bff736 	bltu	r8,r10,400bc84 <__ram_exceptions_end+0xfac07af8>
 400bca8:	52000326 	beq	r10,r8,400bcb8 <__gedf2+0xcc>
 400bcac:	5200042e 	bgeu	r10,r8,400bcc0 <__gedf2+0xd4>
 400bcb0:	283fec1e 	bne	r5,zero,400bc64 <__ram_exceptions_end+0xfac07ad8>
 400bcb4:	003ff406 	br	400bc88 <__ram_exceptions_end+0xfac07afc>
 400bcb8:	313ff236 	bltu	r6,r4,400bc84 <__ram_exceptions_end+0xfac07af8>
 400bcbc:	21bffc36 	bltu	r4,r6,400bcb0 <__ram_exceptions_end+0xfac07b24>
 400bcc0:	0005883a 	mov	r2,zero
 400bcc4:	f800283a 	ret

0400bcc8 <__ledf2>:
 400bcc8:	2804d53a 	srli	r2,r5,20
 400bccc:	3810d53a 	srli	r8,r7,20
 400bcd0:	00c00434 	movhi	r3,16
 400bcd4:	18ffffc4 	addi	r3,r3,-1
 400bcd8:	1081ffcc 	andi	r2,r2,2047
 400bcdc:	0241ffc4 	movi	r9,2047
 400bce0:	28d4703a 	and	r10,r5,r3
 400bce4:	4201ffcc 	andi	r8,r8,2047
 400bce8:	38c6703a 	and	r3,r7,r3
 400bcec:	280ad7fa 	srli	r5,r5,31
 400bcf0:	380ed7fa 	srli	r7,r7,31
 400bcf4:	12401f26 	beq	r2,r9,400bd74 <__ledf2+0xac>
 400bcf8:	0241ffc4 	movi	r9,2047
 400bcfc:	42401426 	beq	r8,r9,400bd50 <__ledf2+0x88>
 400bd00:	1000091e 	bne	r2,zero,400bd28 <__ledf2+0x60>
 400bd04:	2296b03a 	or	r11,r4,r10
 400bd08:	5813003a 	cmpeq	r9,r11,zero
 400bd0c:	29403fcc 	andi	r5,r5,255
 400bd10:	40000a1e 	bne	r8,zero,400bd3c <__ledf2+0x74>
 400bd14:	30d8b03a 	or	r12,r6,r3
 400bd18:	6000081e 	bne	r12,zero,400bd3c <__ledf2+0x74>
 400bd1c:	0005883a 	mov	r2,zero
 400bd20:	5800111e 	bne	r11,zero,400bd68 <__ledf2+0xa0>
 400bd24:	f800283a 	ret
 400bd28:	29403fcc 	andi	r5,r5,255
 400bd2c:	40000c1e 	bne	r8,zero,400bd60 <__ledf2+0x98>
 400bd30:	30d2b03a 	or	r9,r6,r3
 400bd34:	48000c26 	beq	r9,zero,400bd68 <__ledf2+0xa0>
 400bd38:	0013883a 	mov	r9,zero
 400bd3c:	39c03fcc 	andi	r7,r7,255
 400bd40:	48000826 	beq	r9,zero,400bd64 <__ledf2+0x9c>
 400bd44:	38001126 	beq	r7,zero,400bd8c <__ledf2+0xc4>
 400bd48:	00800044 	movi	r2,1
 400bd4c:	f800283a 	ret
 400bd50:	30d2b03a 	or	r9,r6,r3
 400bd54:	483fea26 	beq	r9,zero,400bd00 <__ram_exceptions_end+0xfac07b74>
 400bd58:	00800084 	movi	r2,2
 400bd5c:	f800283a 	ret
 400bd60:	39c03fcc 	andi	r7,r7,255
 400bd64:	39400726 	beq	r7,r5,400bd84 <__ledf2+0xbc>
 400bd68:	2800081e 	bne	r5,zero,400bd8c <__ledf2+0xc4>
 400bd6c:	00800044 	movi	r2,1
 400bd70:	f800283a 	ret
 400bd74:	2292b03a 	or	r9,r4,r10
 400bd78:	483fdf26 	beq	r9,zero,400bcf8 <__ram_exceptions_end+0xfac07b6c>
 400bd7c:	00800084 	movi	r2,2
 400bd80:	f800283a 	ret
 400bd84:	4080030e 	bge	r8,r2,400bd94 <__ledf2+0xcc>
 400bd88:	383fef26 	beq	r7,zero,400bd48 <__ram_exceptions_end+0xfac07bbc>
 400bd8c:	00bfffc4 	movi	r2,-1
 400bd90:	f800283a 	ret
 400bd94:	123feb16 	blt	r2,r8,400bd44 <__ram_exceptions_end+0xfac07bb8>
 400bd98:	1abff336 	bltu	r3,r10,400bd68 <__ram_exceptions_end+0xfac07bdc>
 400bd9c:	50c00326 	beq	r10,r3,400bdac <__ledf2+0xe4>
 400bda0:	50c0042e 	bgeu	r10,r3,400bdb4 <__ledf2+0xec>
 400bda4:	283fe81e 	bne	r5,zero,400bd48 <__ram_exceptions_end+0xfac07bbc>
 400bda8:	003ff806 	br	400bd8c <__ram_exceptions_end+0xfac07c00>
 400bdac:	313fee36 	bltu	r6,r4,400bd68 <__ram_exceptions_end+0xfac07bdc>
 400bdb0:	21bffc36 	bltu	r4,r6,400bda4 <__ram_exceptions_end+0xfac07c18>
 400bdb4:	0005883a 	mov	r2,zero
 400bdb8:	f800283a 	ret

0400bdbc <__muldf3>:
 400bdbc:	defff304 	addi	sp,sp,-52
 400bdc0:	2804d53a 	srli	r2,r5,20
 400bdc4:	dd800915 	stw	r22,36(sp)
 400bdc8:	282cd7fa 	srli	r22,r5,31
 400bdcc:	dc000315 	stw	r16,12(sp)
 400bdd0:	04000434 	movhi	r16,16
 400bdd4:	dd400815 	stw	r21,32(sp)
 400bdd8:	dc800515 	stw	r18,20(sp)
 400bddc:	843fffc4 	addi	r16,r16,-1
 400bde0:	dfc00c15 	stw	ra,48(sp)
 400bde4:	df000b15 	stw	fp,44(sp)
 400bde8:	ddc00a15 	stw	r23,40(sp)
 400bdec:	dd000715 	stw	r20,28(sp)
 400bdf0:	dcc00615 	stw	r19,24(sp)
 400bdf4:	dc400415 	stw	r17,16(sp)
 400bdf8:	1481ffcc 	andi	r18,r2,2047
 400bdfc:	2c20703a 	and	r16,r5,r16
 400be00:	b02b883a 	mov	r21,r22
 400be04:	b2403fcc 	andi	r9,r22,255
 400be08:	90006026 	beq	r18,zero,400bf8c <__muldf3+0x1d0>
 400be0c:	0081ffc4 	movi	r2,2047
 400be10:	2029883a 	mov	r20,r4
 400be14:	90803626 	beq	r18,r2,400bef0 <__muldf3+0x134>
 400be18:	80800434 	orhi	r2,r16,16
 400be1c:	100490fa 	slli	r2,r2,3
 400be20:	2020d77a 	srli	r16,r4,29
 400be24:	202890fa 	slli	r20,r4,3
 400be28:	94bf0044 	addi	r18,r18,-1023
 400be2c:	80a0b03a 	or	r16,r16,r2
 400be30:	0027883a 	mov	r19,zero
 400be34:	0039883a 	mov	fp,zero
 400be38:	3804d53a 	srli	r2,r7,20
 400be3c:	382ed7fa 	srli	r23,r7,31
 400be40:	04400434 	movhi	r17,16
 400be44:	8c7fffc4 	addi	r17,r17,-1
 400be48:	1081ffcc 	andi	r2,r2,2047
 400be4c:	3011883a 	mov	r8,r6
 400be50:	3c62703a 	and	r17,r7,r17
 400be54:	ba803fcc 	andi	r10,r23,255
 400be58:	10006d26 	beq	r2,zero,400c010 <__muldf3+0x254>
 400be5c:	00c1ffc4 	movi	r3,2047
 400be60:	10c06526 	beq	r2,r3,400bff8 <__muldf3+0x23c>
 400be64:	88c00434 	orhi	r3,r17,16
 400be68:	180690fa 	slli	r3,r3,3
 400be6c:	3022d77a 	srli	r17,r6,29
 400be70:	301090fa 	slli	r8,r6,3
 400be74:	10bf0044 	addi	r2,r2,-1023
 400be78:	88e2b03a 	or	r17,r17,r3
 400be7c:	000b883a 	mov	r5,zero
 400be80:	9085883a 	add	r2,r18,r2
 400be84:	2cc8b03a 	or	r4,r5,r19
 400be88:	00c003c4 	movi	r3,15
 400be8c:	bdacf03a 	xor	r22,r23,r22
 400be90:	12c00044 	addi	r11,r2,1
 400be94:	19009936 	bltu	r3,r4,400c0fc <__muldf3+0x340>
 400be98:	200890ba 	slli	r4,r4,2
 400be9c:	00c10074 	movhi	r3,1025
 400bea0:	18efac04 	addi	r3,r3,-16720
 400bea4:	20c9883a 	add	r4,r4,r3
 400bea8:	20c00017 	ldw	r3,0(r4)
 400beac:	1800683a 	jmp	r3
 400beb0:	0400c0fc 	xorhi	r16,zero,771
 400beb4:	0400bf10 	cmplti	r16,zero,764
 400beb8:	0400bf10 	cmplti	r16,zero,764
 400bebc:	0400bf0c 	andi	r16,zero,764
 400bec0:	0400c0d8 	cmpnei	r16,zero,771
 400bec4:	0400c0d8 	cmpnei	r16,zero,771
 400bec8:	0400c0c0 	call	400c0c <__alt_mem_sdram-0x3bff3f4>
 400becc:	0400bf0c 	andi	r16,zero,764
 400bed0:	0400c0d8 	cmpnei	r16,zero,771
 400bed4:	0400c0c0 	call	400c0c <__alt_mem_sdram-0x3bff3f4>
 400bed8:	0400c0d8 	cmpnei	r16,zero,771
 400bedc:	0400bf0c 	andi	r16,zero,764
 400bee0:	0400c0e8 	cmpgeui	r16,zero,771
 400bee4:	0400c0e8 	cmpgeui	r16,zero,771
 400bee8:	0400c0e8 	cmpgeui	r16,zero,771
 400beec:	0400c304 	movi	r16,780
 400bef0:	2404b03a 	or	r2,r4,r16
 400bef4:	10006f1e 	bne	r2,zero,400c0b4 <__muldf3+0x2f8>
 400bef8:	04c00204 	movi	r19,8
 400befc:	0021883a 	mov	r16,zero
 400bf00:	0029883a 	mov	r20,zero
 400bf04:	07000084 	movi	fp,2
 400bf08:	003fcb06 	br	400be38 <__ram_exceptions_end+0xfac07cac>
 400bf0c:	502d883a 	mov	r22,r10
 400bf10:	00800084 	movi	r2,2
 400bf14:	28805726 	beq	r5,r2,400c074 <__muldf3+0x2b8>
 400bf18:	008000c4 	movi	r2,3
 400bf1c:	28816626 	beq	r5,r2,400c4b8 <__muldf3+0x6fc>
 400bf20:	00800044 	movi	r2,1
 400bf24:	2881411e 	bne	r5,r2,400c42c <__muldf3+0x670>
 400bf28:	b02b883a 	mov	r21,r22
 400bf2c:	0005883a 	mov	r2,zero
 400bf30:	000b883a 	mov	r5,zero
 400bf34:	0029883a 	mov	r20,zero
 400bf38:	1004953a 	slli	r2,r2,20
 400bf3c:	a8c03fcc 	andi	r3,r21,255
 400bf40:	04400434 	movhi	r17,16
 400bf44:	8c7fffc4 	addi	r17,r17,-1
 400bf48:	180697fa 	slli	r3,r3,31
 400bf4c:	2c4a703a 	and	r5,r5,r17
 400bf50:	288ab03a 	or	r5,r5,r2
 400bf54:	28c6b03a 	or	r3,r5,r3
 400bf58:	a005883a 	mov	r2,r20
 400bf5c:	dfc00c17 	ldw	ra,48(sp)
 400bf60:	df000b17 	ldw	fp,44(sp)
 400bf64:	ddc00a17 	ldw	r23,40(sp)
 400bf68:	dd800917 	ldw	r22,36(sp)
 400bf6c:	dd400817 	ldw	r21,32(sp)
 400bf70:	dd000717 	ldw	r20,28(sp)
 400bf74:	dcc00617 	ldw	r19,24(sp)
 400bf78:	dc800517 	ldw	r18,20(sp)
 400bf7c:	dc400417 	ldw	r17,16(sp)
 400bf80:	dc000317 	ldw	r16,12(sp)
 400bf84:	dec00d04 	addi	sp,sp,52
 400bf88:	f800283a 	ret
 400bf8c:	2404b03a 	or	r2,r4,r16
 400bf90:	2027883a 	mov	r19,r4
 400bf94:	10004226 	beq	r2,zero,400c0a0 <__muldf3+0x2e4>
 400bf98:	8000fc26 	beq	r16,zero,400c38c <__muldf3+0x5d0>
 400bf9c:	8009883a 	mov	r4,r16
 400bfa0:	d9800215 	stw	r6,8(sp)
 400bfa4:	d9c00015 	stw	r7,0(sp)
 400bfa8:	da400115 	stw	r9,4(sp)
 400bfac:	400cfd40 	call	400cfd4 <__clzsi2>
 400bfb0:	d9800217 	ldw	r6,8(sp)
 400bfb4:	d9c00017 	ldw	r7,0(sp)
 400bfb8:	da400117 	ldw	r9,4(sp)
 400bfbc:	113ffd44 	addi	r4,r2,-11
 400bfc0:	00c00704 	movi	r3,28
 400bfc4:	1900ed16 	blt	r3,r4,400c37c <__muldf3+0x5c0>
 400bfc8:	00c00744 	movi	r3,29
 400bfcc:	147ffe04 	addi	r17,r2,-8
 400bfd0:	1907c83a 	sub	r3,r3,r4
 400bfd4:	8460983a 	sll	r16,r16,r17
 400bfd8:	98c6d83a 	srl	r3,r19,r3
 400bfdc:	9c68983a 	sll	r20,r19,r17
 400bfe0:	1c20b03a 	or	r16,r3,r16
 400bfe4:	1080fcc4 	addi	r2,r2,1011
 400bfe8:	00a5c83a 	sub	r18,zero,r2
 400bfec:	0027883a 	mov	r19,zero
 400bff0:	0039883a 	mov	fp,zero
 400bff4:	003f9006 	br	400be38 <__ram_exceptions_end+0xfac07cac>
 400bff8:	3446b03a 	or	r3,r6,r17
 400bffc:	1800261e 	bne	r3,zero,400c098 <__muldf3+0x2dc>
 400c000:	0023883a 	mov	r17,zero
 400c004:	0011883a 	mov	r8,zero
 400c008:	01400084 	movi	r5,2
 400c00c:	003f9c06 	br	400be80 <__ram_exceptions_end+0xfac07cf4>
 400c010:	3446b03a 	or	r3,r6,r17
 400c014:	18001c26 	beq	r3,zero,400c088 <__muldf3+0x2cc>
 400c018:	8800ce26 	beq	r17,zero,400c354 <__muldf3+0x598>
 400c01c:	8809883a 	mov	r4,r17
 400c020:	d9800215 	stw	r6,8(sp)
 400c024:	da400115 	stw	r9,4(sp)
 400c028:	da800015 	stw	r10,0(sp)
 400c02c:	400cfd40 	call	400cfd4 <__clzsi2>
 400c030:	d9800217 	ldw	r6,8(sp)
 400c034:	da400117 	ldw	r9,4(sp)
 400c038:	da800017 	ldw	r10,0(sp)
 400c03c:	113ffd44 	addi	r4,r2,-11
 400c040:	00c00704 	movi	r3,28
 400c044:	1900bf16 	blt	r3,r4,400c344 <__muldf3+0x588>
 400c048:	00c00744 	movi	r3,29
 400c04c:	123ffe04 	addi	r8,r2,-8
 400c050:	1907c83a 	sub	r3,r3,r4
 400c054:	8a22983a 	sll	r17,r17,r8
 400c058:	30c6d83a 	srl	r3,r6,r3
 400c05c:	3210983a 	sll	r8,r6,r8
 400c060:	1c62b03a 	or	r17,r3,r17
 400c064:	1080fcc4 	addi	r2,r2,1011
 400c068:	0085c83a 	sub	r2,zero,r2
 400c06c:	000b883a 	mov	r5,zero
 400c070:	003f8306 	br	400be80 <__ram_exceptions_end+0xfac07cf4>
 400c074:	b02b883a 	mov	r21,r22
 400c078:	0081ffc4 	movi	r2,2047
 400c07c:	000b883a 	mov	r5,zero
 400c080:	0029883a 	mov	r20,zero
 400c084:	003fac06 	br	400bf38 <__ram_exceptions_end+0xfac07dac>
 400c088:	0023883a 	mov	r17,zero
 400c08c:	0011883a 	mov	r8,zero
 400c090:	01400044 	movi	r5,1
 400c094:	003f7a06 	br	400be80 <__ram_exceptions_end+0xfac07cf4>
 400c098:	014000c4 	movi	r5,3
 400c09c:	003f7806 	br	400be80 <__ram_exceptions_end+0xfac07cf4>
 400c0a0:	04c00104 	movi	r19,4
 400c0a4:	0021883a 	mov	r16,zero
 400c0a8:	0029883a 	mov	r20,zero
 400c0ac:	07000044 	movi	fp,1
 400c0b0:	003f6106 	br	400be38 <__ram_exceptions_end+0xfac07cac>
 400c0b4:	04c00304 	movi	r19,12
 400c0b8:	070000c4 	movi	fp,3
 400c0bc:	003f5e06 	br	400be38 <__ram_exceptions_end+0xfac07cac>
 400c0c0:	01400434 	movhi	r5,16
 400c0c4:	002b883a 	mov	r21,zero
 400c0c8:	297fffc4 	addi	r5,r5,-1
 400c0cc:	053fffc4 	movi	r20,-1
 400c0d0:	0081ffc4 	movi	r2,2047
 400c0d4:	003f9806 	br	400bf38 <__ram_exceptions_end+0xfac07dac>
 400c0d8:	8023883a 	mov	r17,r16
 400c0dc:	a011883a 	mov	r8,r20
 400c0e0:	e00b883a 	mov	r5,fp
 400c0e4:	003f8a06 	br	400bf10 <__ram_exceptions_end+0xfac07d84>
 400c0e8:	8023883a 	mov	r17,r16
 400c0ec:	a011883a 	mov	r8,r20
 400c0f0:	482d883a 	mov	r22,r9
 400c0f4:	e00b883a 	mov	r5,fp
 400c0f8:	003f8506 	br	400bf10 <__ram_exceptions_end+0xfac07d84>
 400c0fc:	a00ad43a 	srli	r5,r20,16
 400c100:	401ad43a 	srli	r13,r8,16
 400c104:	a53fffcc 	andi	r20,r20,65535
 400c108:	423fffcc 	andi	r8,r8,65535
 400c10c:	4519383a 	mul	r12,r8,r20
 400c110:	4147383a 	mul	r3,r8,r5
 400c114:	6d09383a 	mul	r4,r13,r20
 400c118:	600cd43a 	srli	r6,r12,16
 400c11c:	2b5d383a 	mul	r14,r5,r13
 400c120:	20c9883a 	add	r4,r4,r3
 400c124:	310d883a 	add	r6,r6,r4
 400c128:	30c0022e 	bgeu	r6,r3,400c134 <__muldf3+0x378>
 400c12c:	00c00074 	movhi	r3,1
 400c130:	70dd883a 	add	r14,r14,r3
 400c134:	8826d43a 	srli	r19,r17,16
 400c138:	8bffffcc 	andi	r15,r17,65535
 400c13c:	7d23383a 	mul	r17,r15,r20
 400c140:	7949383a 	mul	r4,r15,r5
 400c144:	9d29383a 	mul	r20,r19,r20
 400c148:	8814d43a 	srli	r10,r17,16
 400c14c:	3012943a 	slli	r9,r6,16
 400c150:	a129883a 	add	r20,r20,r4
 400c154:	633fffcc 	andi	r12,r12,65535
 400c158:	5515883a 	add	r10,r10,r20
 400c15c:	3006d43a 	srli	r3,r6,16
 400c160:	4b13883a 	add	r9,r9,r12
 400c164:	2ccb383a 	mul	r5,r5,r19
 400c168:	5100022e 	bgeu	r10,r4,400c174 <__muldf3+0x3b8>
 400c16c:	01000074 	movhi	r4,1
 400c170:	290b883a 	add	r5,r5,r4
 400c174:	802ad43a 	srli	r21,r16,16
 400c178:	843fffcc 	andi	r16,r16,65535
 400c17c:	440d383a 	mul	r6,r8,r16
 400c180:	4565383a 	mul	r18,r8,r21
 400c184:	8349383a 	mul	r4,r16,r13
 400c188:	500e943a 	slli	r7,r10,16
 400c18c:	3010d43a 	srli	r8,r6,16
 400c190:	5028d43a 	srli	r20,r10,16
 400c194:	2489883a 	add	r4,r4,r18
 400c198:	8abfffcc 	andi	r10,r17,65535
 400c19c:	3a95883a 	add	r10,r7,r10
 400c1a0:	4119883a 	add	r12,r8,r4
 400c1a4:	a169883a 	add	r20,r20,r5
 400c1a8:	1a87883a 	add	r3,r3,r10
 400c1ac:	6d5b383a 	mul	r13,r13,r21
 400c1b0:	6480022e 	bgeu	r12,r18,400c1bc <__muldf3+0x400>
 400c1b4:	01000074 	movhi	r4,1
 400c1b8:	691b883a 	add	r13,r13,r4
 400c1bc:	7c25383a 	mul	r18,r15,r16
 400c1c0:	7d4b383a 	mul	r5,r15,r21
 400c1c4:	84cf383a 	mul	r7,r16,r19
 400c1c8:	901ed43a 	srli	r15,r18,16
 400c1cc:	6008d43a 	srli	r4,r12,16
 400c1d0:	6010943a 	slli	r8,r12,16
 400c1d4:	394f883a 	add	r7,r7,r5
 400c1d8:	333fffcc 	andi	r12,r6,65535
 400c1dc:	79df883a 	add	r15,r15,r7
 400c1e0:	235b883a 	add	r13,r4,r13
 400c1e4:	9d63383a 	mul	r17,r19,r21
 400c1e8:	4309883a 	add	r4,r8,r12
 400c1ec:	7940022e 	bgeu	r15,r5,400c1f8 <__muldf3+0x43c>
 400c1f0:	01400074 	movhi	r5,1
 400c1f4:	8963883a 	add	r17,r17,r5
 400c1f8:	780a943a 	slli	r5,r15,16
 400c1fc:	91bfffcc 	andi	r6,r18,65535
 400c200:	70c7883a 	add	r3,r14,r3
 400c204:	298d883a 	add	r6,r5,r6
 400c208:	1a8f803a 	cmpltu	r7,r3,r10
 400c20c:	350b883a 	add	r5,r6,r20
 400c210:	20c7883a 	add	r3,r4,r3
 400c214:	3955883a 	add	r10,r7,r5
 400c218:	1909803a 	cmpltu	r4,r3,r4
 400c21c:	6a91883a 	add	r8,r13,r10
 400c220:	780cd43a 	srli	r6,r15,16
 400c224:	2219883a 	add	r12,r4,r8
 400c228:	2d0b803a 	cmpltu	r5,r5,r20
 400c22c:	51cf803a 	cmpltu	r7,r10,r7
 400c230:	29ceb03a 	or	r7,r5,r7
 400c234:	4351803a 	cmpltu	r8,r8,r13
 400c238:	610b803a 	cmpltu	r5,r12,r4
 400c23c:	4148b03a 	or	r4,r8,r5
 400c240:	398f883a 	add	r7,r7,r6
 400c244:	3909883a 	add	r4,r7,r4
 400c248:	1810927a 	slli	r8,r3,9
 400c24c:	2449883a 	add	r4,r4,r17
 400c250:	2008927a 	slli	r4,r4,9
 400c254:	6022d5fa 	srli	r17,r12,23
 400c258:	1806d5fa 	srli	r3,r3,23
 400c25c:	4252b03a 	or	r9,r8,r9
 400c260:	600a927a 	slli	r5,r12,9
 400c264:	4810c03a 	cmpne	r8,r9,zero
 400c268:	2462b03a 	or	r17,r4,r17
 400c26c:	40c6b03a 	or	r3,r8,r3
 400c270:	8900402c 	andhi	r4,r17,256
 400c274:	1950b03a 	or	r8,r3,r5
 400c278:	20000726 	beq	r4,zero,400c298 <__muldf3+0x4dc>
 400c27c:	4006d07a 	srli	r3,r8,1
 400c280:	880497fa 	slli	r2,r17,31
 400c284:	4200004c 	andi	r8,r8,1
 400c288:	8822d07a 	srli	r17,r17,1
 400c28c:	1a10b03a 	or	r8,r3,r8
 400c290:	1210b03a 	or	r8,r2,r8
 400c294:	5805883a 	mov	r2,r11
 400c298:	1140ffc4 	addi	r5,r2,1023
 400c29c:	0140440e 	bge	zero,r5,400c3b0 <__muldf3+0x5f4>
 400c2a0:	40c001cc 	andi	r3,r8,7
 400c2a4:	18000726 	beq	r3,zero,400c2c4 <__muldf3+0x508>
 400c2a8:	40c003cc 	andi	r3,r8,15
 400c2ac:	01000104 	movi	r4,4
 400c2b0:	19000426 	beq	r3,r4,400c2c4 <__muldf3+0x508>
 400c2b4:	4107883a 	add	r3,r8,r4
 400c2b8:	1a11803a 	cmpltu	r8,r3,r8
 400c2bc:	8a23883a 	add	r17,r17,r8
 400c2c0:	1811883a 	mov	r8,r3
 400c2c4:	88c0402c 	andhi	r3,r17,256
 400c2c8:	18000426 	beq	r3,zero,400c2dc <__muldf3+0x520>
 400c2cc:	11410004 	addi	r5,r2,1024
 400c2d0:	00bfc034 	movhi	r2,65280
 400c2d4:	10bfffc4 	addi	r2,r2,-1
 400c2d8:	88a2703a 	and	r17,r17,r2
 400c2dc:	0081ff84 	movi	r2,2046
 400c2e0:	117f6416 	blt	r2,r5,400c074 <__ram_exceptions_end+0xfac07ee8>
 400c2e4:	8828977a 	slli	r20,r17,29
 400c2e8:	4010d0fa 	srli	r8,r8,3
 400c2ec:	8822927a 	slli	r17,r17,9
 400c2f0:	2881ffcc 	andi	r2,r5,2047
 400c2f4:	a228b03a 	or	r20,r20,r8
 400c2f8:	880ad33a 	srli	r5,r17,12
 400c2fc:	b02b883a 	mov	r21,r22
 400c300:	003f0d06 	br	400bf38 <__ram_exceptions_end+0xfac07dac>
 400c304:	8080022c 	andhi	r2,r16,8
 400c308:	10000926 	beq	r2,zero,400c330 <__muldf3+0x574>
 400c30c:	8880022c 	andhi	r2,r17,8
 400c310:	1000071e 	bne	r2,zero,400c330 <__muldf3+0x574>
 400c314:	00800434 	movhi	r2,16
 400c318:	89400234 	orhi	r5,r17,8
 400c31c:	10bfffc4 	addi	r2,r2,-1
 400c320:	b82b883a 	mov	r21,r23
 400c324:	288a703a 	and	r5,r5,r2
 400c328:	4029883a 	mov	r20,r8
 400c32c:	003f6806 	br	400c0d0 <__ram_exceptions_end+0xfac07f44>
 400c330:	00800434 	movhi	r2,16
 400c334:	81400234 	orhi	r5,r16,8
 400c338:	10bfffc4 	addi	r2,r2,-1
 400c33c:	288a703a 	and	r5,r5,r2
 400c340:	003f6306 	br	400c0d0 <__ram_exceptions_end+0xfac07f44>
 400c344:	147ff604 	addi	r17,r2,-40
 400c348:	3462983a 	sll	r17,r6,r17
 400c34c:	0011883a 	mov	r8,zero
 400c350:	003f4406 	br	400c064 <__ram_exceptions_end+0xfac07ed8>
 400c354:	3009883a 	mov	r4,r6
 400c358:	d9800215 	stw	r6,8(sp)
 400c35c:	da400115 	stw	r9,4(sp)
 400c360:	da800015 	stw	r10,0(sp)
 400c364:	400cfd40 	call	400cfd4 <__clzsi2>
 400c368:	10800804 	addi	r2,r2,32
 400c36c:	da800017 	ldw	r10,0(sp)
 400c370:	da400117 	ldw	r9,4(sp)
 400c374:	d9800217 	ldw	r6,8(sp)
 400c378:	003f3006 	br	400c03c <__ram_exceptions_end+0xfac07eb0>
 400c37c:	143ff604 	addi	r16,r2,-40
 400c380:	9c20983a 	sll	r16,r19,r16
 400c384:	0029883a 	mov	r20,zero
 400c388:	003f1606 	br	400bfe4 <__ram_exceptions_end+0xfac07e58>
 400c38c:	d9800215 	stw	r6,8(sp)
 400c390:	d9c00015 	stw	r7,0(sp)
 400c394:	da400115 	stw	r9,4(sp)
 400c398:	400cfd40 	call	400cfd4 <__clzsi2>
 400c39c:	10800804 	addi	r2,r2,32
 400c3a0:	da400117 	ldw	r9,4(sp)
 400c3a4:	d9c00017 	ldw	r7,0(sp)
 400c3a8:	d9800217 	ldw	r6,8(sp)
 400c3ac:	003f0306 	br	400bfbc <__ram_exceptions_end+0xfac07e30>
 400c3b0:	00c00044 	movi	r3,1
 400c3b4:	1947c83a 	sub	r3,r3,r5
 400c3b8:	00800e04 	movi	r2,56
 400c3bc:	10feda16 	blt	r2,r3,400bf28 <__ram_exceptions_end+0xfac07d9c>
 400c3c0:	008007c4 	movi	r2,31
 400c3c4:	10c01b16 	blt	r2,r3,400c434 <__muldf3+0x678>
 400c3c8:	00800804 	movi	r2,32
 400c3cc:	10c5c83a 	sub	r2,r2,r3
 400c3d0:	888a983a 	sll	r5,r17,r2
 400c3d4:	40c8d83a 	srl	r4,r8,r3
 400c3d8:	4084983a 	sll	r2,r8,r2
 400c3dc:	88e2d83a 	srl	r17,r17,r3
 400c3e0:	2906b03a 	or	r3,r5,r4
 400c3e4:	1004c03a 	cmpne	r2,r2,zero
 400c3e8:	1886b03a 	or	r3,r3,r2
 400c3ec:	188001cc 	andi	r2,r3,7
 400c3f0:	10000726 	beq	r2,zero,400c410 <__muldf3+0x654>
 400c3f4:	188003cc 	andi	r2,r3,15
 400c3f8:	01000104 	movi	r4,4
 400c3fc:	11000426 	beq	r2,r4,400c410 <__muldf3+0x654>
 400c400:	1805883a 	mov	r2,r3
 400c404:	10c00104 	addi	r3,r2,4
 400c408:	1885803a 	cmpltu	r2,r3,r2
 400c40c:	88a3883a 	add	r17,r17,r2
 400c410:	8880202c 	andhi	r2,r17,128
 400c414:	10001c26 	beq	r2,zero,400c488 <__muldf3+0x6cc>
 400c418:	b02b883a 	mov	r21,r22
 400c41c:	00800044 	movi	r2,1
 400c420:	000b883a 	mov	r5,zero
 400c424:	0029883a 	mov	r20,zero
 400c428:	003ec306 	br	400bf38 <__ram_exceptions_end+0xfac07dac>
 400c42c:	5805883a 	mov	r2,r11
 400c430:	003f9906 	br	400c298 <__ram_exceptions_end+0xfac0810c>
 400c434:	00bff844 	movi	r2,-31
 400c438:	1145c83a 	sub	r2,r2,r5
 400c43c:	8888d83a 	srl	r4,r17,r2
 400c440:	00800804 	movi	r2,32
 400c444:	18801a26 	beq	r3,r2,400c4b0 <__muldf3+0x6f4>
 400c448:	00801004 	movi	r2,64
 400c44c:	10c5c83a 	sub	r2,r2,r3
 400c450:	8884983a 	sll	r2,r17,r2
 400c454:	1204b03a 	or	r2,r2,r8
 400c458:	1004c03a 	cmpne	r2,r2,zero
 400c45c:	2084b03a 	or	r2,r4,r2
 400c460:	144001cc 	andi	r17,r2,7
 400c464:	88000d1e 	bne	r17,zero,400c49c <__muldf3+0x6e0>
 400c468:	000b883a 	mov	r5,zero
 400c46c:	1028d0fa 	srli	r20,r2,3
 400c470:	b02b883a 	mov	r21,r22
 400c474:	0005883a 	mov	r2,zero
 400c478:	a468b03a 	or	r20,r20,r17
 400c47c:	003eae06 	br	400bf38 <__ram_exceptions_end+0xfac07dac>
 400c480:	1007883a 	mov	r3,r2
 400c484:	0023883a 	mov	r17,zero
 400c488:	880a927a 	slli	r5,r17,9
 400c48c:	1805883a 	mov	r2,r3
 400c490:	8822977a 	slli	r17,r17,29
 400c494:	280ad33a 	srli	r5,r5,12
 400c498:	003ff406 	br	400c46c <__ram_exceptions_end+0xfac082e0>
 400c49c:	10c003cc 	andi	r3,r2,15
 400c4a0:	01000104 	movi	r4,4
 400c4a4:	193ff626 	beq	r3,r4,400c480 <__ram_exceptions_end+0xfac082f4>
 400c4a8:	0023883a 	mov	r17,zero
 400c4ac:	003fd506 	br	400c404 <__ram_exceptions_end+0xfac08278>
 400c4b0:	0005883a 	mov	r2,zero
 400c4b4:	003fe706 	br	400c454 <__ram_exceptions_end+0xfac082c8>
 400c4b8:	00800434 	movhi	r2,16
 400c4bc:	89400234 	orhi	r5,r17,8
 400c4c0:	10bfffc4 	addi	r2,r2,-1
 400c4c4:	b02b883a 	mov	r21,r22
 400c4c8:	288a703a 	and	r5,r5,r2
 400c4cc:	4029883a 	mov	r20,r8
 400c4d0:	003eff06 	br	400c0d0 <__ram_exceptions_end+0xfac07f44>

0400c4d4 <__subdf3>:
 400c4d4:	02000434 	movhi	r8,16
 400c4d8:	423fffc4 	addi	r8,r8,-1
 400c4dc:	defffb04 	addi	sp,sp,-20
 400c4e0:	2a14703a 	and	r10,r5,r8
 400c4e4:	3812d53a 	srli	r9,r7,20
 400c4e8:	3a10703a 	and	r8,r7,r8
 400c4ec:	2006d77a 	srli	r3,r4,29
 400c4f0:	3004d77a 	srli	r2,r6,29
 400c4f4:	dc000015 	stw	r16,0(sp)
 400c4f8:	501490fa 	slli	r10,r10,3
 400c4fc:	2820d53a 	srli	r16,r5,20
 400c500:	401090fa 	slli	r8,r8,3
 400c504:	dc800215 	stw	r18,8(sp)
 400c508:	dc400115 	stw	r17,4(sp)
 400c50c:	dfc00415 	stw	ra,16(sp)
 400c510:	202290fa 	slli	r17,r4,3
 400c514:	dcc00315 	stw	r19,12(sp)
 400c518:	4a41ffcc 	andi	r9,r9,2047
 400c51c:	0101ffc4 	movi	r4,2047
 400c520:	2824d7fa 	srli	r18,r5,31
 400c524:	8401ffcc 	andi	r16,r16,2047
 400c528:	50c6b03a 	or	r3,r10,r3
 400c52c:	380ed7fa 	srli	r7,r7,31
 400c530:	408ab03a 	or	r5,r8,r2
 400c534:	300c90fa 	slli	r6,r6,3
 400c538:	49009626 	beq	r9,r4,400c794 <__subdf3+0x2c0>
 400c53c:	39c0005c 	xori	r7,r7,1
 400c540:	8245c83a 	sub	r2,r16,r9
 400c544:	3c807426 	beq	r7,r18,400c718 <__subdf3+0x244>
 400c548:	0080af0e 	bge	zero,r2,400c808 <__subdf3+0x334>
 400c54c:	48002a1e 	bne	r9,zero,400c5f8 <__subdf3+0x124>
 400c550:	2988b03a 	or	r4,r5,r6
 400c554:	20009a1e 	bne	r4,zero,400c7c0 <__subdf3+0x2ec>
 400c558:	888001cc 	andi	r2,r17,7
 400c55c:	10000726 	beq	r2,zero,400c57c <__subdf3+0xa8>
 400c560:	888003cc 	andi	r2,r17,15
 400c564:	01000104 	movi	r4,4
 400c568:	11000426 	beq	r2,r4,400c57c <__subdf3+0xa8>
 400c56c:	890b883a 	add	r5,r17,r4
 400c570:	2c63803a 	cmpltu	r17,r5,r17
 400c574:	1c47883a 	add	r3,r3,r17
 400c578:	2823883a 	mov	r17,r5
 400c57c:	1880202c 	andhi	r2,r3,128
 400c580:	10005926 	beq	r2,zero,400c6e8 <__subdf3+0x214>
 400c584:	84000044 	addi	r16,r16,1
 400c588:	0081ffc4 	movi	r2,2047
 400c58c:	8080be26 	beq	r16,r2,400c888 <__subdf3+0x3b4>
 400c590:	017fe034 	movhi	r5,65408
 400c594:	297fffc4 	addi	r5,r5,-1
 400c598:	1946703a 	and	r3,r3,r5
 400c59c:	1804977a 	slli	r2,r3,29
 400c5a0:	1806927a 	slli	r3,r3,9
 400c5a4:	8822d0fa 	srli	r17,r17,3
 400c5a8:	8401ffcc 	andi	r16,r16,2047
 400c5ac:	180ad33a 	srli	r5,r3,12
 400c5b0:	9100004c 	andi	r4,r18,1
 400c5b4:	1444b03a 	or	r2,r2,r17
 400c5b8:	80c1ffcc 	andi	r3,r16,2047
 400c5bc:	1820953a 	slli	r16,r3,20
 400c5c0:	20c03fcc 	andi	r3,r4,255
 400c5c4:	180897fa 	slli	r4,r3,31
 400c5c8:	00c00434 	movhi	r3,16
 400c5cc:	18ffffc4 	addi	r3,r3,-1
 400c5d0:	28c6703a 	and	r3,r5,r3
 400c5d4:	1c06b03a 	or	r3,r3,r16
 400c5d8:	1906b03a 	or	r3,r3,r4
 400c5dc:	dfc00417 	ldw	ra,16(sp)
 400c5e0:	dcc00317 	ldw	r19,12(sp)
 400c5e4:	dc800217 	ldw	r18,8(sp)
 400c5e8:	dc400117 	ldw	r17,4(sp)
 400c5ec:	dc000017 	ldw	r16,0(sp)
 400c5f0:	dec00504 	addi	sp,sp,20
 400c5f4:	f800283a 	ret
 400c5f8:	0101ffc4 	movi	r4,2047
 400c5fc:	813fd626 	beq	r16,r4,400c558 <__ram_exceptions_end+0xfac083cc>
 400c600:	29402034 	orhi	r5,r5,128
 400c604:	01000e04 	movi	r4,56
 400c608:	2080a316 	blt	r4,r2,400c898 <__subdf3+0x3c4>
 400c60c:	010007c4 	movi	r4,31
 400c610:	2080c616 	blt	r4,r2,400c92c <__subdf3+0x458>
 400c614:	01000804 	movi	r4,32
 400c618:	2089c83a 	sub	r4,r4,r2
 400c61c:	2910983a 	sll	r8,r5,r4
 400c620:	308ed83a 	srl	r7,r6,r2
 400c624:	3108983a 	sll	r4,r6,r4
 400c628:	2884d83a 	srl	r2,r5,r2
 400c62c:	41ccb03a 	or	r6,r8,r7
 400c630:	2008c03a 	cmpne	r4,r4,zero
 400c634:	310cb03a 	or	r6,r6,r4
 400c638:	898dc83a 	sub	r6,r17,r6
 400c63c:	89a3803a 	cmpltu	r17,r17,r6
 400c640:	1887c83a 	sub	r3,r3,r2
 400c644:	1c47c83a 	sub	r3,r3,r17
 400c648:	3023883a 	mov	r17,r6
 400c64c:	1880202c 	andhi	r2,r3,128
 400c650:	10002326 	beq	r2,zero,400c6e0 <__subdf3+0x20c>
 400c654:	04c02034 	movhi	r19,128
 400c658:	9cffffc4 	addi	r19,r19,-1
 400c65c:	1ce6703a 	and	r19,r3,r19
 400c660:	98007a26 	beq	r19,zero,400c84c <__subdf3+0x378>
 400c664:	9809883a 	mov	r4,r19
 400c668:	400cfd40 	call	400cfd4 <__clzsi2>
 400c66c:	113ffe04 	addi	r4,r2,-8
 400c670:	00c007c4 	movi	r3,31
 400c674:	19007b16 	blt	r3,r4,400c864 <__subdf3+0x390>
 400c678:	00800804 	movi	r2,32
 400c67c:	1105c83a 	sub	r2,r2,r4
 400c680:	8884d83a 	srl	r2,r17,r2
 400c684:	9906983a 	sll	r3,r19,r4
 400c688:	8922983a 	sll	r17,r17,r4
 400c68c:	10c4b03a 	or	r2,r2,r3
 400c690:	24007816 	blt	r4,r16,400c874 <__subdf3+0x3a0>
 400c694:	2421c83a 	sub	r16,r4,r16
 400c698:	80c00044 	addi	r3,r16,1
 400c69c:	010007c4 	movi	r4,31
 400c6a0:	20c09516 	blt	r4,r3,400c8f8 <__subdf3+0x424>
 400c6a4:	01400804 	movi	r5,32
 400c6a8:	28cbc83a 	sub	r5,r5,r3
 400c6ac:	88c8d83a 	srl	r4,r17,r3
 400c6b0:	8962983a 	sll	r17,r17,r5
 400c6b4:	114a983a 	sll	r5,r2,r5
 400c6b8:	10c6d83a 	srl	r3,r2,r3
 400c6bc:	8804c03a 	cmpne	r2,r17,zero
 400c6c0:	290ab03a 	or	r5,r5,r4
 400c6c4:	28a2b03a 	or	r17,r5,r2
 400c6c8:	0021883a 	mov	r16,zero
 400c6cc:	003fa206 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400c6d0:	2090b03a 	or	r8,r4,r2
 400c6d4:	40018e26 	beq	r8,zero,400cd10 <__subdf3+0x83c>
 400c6d8:	1007883a 	mov	r3,r2
 400c6dc:	2023883a 	mov	r17,r4
 400c6e0:	888001cc 	andi	r2,r17,7
 400c6e4:	103f9e1e 	bne	r2,zero,400c560 <__ram_exceptions_end+0xfac083d4>
 400c6e8:	1804977a 	slli	r2,r3,29
 400c6ec:	8822d0fa 	srli	r17,r17,3
 400c6f0:	1810d0fa 	srli	r8,r3,3
 400c6f4:	9100004c 	andi	r4,r18,1
 400c6f8:	1444b03a 	or	r2,r2,r17
 400c6fc:	00c1ffc4 	movi	r3,2047
 400c700:	80c02826 	beq	r16,r3,400c7a4 <__subdf3+0x2d0>
 400c704:	01400434 	movhi	r5,16
 400c708:	297fffc4 	addi	r5,r5,-1
 400c70c:	80e0703a 	and	r16,r16,r3
 400c710:	414a703a 	and	r5,r8,r5
 400c714:	003fa806 	br	400c5b8 <__ram_exceptions_end+0xfac0842c>
 400c718:	0080630e 	bge	zero,r2,400c8a8 <__subdf3+0x3d4>
 400c71c:	48003026 	beq	r9,zero,400c7e0 <__subdf3+0x30c>
 400c720:	0101ffc4 	movi	r4,2047
 400c724:	813f8c26 	beq	r16,r4,400c558 <__ram_exceptions_end+0xfac083cc>
 400c728:	29402034 	orhi	r5,r5,128
 400c72c:	01000e04 	movi	r4,56
 400c730:	2080a90e 	bge	r4,r2,400c9d8 <__subdf3+0x504>
 400c734:	298cb03a 	or	r6,r5,r6
 400c738:	3012c03a 	cmpne	r9,r6,zero
 400c73c:	0005883a 	mov	r2,zero
 400c740:	4c53883a 	add	r9,r9,r17
 400c744:	4c63803a 	cmpltu	r17,r9,r17
 400c748:	10c7883a 	add	r3,r2,r3
 400c74c:	88c7883a 	add	r3,r17,r3
 400c750:	4823883a 	mov	r17,r9
 400c754:	1880202c 	andhi	r2,r3,128
 400c758:	1000d026 	beq	r2,zero,400ca9c <__subdf3+0x5c8>
 400c75c:	84000044 	addi	r16,r16,1
 400c760:	0081ffc4 	movi	r2,2047
 400c764:	8080fe26 	beq	r16,r2,400cb60 <__subdf3+0x68c>
 400c768:	00bfe034 	movhi	r2,65408
 400c76c:	10bfffc4 	addi	r2,r2,-1
 400c770:	1886703a 	and	r3,r3,r2
 400c774:	880ad07a 	srli	r5,r17,1
 400c778:	180497fa 	slli	r2,r3,31
 400c77c:	8900004c 	andi	r4,r17,1
 400c780:	2922b03a 	or	r17,r5,r4
 400c784:	1806d07a 	srli	r3,r3,1
 400c788:	1462b03a 	or	r17,r2,r17
 400c78c:	3825883a 	mov	r18,r7
 400c790:	003f7106 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400c794:	2984b03a 	or	r2,r5,r6
 400c798:	103f6826 	beq	r2,zero,400c53c <__ram_exceptions_end+0xfac083b0>
 400c79c:	39c03fcc 	andi	r7,r7,255
 400c7a0:	003f6706 	br	400c540 <__ram_exceptions_end+0xfac083b4>
 400c7a4:	4086b03a 	or	r3,r8,r2
 400c7a8:	18015226 	beq	r3,zero,400ccf4 <__subdf3+0x820>
 400c7ac:	00c00434 	movhi	r3,16
 400c7b0:	41400234 	orhi	r5,r8,8
 400c7b4:	18ffffc4 	addi	r3,r3,-1
 400c7b8:	28ca703a 	and	r5,r5,r3
 400c7bc:	003f7e06 	br	400c5b8 <__ram_exceptions_end+0xfac0842c>
 400c7c0:	10bfffc4 	addi	r2,r2,-1
 400c7c4:	1000491e 	bne	r2,zero,400c8ec <__subdf3+0x418>
 400c7c8:	898fc83a 	sub	r7,r17,r6
 400c7cc:	89e3803a 	cmpltu	r17,r17,r7
 400c7d0:	1947c83a 	sub	r3,r3,r5
 400c7d4:	1c47c83a 	sub	r3,r3,r17
 400c7d8:	3823883a 	mov	r17,r7
 400c7dc:	003f9b06 	br	400c64c <__ram_exceptions_end+0xfac084c0>
 400c7e0:	2988b03a 	or	r4,r5,r6
 400c7e4:	203f5c26 	beq	r4,zero,400c558 <__ram_exceptions_end+0xfac083cc>
 400c7e8:	10bfffc4 	addi	r2,r2,-1
 400c7ec:	1000931e 	bne	r2,zero,400ca3c <__subdf3+0x568>
 400c7f0:	898d883a 	add	r6,r17,r6
 400c7f4:	3463803a 	cmpltu	r17,r6,r17
 400c7f8:	1947883a 	add	r3,r3,r5
 400c7fc:	88c7883a 	add	r3,r17,r3
 400c800:	3023883a 	mov	r17,r6
 400c804:	003fd306 	br	400c754 <__ram_exceptions_end+0xfac085c8>
 400c808:	1000541e 	bne	r2,zero,400c95c <__subdf3+0x488>
 400c80c:	80800044 	addi	r2,r16,1
 400c810:	1081ffcc 	andi	r2,r2,2047
 400c814:	01000044 	movi	r4,1
 400c818:	2080a20e 	bge	r4,r2,400caa4 <__subdf3+0x5d0>
 400c81c:	8989c83a 	sub	r4,r17,r6
 400c820:	8905803a 	cmpltu	r2,r17,r4
 400c824:	1967c83a 	sub	r19,r3,r5
 400c828:	98a7c83a 	sub	r19,r19,r2
 400c82c:	9880202c 	andhi	r2,r19,128
 400c830:	10006326 	beq	r2,zero,400c9c0 <__subdf3+0x4ec>
 400c834:	3463c83a 	sub	r17,r6,r17
 400c838:	28c7c83a 	sub	r3,r5,r3
 400c83c:	344d803a 	cmpltu	r6,r6,r17
 400c840:	19a7c83a 	sub	r19,r3,r6
 400c844:	3825883a 	mov	r18,r7
 400c848:	983f861e 	bne	r19,zero,400c664 <__ram_exceptions_end+0xfac084d8>
 400c84c:	8809883a 	mov	r4,r17
 400c850:	400cfd40 	call	400cfd4 <__clzsi2>
 400c854:	10800804 	addi	r2,r2,32
 400c858:	113ffe04 	addi	r4,r2,-8
 400c85c:	00c007c4 	movi	r3,31
 400c860:	193f850e 	bge	r3,r4,400c678 <__ram_exceptions_end+0xfac084ec>
 400c864:	10bff604 	addi	r2,r2,-40
 400c868:	8884983a 	sll	r2,r17,r2
 400c86c:	0023883a 	mov	r17,zero
 400c870:	243f880e 	bge	r4,r16,400c694 <__ram_exceptions_end+0xfac08508>
 400c874:	00ffe034 	movhi	r3,65408
 400c878:	18ffffc4 	addi	r3,r3,-1
 400c87c:	8121c83a 	sub	r16,r16,r4
 400c880:	10c6703a 	and	r3,r2,r3
 400c884:	003f3406 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400c888:	9100004c 	andi	r4,r18,1
 400c88c:	000b883a 	mov	r5,zero
 400c890:	0005883a 	mov	r2,zero
 400c894:	003f4806 	br	400c5b8 <__ram_exceptions_end+0xfac0842c>
 400c898:	298cb03a 	or	r6,r5,r6
 400c89c:	300cc03a 	cmpne	r6,r6,zero
 400c8a0:	0005883a 	mov	r2,zero
 400c8a4:	003f6406 	br	400c638 <__ram_exceptions_end+0xfac084ac>
 400c8a8:	10009a1e 	bne	r2,zero,400cb14 <__subdf3+0x640>
 400c8ac:	82400044 	addi	r9,r16,1
 400c8b0:	4881ffcc 	andi	r2,r9,2047
 400c8b4:	02800044 	movi	r10,1
 400c8b8:	5080670e 	bge	r10,r2,400ca58 <__subdf3+0x584>
 400c8bc:	0081ffc4 	movi	r2,2047
 400c8c0:	4880af26 	beq	r9,r2,400cb80 <__subdf3+0x6ac>
 400c8c4:	898d883a 	add	r6,r17,r6
 400c8c8:	1945883a 	add	r2,r3,r5
 400c8cc:	3447803a 	cmpltu	r3,r6,r17
 400c8d0:	1887883a 	add	r3,r3,r2
 400c8d4:	182297fa 	slli	r17,r3,31
 400c8d8:	300cd07a 	srli	r6,r6,1
 400c8dc:	1806d07a 	srli	r3,r3,1
 400c8e0:	4821883a 	mov	r16,r9
 400c8e4:	89a2b03a 	or	r17,r17,r6
 400c8e8:	003f1b06 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400c8ec:	0101ffc4 	movi	r4,2047
 400c8f0:	813f441e 	bne	r16,r4,400c604 <__ram_exceptions_end+0xfac08478>
 400c8f4:	003f1806 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400c8f8:	843ff844 	addi	r16,r16,-31
 400c8fc:	01400804 	movi	r5,32
 400c900:	1408d83a 	srl	r4,r2,r16
 400c904:	19405026 	beq	r3,r5,400ca48 <__subdf3+0x574>
 400c908:	01401004 	movi	r5,64
 400c90c:	28c7c83a 	sub	r3,r5,r3
 400c910:	10c4983a 	sll	r2,r2,r3
 400c914:	88a2b03a 	or	r17,r17,r2
 400c918:	8822c03a 	cmpne	r17,r17,zero
 400c91c:	2462b03a 	or	r17,r4,r17
 400c920:	0007883a 	mov	r3,zero
 400c924:	0021883a 	mov	r16,zero
 400c928:	003f6d06 	br	400c6e0 <__ram_exceptions_end+0xfac08554>
 400c92c:	11fff804 	addi	r7,r2,-32
 400c930:	01000804 	movi	r4,32
 400c934:	29ced83a 	srl	r7,r5,r7
 400c938:	11004526 	beq	r2,r4,400ca50 <__subdf3+0x57c>
 400c93c:	01001004 	movi	r4,64
 400c940:	2089c83a 	sub	r4,r4,r2
 400c944:	2904983a 	sll	r2,r5,r4
 400c948:	118cb03a 	or	r6,r2,r6
 400c94c:	300cc03a 	cmpne	r6,r6,zero
 400c950:	398cb03a 	or	r6,r7,r6
 400c954:	0005883a 	mov	r2,zero
 400c958:	003f3706 	br	400c638 <__ram_exceptions_end+0xfac084ac>
 400c95c:	80002a26 	beq	r16,zero,400ca08 <__subdf3+0x534>
 400c960:	0101ffc4 	movi	r4,2047
 400c964:	49006626 	beq	r9,r4,400cb00 <__subdf3+0x62c>
 400c968:	0085c83a 	sub	r2,zero,r2
 400c96c:	18c02034 	orhi	r3,r3,128
 400c970:	01000e04 	movi	r4,56
 400c974:	20807e16 	blt	r4,r2,400cb70 <__subdf3+0x69c>
 400c978:	010007c4 	movi	r4,31
 400c97c:	2080e716 	blt	r4,r2,400cd1c <__subdf3+0x848>
 400c980:	01000804 	movi	r4,32
 400c984:	2089c83a 	sub	r4,r4,r2
 400c988:	1914983a 	sll	r10,r3,r4
 400c98c:	8890d83a 	srl	r8,r17,r2
 400c990:	8908983a 	sll	r4,r17,r4
 400c994:	1884d83a 	srl	r2,r3,r2
 400c998:	5222b03a 	or	r17,r10,r8
 400c99c:	2006c03a 	cmpne	r3,r4,zero
 400c9a0:	88e2b03a 	or	r17,r17,r3
 400c9a4:	3463c83a 	sub	r17,r6,r17
 400c9a8:	2885c83a 	sub	r2,r5,r2
 400c9ac:	344d803a 	cmpltu	r6,r6,r17
 400c9b0:	1187c83a 	sub	r3,r2,r6
 400c9b4:	4821883a 	mov	r16,r9
 400c9b8:	3825883a 	mov	r18,r7
 400c9bc:	003f2306 	br	400c64c <__ram_exceptions_end+0xfac084c0>
 400c9c0:	24d0b03a 	or	r8,r4,r19
 400c9c4:	40001b1e 	bne	r8,zero,400ca34 <__subdf3+0x560>
 400c9c8:	0005883a 	mov	r2,zero
 400c9cc:	0009883a 	mov	r4,zero
 400c9d0:	0021883a 	mov	r16,zero
 400c9d4:	003f4906 	br	400c6fc <__ram_exceptions_end+0xfac08570>
 400c9d8:	010007c4 	movi	r4,31
 400c9dc:	20803a16 	blt	r4,r2,400cac8 <__subdf3+0x5f4>
 400c9e0:	01000804 	movi	r4,32
 400c9e4:	2089c83a 	sub	r4,r4,r2
 400c9e8:	2912983a 	sll	r9,r5,r4
 400c9ec:	3090d83a 	srl	r8,r6,r2
 400c9f0:	3108983a 	sll	r4,r6,r4
 400c9f4:	2884d83a 	srl	r2,r5,r2
 400c9f8:	4a12b03a 	or	r9,r9,r8
 400c9fc:	2008c03a 	cmpne	r4,r4,zero
 400ca00:	4912b03a 	or	r9,r9,r4
 400ca04:	003f4e06 	br	400c740 <__ram_exceptions_end+0xfac085b4>
 400ca08:	1c48b03a 	or	r4,r3,r17
 400ca0c:	20003c26 	beq	r4,zero,400cb00 <__subdf3+0x62c>
 400ca10:	0084303a 	nor	r2,zero,r2
 400ca14:	1000381e 	bne	r2,zero,400caf8 <__subdf3+0x624>
 400ca18:	3463c83a 	sub	r17,r6,r17
 400ca1c:	28c5c83a 	sub	r2,r5,r3
 400ca20:	344d803a 	cmpltu	r6,r6,r17
 400ca24:	1187c83a 	sub	r3,r2,r6
 400ca28:	4821883a 	mov	r16,r9
 400ca2c:	3825883a 	mov	r18,r7
 400ca30:	003f0606 	br	400c64c <__ram_exceptions_end+0xfac084c0>
 400ca34:	2023883a 	mov	r17,r4
 400ca38:	003f0906 	br	400c660 <__ram_exceptions_end+0xfac084d4>
 400ca3c:	0101ffc4 	movi	r4,2047
 400ca40:	813f3a1e 	bne	r16,r4,400c72c <__ram_exceptions_end+0xfac085a0>
 400ca44:	003ec406 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400ca48:	0005883a 	mov	r2,zero
 400ca4c:	003fb106 	br	400c914 <__ram_exceptions_end+0xfac08788>
 400ca50:	0005883a 	mov	r2,zero
 400ca54:	003fbc06 	br	400c948 <__ram_exceptions_end+0xfac087bc>
 400ca58:	1c44b03a 	or	r2,r3,r17
 400ca5c:	80008e1e 	bne	r16,zero,400cc98 <__subdf3+0x7c4>
 400ca60:	1000c826 	beq	r2,zero,400cd84 <__subdf3+0x8b0>
 400ca64:	2984b03a 	or	r2,r5,r6
 400ca68:	103ebb26 	beq	r2,zero,400c558 <__ram_exceptions_end+0xfac083cc>
 400ca6c:	8989883a 	add	r4,r17,r6
 400ca70:	1945883a 	add	r2,r3,r5
 400ca74:	2447803a 	cmpltu	r3,r4,r17
 400ca78:	1887883a 	add	r3,r3,r2
 400ca7c:	1880202c 	andhi	r2,r3,128
 400ca80:	2023883a 	mov	r17,r4
 400ca84:	103f1626 	beq	r2,zero,400c6e0 <__ram_exceptions_end+0xfac08554>
 400ca88:	00bfe034 	movhi	r2,65408
 400ca8c:	10bfffc4 	addi	r2,r2,-1
 400ca90:	5021883a 	mov	r16,r10
 400ca94:	1886703a 	and	r3,r3,r2
 400ca98:	003eaf06 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400ca9c:	3825883a 	mov	r18,r7
 400caa0:	003f0f06 	br	400c6e0 <__ram_exceptions_end+0xfac08554>
 400caa4:	1c44b03a 	or	r2,r3,r17
 400caa8:	8000251e 	bne	r16,zero,400cb40 <__subdf3+0x66c>
 400caac:	1000661e 	bne	r2,zero,400cc48 <__subdf3+0x774>
 400cab0:	2990b03a 	or	r8,r5,r6
 400cab4:	40009626 	beq	r8,zero,400cd10 <__subdf3+0x83c>
 400cab8:	2807883a 	mov	r3,r5
 400cabc:	3023883a 	mov	r17,r6
 400cac0:	3825883a 	mov	r18,r7
 400cac4:	003ea406 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400cac8:	127ff804 	addi	r9,r2,-32
 400cacc:	01000804 	movi	r4,32
 400cad0:	2a52d83a 	srl	r9,r5,r9
 400cad4:	11008c26 	beq	r2,r4,400cd08 <__subdf3+0x834>
 400cad8:	01001004 	movi	r4,64
 400cadc:	2085c83a 	sub	r2,r4,r2
 400cae0:	2884983a 	sll	r2,r5,r2
 400cae4:	118cb03a 	or	r6,r2,r6
 400cae8:	300cc03a 	cmpne	r6,r6,zero
 400caec:	4992b03a 	or	r9,r9,r6
 400caf0:	0005883a 	mov	r2,zero
 400caf4:	003f1206 	br	400c740 <__ram_exceptions_end+0xfac085b4>
 400caf8:	0101ffc4 	movi	r4,2047
 400cafc:	493f9c1e 	bne	r9,r4,400c970 <__ram_exceptions_end+0xfac087e4>
 400cb00:	2807883a 	mov	r3,r5
 400cb04:	3023883a 	mov	r17,r6
 400cb08:	4821883a 	mov	r16,r9
 400cb0c:	3825883a 	mov	r18,r7
 400cb10:	003e9106 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400cb14:	80001f1e 	bne	r16,zero,400cb94 <__subdf3+0x6c0>
 400cb18:	1c48b03a 	or	r4,r3,r17
 400cb1c:	20005a26 	beq	r4,zero,400cc88 <__subdf3+0x7b4>
 400cb20:	0084303a 	nor	r2,zero,r2
 400cb24:	1000561e 	bne	r2,zero,400cc80 <__subdf3+0x7ac>
 400cb28:	89a3883a 	add	r17,r17,r6
 400cb2c:	1945883a 	add	r2,r3,r5
 400cb30:	898d803a 	cmpltu	r6,r17,r6
 400cb34:	3087883a 	add	r3,r6,r2
 400cb38:	4821883a 	mov	r16,r9
 400cb3c:	003f0506 	br	400c754 <__ram_exceptions_end+0xfac085c8>
 400cb40:	10002b1e 	bne	r2,zero,400cbf0 <__subdf3+0x71c>
 400cb44:	2984b03a 	or	r2,r5,r6
 400cb48:	10008026 	beq	r2,zero,400cd4c <__subdf3+0x878>
 400cb4c:	2807883a 	mov	r3,r5
 400cb50:	3023883a 	mov	r17,r6
 400cb54:	3825883a 	mov	r18,r7
 400cb58:	0401ffc4 	movi	r16,2047
 400cb5c:	003e7e06 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400cb60:	3809883a 	mov	r4,r7
 400cb64:	0011883a 	mov	r8,zero
 400cb68:	0005883a 	mov	r2,zero
 400cb6c:	003ee306 	br	400c6fc <__ram_exceptions_end+0xfac08570>
 400cb70:	1c62b03a 	or	r17,r3,r17
 400cb74:	8822c03a 	cmpne	r17,r17,zero
 400cb78:	0005883a 	mov	r2,zero
 400cb7c:	003f8906 	br	400c9a4 <__ram_exceptions_end+0xfac08818>
 400cb80:	3809883a 	mov	r4,r7
 400cb84:	4821883a 	mov	r16,r9
 400cb88:	0011883a 	mov	r8,zero
 400cb8c:	0005883a 	mov	r2,zero
 400cb90:	003eda06 	br	400c6fc <__ram_exceptions_end+0xfac08570>
 400cb94:	0101ffc4 	movi	r4,2047
 400cb98:	49003b26 	beq	r9,r4,400cc88 <__subdf3+0x7b4>
 400cb9c:	0085c83a 	sub	r2,zero,r2
 400cba0:	18c02034 	orhi	r3,r3,128
 400cba4:	01000e04 	movi	r4,56
 400cba8:	20806e16 	blt	r4,r2,400cd64 <__subdf3+0x890>
 400cbac:	010007c4 	movi	r4,31
 400cbb0:	20807716 	blt	r4,r2,400cd90 <__subdf3+0x8bc>
 400cbb4:	01000804 	movi	r4,32
 400cbb8:	2089c83a 	sub	r4,r4,r2
 400cbbc:	1914983a 	sll	r10,r3,r4
 400cbc0:	8890d83a 	srl	r8,r17,r2
 400cbc4:	8908983a 	sll	r4,r17,r4
 400cbc8:	1884d83a 	srl	r2,r3,r2
 400cbcc:	5222b03a 	or	r17,r10,r8
 400cbd0:	2006c03a 	cmpne	r3,r4,zero
 400cbd4:	88e2b03a 	or	r17,r17,r3
 400cbd8:	89a3883a 	add	r17,r17,r6
 400cbdc:	1145883a 	add	r2,r2,r5
 400cbe0:	898d803a 	cmpltu	r6,r17,r6
 400cbe4:	3087883a 	add	r3,r6,r2
 400cbe8:	4821883a 	mov	r16,r9
 400cbec:	003ed906 	br	400c754 <__ram_exceptions_end+0xfac085c8>
 400cbf0:	2984b03a 	or	r2,r5,r6
 400cbf4:	10004226 	beq	r2,zero,400cd00 <__subdf3+0x82c>
 400cbf8:	1808d0fa 	srli	r4,r3,3
 400cbfc:	8822d0fa 	srli	r17,r17,3
 400cc00:	1806977a 	slli	r3,r3,29
 400cc04:	2080022c 	andhi	r2,r4,8
 400cc08:	1c62b03a 	or	r17,r3,r17
 400cc0c:	10000826 	beq	r2,zero,400cc30 <__subdf3+0x75c>
 400cc10:	2812d0fa 	srli	r9,r5,3
 400cc14:	4880022c 	andhi	r2,r9,8
 400cc18:	1000051e 	bne	r2,zero,400cc30 <__subdf3+0x75c>
 400cc1c:	300cd0fa 	srli	r6,r6,3
 400cc20:	2804977a 	slli	r2,r5,29
 400cc24:	4809883a 	mov	r4,r9
 400cc28:	3825883a 	mov	r18,r7
 400cc2c:	11a2b03a 	or	r17,r2,r6
 400cc30:	8806d77a 	srli	r3,r17,29
 400cc34:	200890fa 	slli	r4,r4,3
 400cc38:	882290fa 	slli	r17,r17,3
 400cc3c:	0401ffc4 	movi	r16,2047
 400cc40:	1906b03a 	or	r3,r3,r4
 400cc44:	003e4406 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400cc48:	2984b03a 	or	r2,r5,r6
 400cc4c:	103e4226 	beq	r2,zero,400c558 <__ram_exceptions_end+0xfac083cc>
 400cc50:	8989c83a 	sub	r4,r17,r6
 400cc54:	8911803a 	cmpltu	r8,r17,r4
 400cc58:	1945c83a 	sub	r2,r3,r5
 400cc5c:	1205c83a 	sub	r2,r2,r8
 400cc60:	1200202c 	andhi	r8,r2,128
 400cc64:	403e9a26 	beq	r8,zero,400c6d0 <__ram_exceptions_end+0xfac08544>
 400cc68:	3463c83a 	sub	r17,r6,r17
 400cc6c:	28c5c83a 	sub	r2,r5,r3
 400cc70:	344d803a 	cmpltu	r6,r6,r17
 400cc74:	1187c83a 	sub	r3,r2,r6
 400cc78:	3825883a 	mov	r18,r7
 400cc7c:	003e3606 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400cc80:	0101ffc4 	movi	r4,2047
 400cc84:	493fc71e 	bne	r9,r4,400cba4 <__ram_exceptions_end+0xfac08a18>
 400cc88:	2807883a 	mov	r3,r5
 400cc8c:	3023883a 	mov	r17,r6
 400cc90:	4821883a 	mov	r16,r9
 400cc94:	003e3006 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400cc98:	10003626 	beq	r2,zero,400cd74 <__subdf3+0x8a0>
 400cc9c:	2984b03a 	or	r2,r5,r6
 400cca0:	10001726 	beq	r2,zero,400cd00 <__subdf3+0x82c>
 400cca4:	1808d0fa 	srli	r4,r3,3
 400cca8:	8822d0fa 	srli	r17,r17,3
 400ccac:	1806977a 	slli	r3,r3,29
 400ccb0:	2080022c 	andhi	r2,r4,8
 400ccb4:	1c62b03a 	or	r17,r3,r17
 400ccb8:	10000726 	beq	r2,zero,400ccd8 <__subdf3+0x804>
 400ccbc:	2812d0fa 	srli	r9,r5,3
 400ccc0:	4880022c 	andhi	r2,r9,8
 400ccc4:	1000041e 	bne	r2,zero,400ccd8 <__subdf3+0x804>
 400ccc8:	300cd0fa 	srli	r6,r6,3
 400cccc:	2804977a 	slli	r2,r5,29
 400ccd0:	4809883a 	mov	r4,r9
 400ccd4:	11a2b03a 	or	r17,r2,r6
 400ccd8:	8806d77a 	srli	r3,r17,29
 400ccdc:	200890fa 	slli	r4,r4,3
 400cce0:	882290fa 	slli	r17,r17,3
 400cce4:	3825883a 	mov	r18,r7
 400cce8:	1906b03a 	or	r3,r3,r4
 400ccec:	0401ffc4 	movi	r16,2047
 400ccf0:	003e1906 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400ccf4:	000b883a 	mov	r5,zero
 400ccf8:	0005883a 	mov	r2,zero
 400ccfc:	003e2e06 	br	400c5b8 <__ram_exceptions_end+0xfac0842c>
 400cd00:	0401ffc4 	movi	r16,2047
 400cd04:	003e1406 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400cd08:	0005883a 	mov	r2,zero
 400cd0c:	003f7506 	br	400cae4 <__ram_exceptions_end+0xfac08958>
 400cd10:	0005883a 	mov	r2,zero
 400cd14:	0009883a 	mov	r4,zero
 400cd18:	003e7806 	br	400c6fc <__ram_exceptions_end+0xfac08570>
 400cd1c:	123ff804 	addi	r8,r2,-32
 400cd20:	01000804 	movi	r4,32
 400cd24:	1a10d83a 	srl	r8,r3,r8
 400cd28:	11002526 	beq	r2,r4,400cdc0 <__subdf3+0x8ec>
 400cd2c:	01001004 	movi	r4,64
 400cd30:	2085c83a 	sub	r2,r4,r2
 400cd34:	1884983a 	sll	r2,r3,r2
 400cd38:	1444b03a 	or	r2,r2,r17
 400cd3c:	1004c03a 	cmpne	r2,r2,zero
 400cd40:	40a2b03a 	or	r17,r8,r2
 400cd44:	0005883a 	mov	r2,zero
 400cd48:	003f1606 	br	400c9a4 <__ram_exceptions_end+0xfac08818>
 400cd4c:	02000434 	movhi	r8,16
 400cd50:	0009883a 	mov	r4,zero
 400cd54:	423fffc4 	addi	r8,r8,-1
 400cd58:	00bfffc4 	movi	r2,-1
 400cd5c:	0401ffc4 	movi	r16,2047
 400cd60:	003e6606 	br	400c6fc <__ram_exceptions_end+0xfac08570>
 400cd64:	1c62b03a 	or	r17,r3,r17
 400cd68:	8822c03a 	cmpne	r17,r17,zero
 400cd6c:	0005883a 	mov	r2,zero
 400cd70:	003f9906 	br	400cbd8 <__ram_exceptions_end+0xfac08a4c>
 400cd74:	2807883a 	mov	r3,r5
 400cd78:	3023883a 	mov	r17,r6
 400cd7c:	0401ffc4 	movi	r16,2047
 400cd80:	003df506 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400cd84:	2807883a 	mov	r3,r5
 400cd88:	3023883a 	mov	r17,r6
 400cd8c:	003df206 	br	400c558 <__ram_exceptions_end+0xfac083cc>
 400cd90:	123ff804 	addi	r8,r2,-32
 400cd94:	01000804 	movi	r4,32
 400cd98:	1a10d83a 	srl	r8,r3,r8
 400cd9c:	11000a26 	beq	r2,r4,400cdc8 <__subdf3+0x8f4>
 400cda0:	01001004 	movi	r4,64
 400cda4:	2085c83a 	sub	r2,r4,r2
 400cda8:	1884983a 	sll	r2,r3,r2
 400cdac:	1444b03a 	or	r2,r2,r17
 400cdb0:	1004c03a 	cmpne	r2,r2,zero
 400cdb4:	40a2b03a 	or	r17,r8,r2
 400cdb8:	0005883a 	mov	r2,zero
 400cdbc:	003f8606 	br	400cbd8 <__ram_exceptions_end+0xfac08a4c>
 400cdc0:	0005883a 	mov	r2,zero
 400cdc4:	003fdc06 	br	400cd38 <__ram_exceptions_end+0xfac08bac>
 400cdc8:	0005883a 	mov	r2,zero
 400cdcc:	003ff706 	br	400cdac <__ram_exceptions_end+0xfac08c20>

0400cdd0 <__fixdfsi>:
 400cdd0:	280cd53a 	srli	r6,r5,20
 400cdd4:	00c00434 	movhi	r3,16
 400cdd8:	18ffffc4 	addi	r3,r3,-1
 400cddc:	3181ffcc 	andi	r6,r6,2047
 400cde0:	01c0ff84 	movi	r7,1022
 400cde4:	28c6703a 	and	r3,r5,r3
 400cde8:	280ad7fa 	srli	r5,r5,31
 400cdec:	3980120e 	bge	r7,r6,400ce38 <__fixdfsi+0x68>
 400cdf0:	00810744 	movi	r2,1053
 400cdf4:	11800c16 	blt	r2,r6,400ce28 <__fixdfsi+0x58>
 400cdf8:	00810cc4 	movi	r2,1075
 400cdfc:	1185c83a 	sub	r2,r2,r6
 400ce00:	01c007c4 	movi	r7,31
 400ce04:	18c00434 	orhi	r3,r3,16
 400ce08:	38800d16 	blt	r7,r2,400ce40 <__fixdfsi+0x70>
 400ce0c:	31befb44 	addi	r6,r6,-1043
 400ce10:	2084d83a 	srl	r2,r4,r2
 400ce14:	1986983a 	sll	r3,r3,r6
 400ce18:	1884b03a 	or	r2,r3,r2
 400ce1c:	28000726 	beq	r5,zero,400ce3c <__fixdfsi+0x6c>
 400ce20:	0085c83a 	sub	r2,zero,r2
 400ce24:	f800283a 	ret
 400ce28:	00a00034 	movhi	r2,32768
 400ce2c:	10bfffc4 	addi	r2,r2,-1
 400ce30:	2885883a 	add	r2,r5,r2
 400ce34:	f800283a 	ret
 400ce38:	0005883a 	mov	r2,zero
 400ce3c:	f800283a 	ret
 400ce40:	008104c4 	movi	r2,1043
 400ce44:	1185c83a 	sub	r2,r2,r6
 400ce48:	1884d83a 	srl	r2,r3,r2
 400ce4c:	003ff306 	br	400ce1c <__ram_exceptions_end+0xfac08c90>

0400ce50 <__floatsidf>:
 400ce50:	defffd04 	addi	sp,sp,-12
 400ce54:	dfc00215 	stw	ra,8(sp)
 400ce58:	dc400115 	stw	r17,4(sp)
 400ce5c:	dc000015 	stw	r16,0(sp)
 400ce60:	20002b26 	beq	r4,zero,400cf10 <__floatsidf+0xc0>
 400ce64:	2023883a 	mov	r17,r4
 400ce68:	2020d7fa 	srli	r16,r4,31
 400ce6c:	20002d16 	blt	r4,zero,400cf24 <__floatsidf+0xd4>
 400ce70:	8809883a 	mov	r4,r17
 400ce74:	400cfd40 	call	400cfd4 <__clzsi2>
 400ce78:	01410784 	movi	r5,1054
 400ce7c:	288bc83a 	sub	r5,r5,r2
 400ce80:	01010cc4 	movi	r4,1075
 400ce84:	2149c83a 	sub	r4,r4,r5
 400ce88:	00c007c4 	movi	r3,31
 400ce8c:	1900160e 	bge	r3,r4,400cee8 <__floatsidf+0x98>
 400ce90:	00c104c4 	movi	r3,1043
 400ce94:	1947c83a 	sub	r3,r3,r5
 400ce98:	88c6983a 	sll	r3,r17,r3
 400ce9c:	00800434 	movhi	r2,16
 400cea0:	10bfffc4 	addi	r2,r2,-1
 400cea4:	1886703a 	and	r3,r3,r2
 400cea8:	2941ffcc 	andi	r5,r5,2047
 400ceac:	800d883a 	mov	r6,r16
 400ceb0:	0005883a 	mov	r2,zero
 400ceb4:	280a953a 	slli	r5,r5,20
 400ceb8:	31803fcc 	andi	r6,r6,255
 400cebc:	01000434 	movhi	r4,16
 400cec0:	300c97fa 	slli	r6,r6,31
 400cec4:	213fffc4 	addi	r4,r4,-1
 400cec8:	1906703a 	and	r3,r3,r4
 400cecc:	1946b03a 	or	r3,r3,r5
 400ced0:	1986b03a 	or	r3,r3,r6
 400ced4:	dfc00217 	ldw	ra,8(sp)
 400ced8:	dc400117 	ldw	r17,4(sp)
 400cedc:	dc000017 	ldw	r16,0(sp)
 400cee0:	dec00304 	addi	sp,sp,12
 400cee4:	f800283a 	ret
 400cee8:	00c002c4 	movi	r3,11
 400ceec:	1887c83a 	sub	r3,r3,r2
 400cef0:	88c6d83a 	srl	r3,r17,r3
 400cef4:	8904983a 	sll	r2,r17,r4
 400cef8:	01000434 	movhi	r4,16
 400cefc:	213fffc4 	addi	r4,r4,-1
 400cf00:	2941ffcc 	andi	r5,r5,2047
 400cf04:	1906703a 	and	r3,r3,r4
 400cf08:	800d883a 	mov	r6,r16
 400cf0c:	003fe906 	br	400ceb4 <__ram_exceptions_end+0xfac08d28>
 400cf10:	000d883a 	mov	r6,zero
 400cf14:	000b883a 	mov	r5,zero
 400cf18:	0007883a 	mov	r3,zero
 400cf1c:	0005883a 	mov	r2,zero
 400cf20:	003fe406 	br	400ceb4 <__ram_exceptions_end+0xfac08d28>
 400cf24:	0123c83a 	sub	r17,zero,r4
 400cf28:	003fd106 	br	400ce70 <__ram_exceptions_end+0xfac08ce4>

0400cf2c <__floatunsidf>:
 400cf2c:	defffe04 	addi	sp,sp,-8
 400cf30:	dc000015 	stw	r16,0(sp)
 400cf34:	dfc00115 	stw	ra,4(sp)
 400cf38:	2021883a 	mov	r16,r4
 400cf3c:	20002226 	beq	r4,zero,400cfc8 <__floatunsidf+0x9c>
 400cf40:	400cfd40 	call	400cfd4 <__clzsi2>
 400cf44:	01010784 	movi	r4,1054
 400cf48:	2089c83a 	sub	r4,r4,r2
 400cf4c:	01810cc4 	movi	r6,1075
 400cf50:	310dc83a 	sub	r6,r6,r4
 400cf54:	00c007c4 	movi	r3,31
 400cf58:	1980120e 	bge	r3,r6,400cfa4 <__floatunsidf+0x78>
 400cf5c:	00c104c4 	movi	r3,1043
 400cf60:	1907c83a 	sub	r3,r3,r4
 400cf64:	80ca983a 	sll	r5,r16,r3
 400cf68:	00800434 	movhi	r2,16
 400cf6c:	10bfffc4 	addi	r2,r2,-1
 400cf70:	2101ffcc 	andi	r4,r4,2047
 400cf74:	0021883a 	mov	r16,zero
 400cf78:	288a703a 	and	r5,r5,r2
 400cf7c:	2008953a 	slli	r4,r4,20
 400cf80:	00c00434 	movhi	r3,16
 400cf84:	18ffffc4 	addi	r3,r3,-1
 400cf88:	28c6703a 	and	r3,r5,r3
 400cf8c:	8005883a 	mov	r2,r16
 400cf90:	1906b03a 	or	r3,r3,r4
 400cf94:	dfc00117 	ldw	ra,4(sp)
 400cf98:	dc000017 	ldw	r16,0(sp)
 400cf9c:	dec00204 	addi	sp,sp,8
 400cfa0:	f800283a 	ret
 400cfa4:	00c002c4 	movi	r3,11
 400cfa8:	188bc83a 	sub	r5,r3,r2
 400cfac:	814ad83a 	srl	r5,r16,r5
 400cfb0:	00c00434 	movhi	r3,16
 400cfb4:	18ffffc4 	addi	r3,r3,-1
 400cfb8:	81a0983a 	sll	r16,r16,r6
 400cfbc:	2101ffcc 	andi	r4,r4,2047
 400cfc0:	28ca703a 	and	r5,r5,r3
 400cfc4:	003fed06 	br	400cf7c <__ram_exceptions_end+0xfac08df0>
 400cfc8:	0009883a 	mov	r4,zero
 400cfcc:	000b883a 	mov	r5,zero
 400cfd0:	003fea06 	br	400cf7c <__ram_exceptions_end+0xfac08df0>

0400cfd4 <__clzsi2>:
 400cfd4:	00bfffd4 	movui	r2,65535
 400cfd8:	11000536 	bltu	r2,r4,400cff0 <__clzsi2+0x1c>
 400cfdc:	00803fc4 	movi	r2,255
 400cfe0:	11000f36 	bltu	r2,r4,400d020 <__clzsi2+0x4c>
 400cfe4:	00800804 	movi	r2,32
 400cfe8:	0007883a 	mov	r3,zero
 400cfec:	00000506 	br	400d004 <__clzsi2+0x30>
 400cff0:	00804034 	movhi	r2,256
 400cff4:	10bfffc4 	addi	r2,r2,-1
 400cff8:	11000c2e 	bgeu	r2,r4,400d02c <__clzsi2+0x58>
 400cffc:	00800204 	movi	r2,8
 400d000:	00c00604 	movi	r3,24
 400d004:	20c8d83a 	srl	r4,r4,r3
 400d008:	00c10074 	movhi	r3,1025
 400d00c:	18ff1404 	addi	r3,r3,-944
 400d010:	1909883a 	add	r4,r3,r4
 400d014:	20c00003 	ldbu	r3,0(r4)
 400d018:	10c5c83a 	sub	r2,r2,r3
 400d01c:	f800283a 	ret
 400d020:	00800604 	movi	r2,24
 400d024:	00c00204 	movi	r3,8
 400d028:	003ff606 	br	400d004 <__ram_exceptions_end+0xfac08e78>
 400d02c:	00800404 	movi	r2,16
 400d030:	1007883a 	mov	r3,r2
 400d034:	003ff306 	br	400d004 <__ram_exceptions_end+0xfac08e78>

0400d038 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 400d038:	d0a33e17 	ldw	r2,-29448(gp)
 400d03c:	10001a26 	beq	r2,zero,400d0a8 <alt_alarm_start+0x70>
  {
    if (alarm)
 400d040:	20001b26 	beq	r4,zero,400d0b0 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
 400d044:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
 400d048:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d04c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d050:	00bfff84 	movi	r2,-2
 400d054:	1884703a 	and	r2,r3,r2
 400d058:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400d05c:	d0a33d17 	ldw	r2,-29452(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 400d060:	11800044 	addi	r6,r2,1
 400d064:	314b883a 	add	r5,r6,r5
 400d068:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400d06c:	28800b36 	bltu	r5,r2,400d09c <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
 400d070:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400d074:	d0a00e04 	addi	r2,gp,-32712
 400d078:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
 400d07c:	d0a00e17 	ldw	r2,-32712(gp)
 400d080:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 400d084:	d0a00e17 	ldw	r2,-32712(gp)
  list->next           = entry;
 400d088:	d1200e15 	stw	r4,-32712(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 400d08c:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d090:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
 400d094:	0005883a 	mov	r2,zero
 400d098:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
 400d09c:	00800044 	movi	r2,1
 400d0a0:	20800405 	stb	r2,16(r4)
 400d0a4:	003ff306 	br	400d074 <__ram_exceptions_end+0xfac08ee8>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
 400d0a8:	00bfde84 	movi	r2,-134
 400d0ac:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
 400d0b0:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
 400d0b4:	f800283a 	ret

0400d0b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400d0b8:	defffd04 	addi	sp,sp,-12
 400d0bc:	dfc00215 	stw	ra,8(sp)
 400d0c0:	dc400115 	stw	r17,4(sp)
 400d0c4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400d0c8:	20001f16 	blt	r4,zero,400d148 <close+0x90>
 400d0cc:	20c00324 	muli	r3,r4,12
 400d0d0:	00810074 	movhi	r2,1025
 400d0d4:	10819404 	addi	r2,r2,1616
 400d0d8:	1885883a 	add	r2,r3,r2
 400d0dc:	2021883a 	mov	r16,r4

  if (fd)
 400d0e0:	10001926 	beq	r2,zero,400d148 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400d0e4:	10c00017 	ldw	r3,0(r2)
 400d0e8:	18c00417 	ldw	r3,16(r3)
 400d0ec:	18000c26 	beq	r3,zero,400d120 <close+0x68>
 400d0f0:	1009883a 	mov	r4,r2
 400d0f4:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400d0f8:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400d0fc:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400d100:	400d6bc0 	call	400d6bc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 400d104:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
 400d108:	88000816 	blt	r17,zero,400d12c <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 400d10c:	dfc00217 	ldw	ra,8(sp)
 400d110:	dc400117 	ldw	r17,4(sp)
 400d114:	dc000017 	ldw	r16,0(sp)
 400d118:	dec00304 	addi	sp,sp,12
 400d11c:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400d120:	400d6bc0 	call	400d6bc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 400d124:	0005883a 	mov	r2,zero
 400d128:	003ff806 	br	400d10c <__ram_exceptions_end+0xfac08f80>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 400d12c:	d0a00c17 	ldw	r2,-32720(gp)
 400d130:	10000c26 	beq	r2,zero,400d164 <close+0xac>
 400d134:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
 400d138:	0463c83a 	sub	r17,zero,r17
 400d13c:	14400015 	stw	r17,0(r2)
      return -1;
 400d140:	00bfffc4 	movi	r2,-1
 400d144:	003ff106 	br	400d10c <__ram_exceptions_end+0xfac08f80>
 400d148:	d0a00c17 	ldw	r2,-32720(gp)
 400d14c:	10000726 	beq	r2,zero,400d16c <close+0xb4>
 400d150:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d154:	00c01444 	movi	r3,81
 400d158:	10c00015 	stw	r3,0(r2)
    return -1;
 400d15c:	00bfffc4 	movi	r2,-1
 400d160:	003fea06 	br	400d10c <__ram_exceptions_end+0xfac08f80>
 400d164:	d0a33904 	addi	r2,gp,-29468
 400d168:	003ff306 	br	400d138 <__ram_exceptions_end+0xfac08fac>
 400d16c:	d0a33904 	addi	r2,gp,-29468
 400d170:	003ff806 	br	400d154 <__ram_exceptions_end+0xfac08fc8>

0400d174 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 400d174:	3005883a 	mov	r2,r6
 400d178:	f800283a 	ret

0400d17c <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d17c:	20000d16 	blt	r4,zero,400d1b4 <fstat+0x38>
 400d180:	21000324 	muli	r4,r4,12
 400d184:	00810074 	movhi	r2,1025
 400d188:	10819404 	addi	r2,r2,1616
 400d18c:	2089883a 	add	r4,r4,r2
  
  if (fd)
 400d190:	20000826 	beq	r4,zero,400d1b4 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400d194:	20800017 	ldw	r2,0(r4)
 400d198:	10800817 	ldw	r2,32(r2)
 400d19c:	10000126 	beq	r2,zero,400d1a4 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
 400d1a0:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400d1a4:	00880004 	movi	r2,8192
 400d1a8:	28800115 	stw	r2,4(r5)
      return 0;
 400d1ac:	0005883a 	mov	r2,zero
 400d1b0:	f800283a 	ret
 400d1b4:	d0a00c17 	ldw	r2,-32720(gp)
 400d1b8:	10000926 	beq	r2,zero,400d1e0 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400d1bc:	deffff04 	addi	sp,sp,-4
 400d1c0:	dfc00015 	stw	ra,0(sp)
 400d1c4:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d1c8:	00c01444 	movi	r3,81
 400d1cc:	10c00015 	stw	r3,0(r2)
    return -1;
 400d1d0:	00bfffc4 	movi	r2,-1
  }
}
 400d1d4:	dfc00017 	ldw	ra,0(sp)
 400d1d8:	dec00104 	addi	sp,sp,4
 400d1dc:	f800283a 	ret
 400d1e0:	d0a33904 	addi	r2,gp,-29468
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d1e4:	00c01444 	movi	r3,81
 400d1e8:	10c00015 	stw	r3,0(r2)
    return -1;
 400d1ec:	00bfffc4 	movi	r2,-1
  }
}
 400d1f0:	f800283a 	ret

0400d1f4 <alt_getchar>:
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
 400d1f4:	d0a00217 	ldw	r2,-32760(gp)
 400d1f8:	11000117 	ldw	r4,4(r2)
 400d1fc:	400f06c1 	jmpi	400f06c <getc>

0400d200 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400d200:	defff004 	addi	sp,sp,-64
 400d204:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d208:	20001316 	blt	r4,zero,400d258 <isatty+0x58>
 400d20c:	20800324 	muli	r2,r4,12
 400d210:	00c10074 	movhi	r3,1025
 400d214:	18c19404 	addi	r3,r3,1616
 400d218:	10c5883a 	add	r2,r2,r3
  
  if (fd)
 400d21c:	10000e26 	beq	r2,zero,400d258 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400d220:	10800017 	ldw	r2,0(r2)
 400d224:	10800817 	ldw	r2,32(r2)
 400d228:	10000726 	beq	r2,zero,400d248 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400d22c:	d80b883a 	mov	r5,sp
 400d230:	400d17c0 	call	400d17c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400d234:	d8800117 	ldw	r2,4(sp)
 400d238:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 400d23c:	dfc00f17 	ldw	ra,60(sp)
 400d240:	dec01004 	addi	sp,sp,64
 400d244:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
 400d248:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 400d24c:	dfc00f17 	ldw	ra,60(sp)
 400d250:	dec01004 	addi	sp,sp,64
 400d254:	f800283a 	ret
 400d258:	d0a00c17 	ldw	r2,-32720(gp)
 400d25c:	10000726 	beq	r2,zero,400d27c <isatty+0x7c>
 400d260:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d264:	00c01444 	movi	r3,81
 400d268:	10c00015 	stw	r3,0(r2)
    return 0;
 400d26c:	0005883a 	mov	r2,zero
  }
}
 400d270:	dfc00f17 	ldw	ra,60(sp)
 400d274:	dec01004 	addi	sp,sp,64
 400d278:	f800283a 	ret
 400d27c:	d0a33904 	addi	r2,gp,-29468
 400d280:	003ff806 	br	400d264 <__ram_exceptions_end+0xfac090d8>

0400d284 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400d284:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 400d288:	01810074 	movhi	r6,1025
 400d28c:	01c10074 	movhi	r7,1025
 400d290:	dfc00015 	stw	ra,0(sp)
 400d294:	31bf6b04 	addi	r6,r6,-596
 400d298:	39c27a04 	addi	r7,r7,2536
 400d29c:	31c01026 	beq	r6,r7,400d2e0 <alt_load+0x5c>
  {
    while( to != end )
 400d2a0:	00810074 	movhi	r2,1025
 400d2a4:	10827a04 	addi	r2,r2,2536
 400d2a8:	30800d26 	beq	r6,r2,400d2e0 <alt_load+0x5c>
 400d2ac:	30c00104 	addi	r3,r6,4
 400d2b0:	10c7c83a 	sub	r3,r2,r3
 400d2b4:	1806d0ba 	srli	r3,r3,2
 400d2b8:	0005883a 	mov	r2,zero
 400d2bc:	18c00044 	addi	r3,r3,1
 400d2c0:	18c7883a 	add	r3,r3,r3
 400d2c4:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 400d2c8:	11c9883a 	add	r4,r2,r7
 400d2cc:	21400017 	ldw	r5,0(r4)
 400d2d0:	1189883a 	add	r4,r2,r6
 400d2d4:	10800104 	addi	r2,r2,4
 400d2d8:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400d2dc:	10fffa1e 	bne	r2,r3,400d2c8 <__ram_exceptions_end+0xfac0913c>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 400d2e0:	01825034 	movhi	r6,2368
 400d2e4:	01c10034 	movhi	r7,1024
 400d2e8:	31900804 	addi	r6,r6,16416
 400d2ec:	39c00004 	addi	r7,r7,0
 400d2f0:	31c01026 	beq	r6,r7,400d334 <alt_load+0xb0>
  {
    while( to != end )
 400d2f4:	00825034 	movhi	r2,2368
 400d2f8:	10906304 	addi	r2,r2,16780
 400d2fc:	30800d26 	beq	r6,r2,400d334 <alt_load+0xb0>
 400d300:	30c00104 	addi	r3,r6,4
 400d304:	10c7c83a 	sub	r3,r2,r3
 400d308:	1806d0ba 	srli	r3,r3,2
 400d30c:	0005883a 	mov	r2,zero
 400d310:	18c00044 	addi	r3,r3,1
 400d314:	18c7883a 	add	r3,r3,r3
 400d318:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 400d31c:	11c9883a 	add	r4,r2,r7
 400d320:	21400017 	ldw	r5,0(r4)
 400d324:	1189883a 	add	r4,r2,r6
 400d328:	10800104 	addi	r2,r2,4
 400d32c:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400d330:	18bffa1e 	bne	r3,r2,400d31c <__ram_exceptions_end+0xfac09190>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 400d334:	01810074 	movhi	r6,1025
 400d338:	01c10074 	movhi	r7,1025
 400d33c:	31bdb904 	addi	r6,r6,-2332
 400d340:	39fdb904 	addi	r7,r7,-2332
 400d344:	31c01026 	beq	r6,r7,400d388 <alt_load+0x104>
  {
    while( to != end )
 400d348:	00810074 	movhi	r2,1025
 400d34c:	10bf6b04 	addi	r2,r2,-596
 400d350:	30800d26 	beq	r6,r2,400d388 <alt_load+0x104>
 400d354:	30c00104 	addi	r3,r6,4
 400d358:	10c7c83a 	sub	r3,r2,r3
 400d35c:	1806d0ba 	srli	r3,r3,2
 400d360:	0005883a 	mov	r2,zero
 400d364:	18c00044 	addi	r3,r3,1
 400d368:	18c7883a 	add	r3,r3,r3
 400d36c:	18c7883a 	add	r3,r3,r3
    {
      *to++ = *from++;
 400d370:	11c9883a 	add	r4,r2,r7
 400d374:	21400017 	ldw	r5,0(r4)
 400d378:	1189883a 	add	r4,r2,r6
 400d37c:	10800104 	addi	r2,r2,4
 400d380:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400d384:	10fffa1e 	bne	r2,r3,400d370 <__ram_exceptions_end+0xfac091e4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400d388:	400e9840 	call	400e984 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 400d38c:	dfc00017 	ldw	ra,0(sp)
 400d390:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 400d394:	400eae41 	jmpi	400eae4 <alt_icache_flush_all>

0400d398 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400d398:	defffe04 	addi	sp,sp,-8
 400d39c:	dfc00115 	stw	ra,4(sp)
 400d3a0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d3a4:	20000e16 	blt	r4,zero,400d3e0 <lseek+0x48>
 400d3a8:	21000324 	muli	r4,r4,12
 400d3ac:	00810074 	movhi	r2,1025
 400d3b0:	10819404 	addi	r2,r2,1616
 400d3b4:	2089883a 	add	r4,r4,r2
  
  if (fd) 
 400d3b8:	20000926 	beq	r4,zero,400d3e0 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400d3bc:	20800017 	ldw	r2,0(r4)
 400d3c0:	10800717 	ldw	r2,28(r2)
 400d3c4:	10000d26 	beq	r2,zero,400d3fc <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400d3c8:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
 400d3cc:	10000f16 	blt	r2,zero,400d40c <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
 400d3d0:	dfc00117 	ldw	ra,4(sp)
 400d3d4:	dc000017 	ldw	r16,0(sp)
 400d3d8:	dec00204 	addi	sp,sp,8
 400d3dc:	f800283a 	ret
 400d3e0:	04001444 	movi	r16,81
 400d3e4:	d0a00c17 	ldw	r2,-32720(gp)
 400d3e8:	10000626 	beq	r2,zero,400d404 <lseek+0x6c>
 400d3ec:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
 400d3f0:	14000015 	stw	r16,0(r2)
    rc = -1;
 400d3f4:	00bfffc4 	movi	r2,-1
  }

  return rc;
 400d3f8:	003ff506 	br	400d3d0 <__ram_exceptions_end+0xfac09244>
 400d3fc:	04002184 	movi	r16,134
 400d400:	003ff806 	br	400d3e4 <__ram_exceptions_end+0xfac09258>
 400d404:	d0a33904 	addi	r2,gp,-29468
 400d408:	003ff906 	br	400d3f0 <__ram_exceptions_end+0xfac09264>
 400d40c:	00a1c83a 	sub	r16,zero,r2
 400d410:	003ff406 	br	400d3e4 <__ram_exceptions_end+0xfac09258>

0400d414 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400d414:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400d418:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400d41c:	dfc00115 	stw	ra,4(sp)
 400d420:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400d424:	400d9180 	call	400d918 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400d428:	400d9380 	call	400d938 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400d42c:	01810074 	movhi	r6,1025
 400d430:	31bf5704 	addi	r6,r6,-676
 400d434:	300b883a 	mov	r5,r6
 400d438:	3009883a 	mov	r4,r6
 400d43c:	400eb640 	call	400eb64 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400d440:	d1a33a17 	ldw	r6,-29464(gp)
 400d444:	d1633b17 	ldw	r5,-29460(gp)
 400d448:	d1233c17 	ldw	r4,-29456(gp)
 400d44c:	40001f40 	call	40001f4 <main>
  close(STDOUT_FILENO);
 400d450:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400d454:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
 400d458:	400d0b80 	call	400d0b8 <close>
  exit (result);
 400d45c:	8009883a 	mov	r4,r16
 400d460:	400efc40 	call	400efc4 <exit>

0400d464 <__malloc_lock>:
 400d464:	f800283a 	ret

0400d468 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400d468:	f800283a 	ret

0400d46c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 400d46c:	defff304 	addi	sp,sp,-52
 400d470:	dc000015 	stw	r16,0(sp)
 400d474:	2021883a 	mov	r16,r4
 400d478:	dfc00915 	stw	ra,36(sp)
 400d47c:	df000815 	stw	fp,32(sp)
 400d480:	ddc00715 	stw	r23,28(sp)
 400d484:	dd800615 	stw	r22,24(sp)
 400d488:	dd400515 	stw	r21,20(sp)
 400d48c:	dd000415 	stw	r20,16(sp)
 400d490:	dcc00315 	stw	r19,12(sp)
 400d494:	dc800215 	stw	r18,8(sp)
 400d498:	dc400115 	stw	r17,4(sp)
 400d49c:	d9400a15 	stw	r5,40(sp)
 400d4a0:	d9800b15 	stw	r6,44(sp)
 400d4a4:	d9c00c15 	stw	r7,48(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 400d4a8:	04400944 	movi	r17,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
 400d4ac:	dcc00a04 	addi	r19,sp,40
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 400d4b0:	054018c4 	movi	r21,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 400d4b4:	05801e04 	movi	r22,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 400d4b8:	048003c4 	movi	r18,15
                        if (digit <= 9)
 400d4bc:	05000244 	movi	r20,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 400d4c0:	81000007 	ldb	r4,0(r16)
 400d4c4:	20000526 	beq	r4,zero,400d4dc <alt_printf+0x70>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 400d4c8:	24401026 	beq	r4,r17,400d50c <alt_printf+0xa0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 400d4cc:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
 400d4d0:	400d5e80 	call	400d5e8 <alt_putchar>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 400d4d4:	81000007 	ldb	r4,0(r16)
 400d4d8:	203ffb1e 	bne	r4,zero,400d4c8 <__ram_exceptions_end+0xfac0933c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 400d4dc:	dfc00917 	ldw	ra,36(sp)
 400d4e0:	df000817 	ldw	fp,32(sp)
 400d4e4:	ddc00717 	ldw	r23,28(sp)
 400d4e8:	dd800617 	ldw	r22,24(sp)
 400d4ec:	dd400517 	ldw	r21,20(sp)
 400d4f0:	dd000417 	ldw	r20,16(sp)
 400d4f4:	dcc00317 	ldw	r19,12(sp)
 400d4f8:	dc800217 	ldw	r18,8(sp)
 400d4fc:	dc400117 	ldw	r17,4(sp)
 400d500:	dc000017 	ldw	r16,0(sp)
 400d504:	dec00d04 	addi	sp,sp,52
 400d508:	f800283a 	ret
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 400d50c:	80800047 	ldb	r2,1(r16)
 400d510:	84000084 	addi	r16,r16,2
 400d514:	103ff126 	beq	r2,zero,400d4dc <__ram_exceptions_end+0xfac09350>
            {
                if (c == '%')
 400d518:	14402926 	beq	r2,r17,400d5c0 <alt_printf+0x154>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 400d51c:	15402b26 	beq	r2,r21,400d5cc <alt_printf+0x160>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 400d520:	15800b26 	beq	r2,r22,400d550 <alt_printf+0xe4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 400d524:	00c01cc4 	movi	r3,115
 400d528:	10ffe51e 	bne	r2,r3,400d4c0 <__ram_exceptions_end+0xfac09334>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 400d52c:	9f000017 	ldw	fp,0(r19)
 400d530:	9cc00104 	addi	r19,r19,4

                    while(*s)
 400d534:	e1000007 	ldb	r4,0(fp)
 400d538:	203fe126 	beq	r4,zero,400d4c0 <__ram_exceptions_end+0xfac09334>
                      alt_putchar(*s++);
 400d53c:	e7000044 	addi	fp,fp,1
 400d540:	400d5e80 	call	400d5e8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 400d544:	e1000007 	ldb	r4,0(fp)
 400d548:	203ffc1e 	bne	r4,zero,400d53c <__ram_exceptions_end+0xfac093b0>
 400d54c:	003fdc06 	br	400d4c0 <__ram_exceptions_end+0xfac09334>
                    alt_putchar(v);
                }
                else if (c == 'x')
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 400d550:	9dc00017 	ldw	r23,0(r19)
 400d554:	9cc00104 	addi	r19,r19,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 400d558:	b8002026 	beq	r23,zero,400d5dc <alt_printf+0x170>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 400d55c:	b8bc002c 	andhi	r2,r23,61440
 400d560:	07000704 	movi	fp,28
 400d564:	1000101e 	bne	r2,zero,400d5a8 <alt_printf+0x13c>
                        digit_shift -= 4;
 400d568:	e73fff04 	addi	fp,fp,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 400d56c:	9704983a 	sll	r2,r18,fp
 400d570:	15c4703a 	and	r2,r2,r23
 400d574:	103ffc26 	beq	r2,zero,400d568 <__ram_exceptions_end+0xfac093dc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 400d578:	e03fd116 	blt	fp,zero,400d4c0 <__ram_exceptions_end+0xfac09334>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 400d57c:	9708983a 	sll	r4,r18,fp
 400d580:	25c8703a 	and	r4,r4,r23
 400d584:	2708d83a 	srl	r4,r4,fp
                        if (digit <= 9)
 400d588:	a1000b36 	bltu	r20,r4,400d5b8 <alt_printf+0x14c>
                            c = '0' + digit;
 400d58c:	21000c04 	addi	r4,r4,48
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
 400d590:	21003fcc 	andi	r4,r4,255
 400d594:	2100201c 	xori	r4,r4,128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 400d598:	e73fff04 	addi	fp,fp,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
 400d59c:	213fe004 	addi	r4,r4,-128
 400d5a0:	400d5e80 	call	400d5e8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 400d5a4:	e03fc616 	blt	fp,zero,400d4c0 <__ram_exceptions_end+0xfac09334>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 400d5a8:	9708983a 	sll	r4,r18,fp
 400d5ac:	25c8703a 	and	r4,r4,r23
 400d5b0:	2708d83a 	srl	r4,r4,fp
                        if (digit <= 9)
 400d5b4:	a13ff52e 	bgeu	r20,r4,400d58c <__ram_exceptions_end+0xfac09400>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
 400d5b8:	210015c4 	addi	r4,r4,87
 400d5bc:	003ff406 	br	400d590 <__ram_exceptions_end+0xfac09404>
            if ((c = *w++) != 0)
            {
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 400d5c0:	8809883a 	mov	r4,r17
 400d5c4:	400d5e80 	call	400d5e8 <alt_putchar>
 400d5c8:	003fbd06 	br	400d4c0 <__ram_exceptions_end+0xfac09334>
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 400d5cc:	99000017 	ldw	r4,0(r19)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 400d5d0:	9cc00104 	addi	r19,r19,4
                    alt_putchar(v);
 400d5d4:	400d5e80 	call	400d5e8 <alt_putchar>
 400d5d8:	003fb906 	br	400d4c0 <__ram_exceptions_end+0xfac09334>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
 400d5dc:	01000c04 	movi	r4,48
 400d5e0:	400d5e80 	call	400d5e8 <alt_putchar>
                        continue;
 400d5e4:	003fb606 	br	400d4c0 <__ram_exceptions_end+0xfac09334>

0400d5e8 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 400d5e8:	d0a00217 	ldw	r2,-32760(gp)
 400d5ec:	11400217 	ldw	r5,8(r2)
 400d5f0:	400f2101 	jmpi	400f210 <putc>

0400d5f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400d5f4:	defffe04 	addi	sp,sp,-8
 400d5f8:	dfc00115 	stw	ra,4(sp)
 400d5fc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d600:	20002116 	blt	r4,zero,400d688 <read+0x94>
 400d604:	21000324 	muli	r4,r4,12
 400d608:	00810074 	movhi	r2,1025
 400d60c:	10819404 	addi	r2,r2,1616
 400d610:	2089883a 	add	r4,r4,r2
  
  if (fd)
 400d614:	20001c26 	beq	r4,zero,400d688 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400d618:	20800217 	ldw	r2,8(r4)
 400d61c:	00c00044 	movi	r3,1
 400d620:	108000cc 	andi	r2,r2,3
 400d624:	10c00a26 	beq	r2,r3,400d650 <read+0x5c>
        (fd->dev->read))
 400d628:	20800017 	ldw	r2,0(r4)
 400d62c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400d630:	10000726 	beq	r2,zero,400d650 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400d634:	103ee83a 	callr	r2
 400d638:	1021883a 	mov	r16,r2
 400d63c:	10000b16 	blt	r2,zero,400d66c <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 400d640:	dfc00117 	ldw	ra,4(sp)
 400d644:	dc000017 	ldw	r16,0(sp)
 400d648:	dec00204 	addi	sp,sp,8
 400d64c:	f800283a 	ret
 400d650:	d0a00c17 	ldw	r2,-32720(gp)
 400d654:	10001326 	beq	r2,zero,400d6a4 <read+0xb0>
 400d658:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
 400d65c:	00c00344 	movi	r3,13
 400d660:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 400d664:	00bfffc4 	movi	r2,-1
 400d668:	003ff506 	br	400d640 <__ram_exceptions_end+0xfac094b4>
 400d66c:	d0a00c17 	ldw	r2,-32720(gp)
 400d670:	10000e26 	beq	r2,zero,400d6ac <read+0xb8>
 400d674:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
 400d678:	0421c83a 	sub	r16,zero,r16
 400d67c:	14000015 	stw	r16,0(r2)
          return -1;
 400d680:	00bfffc4 	movi	r2,-1
 400d684:	003fee06 	br	400d640 <__ram_exceptions_end+0xfac094b4>
 400d688:	d0a00c17 	ldw	r2,-32720(gp)
 400d68c:	10000926 	beq	r2,zero,400d6b4 <read+0xc0>
 400d690:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400d694:	00c01444 	movi	r3,81
 400d698:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 400d69c:	00bfffc4 	movi	r2,-1
 400d6a0:	003fe706 	br	400d640 <__ram_exceptions_end+0xfac094b4>
 400d6a4:	d0a33904 	addi	r2,gp,-29468
 400d6a8:	003fec06 	br	400d65c <__ram_exceptions_end+0xfac094d0>
 400d6ac:	d0a33904 	addi	r2,gp,-29468
 400d6b0:	003ff106 	br	400d678 <__ram_exceptions_end+0xfac094ec>
 400d6b4:	d0a33904 	addi	r2,gp,-29468
 400d6b8:	003ff606 	br	400d694 <__ram_exceptions_end+0xfac09508>

0400d6bc <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
 400d6bc:	00800084 	movi	r2,2
 400d6c0:	1100060e 	bge	r2,r4,400d6dc <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
 400d6c4:	21000324 	muli	r4,r4,12
 400d6c8:	00810074 	movhi	r2,1025
 400d6cc:	10819404 	addi	r2,r2,1616
 400d6d0:	1109883a 	add	r4,r2,r4
 400d6d4:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
 400d6d8:	20000015 	stw	zero,0(r4)
 400d6dc:	f800283a 	ret

0400d6e0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d6e0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d6e4:	00bfff84 	movi	r2,-2
 400d6e8:	2884703a 	and	r2,r5,r2
 400d6ec:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400d6f0:	d0a00d17 	ldw	r2,-32716(gp)
 400d6f4:	00ffff04 	movi	r3,-4
 400d6f8:	108000c4 	addi	r2,r2,3
 400d6fc:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400d700:	00c20034 	movhi	r3,2048
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400d704:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400d708:	1109883a 	add	r4,r2,r4
 400d70c:	18c00004 	addi	r3,r3,0
 400d710:	19000336 	bltu	r3,r4,400d720 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 400d714:	d1200d15 	stw	r4,-32716(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d718:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 400d71c:	f800283a 	ret
 400d720:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400d724:	00bfffc4 	movi	r2,-1
 400d728:	f800283a 	ret

0400d72c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d72c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d730:	00bfff84 	movi	r2,-2
 400d734:	1884703a 	and	r2,r3,r2
 400d738:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400d73c:	21400117 	ldw	r5,4(r4)
 400d740:	20800017 	ldw	r2,0(r4)
 400d744:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
 400d748:	21400117 	ldw	r5,4(r4)
 400d74c:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400d750:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
 400d754:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d758:	1801703a 	wrctl	status,r3
 400d75c:	f800283a 	ret

0400d760 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400d760:	d0a33d17 	ldw	r2,-29452(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400d764:	defffa04 	addi	sp,sp,-24
 400d768:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400d76c:	d4200e17 	ldw	r16,-32712(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400d770:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400d774:	dc800215 	stw	r18,8(sp)
 400d778:	dfc00515 	stw	ra,20(sp)
 400d77c:	dd000415 	stw	r20,16(sp)
 400d780:	dcc00315 	stw	r19,12(sp)
 400d784:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400d788:	d4a00e04 	addi	r18,gp,-32712

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400d78c:	d0a33d15 	stw	r2,-29452(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400d790:	84801126 	beq	r16,r18,400d7d8 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
 400d794:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d798:	053fff84 	movi	r20,-2
 400d79c:	00000606 	br	400d7b8 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
 400d7a0:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400d7a4:	d0e33d17 	ldw	r3,-29452(gp)
 400d7a8:	80800217 	ldw	r2,8(r16)
 400d7ac:	1880122e 	bgeu	r3,r2,400d7f8 <alt_tick+0x98>
 400d7b0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400d7b4:	8c800826 	beq	r17,r18,400d7d8 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400d7b8:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 400d7bc:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400d7c0:	103ff826 	beq	r2,zero,400d7a4 <__ram_exceptions_end+0xfac09618>
 400d7c4:	d0a33d17 	ldw	r2,-29452(gp)
 400d7c8:	103ff526 	beq	r2,zero,400d7a0 <__ram_exceptions_end+0xfac09614>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400d7cc:	d0a33d17 	ldw	r2,-29452(gp)
 400d7d0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400d7d4:	8cbff81e 	bne	r17,r18,400d7b8 <__ram_exceptions_end+0xfac0962c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 400d7d8:	dfc00517 	ldw	ra,20(sp)
 400d7dc:	dd000417 	ldw	r20,16(sp)
 400d7e0:	dcc00317 	ldw	r19,12(sp)
 400d7e4:	dc800217 	ldw	r18,8(sp)
 400d7e8:	dc400117 	ldw	r17,4(sp)
 400d7ec:	dc000017 	ldw	r16,0(sp)
 400d7f0:	dec00604 	addi	sp,sp,24
 400d7f4:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
 400d7f8:	80800317 	ldw	r2,12(r16)
 400d7fc:	81000517 	ldw	r4,20(r16)
 400d800:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400d804:	10000726 	beq	r2,zero,400d824 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 400d808:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400d80c:	d1233d17 	ldw	r4,-29452(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 400d810:	10c5883a 	add	r2,r2,r3
 400d814:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400d818:	113fe52e 	bgeu	r2,r4,400d7b0 <__ram_exceptions_end+0xfac09624>
        {
          alarm->rollover = 1;
 400d81c:	84c00405 	stb	r19,16(r16)
 400d820:	003fe306 	br	400d7b0 <__ram_exceptions_end+0xfac09624>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d824:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d828:	1506703a 	and	r3,r2,r20
 400d82c:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400d830:	81000117 	ldw	r4,4(r16)
 400d834:	80c00017 	ldw	r3,0(r16)
 400d838:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
 400d83c:	81000117 	ldw	r4,4(r16)
 400d840:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400d844:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
 400d848:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d84c:	1001703a 	wrctl	status,r2
 400d850:	003fd706 	br	400d7b0 <__ram_exceptions_end+0xfac09624>

0400d854 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400d854:	defffe04 	addi	sp,sp,-8
 400d858:	dfc00115 	stw	ra,4(sp)
 400d85c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d860:	20002216 	blt	r4,zero,400d8ec <write+0x98>
 400d864:	21000324 	muli	r4,r4,12
 400d868:	00810074 	movhi	r2,1025
 400d86c:	10819404 	addi	r2,r2,1616
 400d870:	2089883a 	add	r4,r4,r2
  
  if (fd)
 400d874:	20001d26 	beq	r4,zero,400d8ec <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400d878:	20800217 	ldw	r2,8(r4)
 400d87c:	108000cc 	andi	r2,r2,3
 400d880:	10000a26 	beq	r2,zero,400d8ac <write+0x58>
 400d884:	20800017 	ldw	r2,0(r4)
 400d888:	10800617 	ldw	r2,24(r2)
 400d88c:	10000726 	beq	r2,zero,400d8ac <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400d890:	103ee83a 	callr	r2
 400d894:	1021883a 	mov	r16,r2
 400d898:	10000d16 	blt	r2,zero,400d8d0 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 400d89c:	dfc00117 	ldw	ra,4(sp)
 400d8a0:	dc000017 	ldw	r16,0(sp)
 400d8a4:	dec00204 	addi	sp,sp,8
 400d8a8:	f800283a 	ret
 400d8ac:	d0a00c17 	ldw	r2,-32720(gp)
 400d8b0:	10000526 	beq	r2,zero,400d8c8 <write+0x74>
 400d8b4:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
 400d8b8:	00c00344 	movi	r3,13
 400d8bc:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 400d8c0:	00bfffc4 	movi	r2,-1
 400d8c4:	003ff506 	br	400d89c <__ram_exceptions_end+0xfac09710>
 400d8c8:	d0a33904 	addi	r2,gp,-29468
 400d8cc:	003ffa06 	br	400d8b8 <__ram_exceptions_end+0xfac0972c>
 400d8d0:	d0a00c17 	ldw	r2,-32720(gp)
 400d8d4:	10000c26 	beq	r2,zero,400d908 <write+0xb4>
 400d8d8:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
 400d8dc:	0421c83a 	sub	r16,zero,r16
 400d8e0:	14000015 	stw	r16,0(r2)
        return -1;
 400d8e4:	00bfffc4 	movi	r2,-1
 400d8e8:	003fec06 	br	400d89c <__ram_exceptions_end+0xfac09710>
 400d8ec:	d0a00c17 	ldw	r2,-32720(gp)
 400d8f0:	10000726 	beq	r2,zero,400d910 <write+0xbc>
 400d8f4:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400d8f8:	00c01444 	movi	r3,81
 400d8fc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 400d900:	00bfffc4 	movi	r2,-1
 400d904:	003fe506 	br	400d89c <__ram_exceptions_end+0xfac09710>
 400d908:	d0a33904 	addi	r2,gp,-29468
 400d90c:	003ff306 	br	400d8dc <__ram_exceptions_end+0xfac09750>
 400d910:	d0a33904 	addi	r2,gp,-29468
 400d914:	003ff806 	br	400d8f8 <__ram_exceptions_end+0xfac0976c>

0400d918 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400d918:	deffff04 	addi	sp,sp,-4
 400d91c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 400d920:	400edfc0 	call	400edfc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400d924:	00800044 	movi	r2,1
 400d928:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400d92c:	dfc00017 	ldw	ra,0(sp)
 400d930:	dec00104 	addi	sp,sp,4
 400d934:	f800283a 	ret

0400d938 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400d938:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 400d93c:	01c0fa04 	movi	r7,1000
 400d940:	000d883a 	mov	r6,zero
 400d944:	000b883a 	mov	r5,zero
 400d948:	01020034 	movhi	r4,2048
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400d94c:	dfc00115 	stw	ra,4(sp)
 400d950:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 400d954:	400daac0 	call	400daac <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400d958:	d4200804 	addi	r16,gp,-32736
 400d95c:	01010074 	movhi	r4,1025
 400d960:	800b883a 	mov	r5,r16
 400d964:	21025804 	addi	r4,r4,2400
 400d968:	400e99c0 	call	400e99c <alt_dev_llist_insert>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC_0, modular_adc_0);
 400d96c:	01010074 	movhi	r4,1025
 400d970:	01800084 	movi	r6,2
 400d974:	000b883a 	mov	r5,zero
 400d978:	21024904 	addi	r4,r4,2340
 400d97c:	400db700 	call	400db70 <altera_modular_adc_init>
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
 400d980:	01010074 	movhi	r4,1025
 400d984:	21020904 	addi	r4,r4,2084
 400d988:	400e3ac0 	call	400e3ac <altera_onchip_flash_init>
 400d98c:	01010074 	movhi	r4,1025
 400d990:	800b883a 	mov	r5,r16
 400d994:	2101fe04 	addi	r4,r4,2040
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI_0, accelerometer_spi_0);
}
 400d998:	dfc00117 	ldw	ra,4(sp)
 400d99c:	dc000017 	ldw	r16,0(sp)
 400d9a0:	dec00204 	addi	sp,sp,8
 400d9a4:	400e99c1 	jmpi	400e99c <alt_dev_llist_insert>

0400d9a8 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400d9a8:	20800017 	ldw	r2,0(r4)
 400d9ac:	21c00217 	ldw	r7,8(r4)
 400d9b0:	11000a04 	addi	r4,r2,40
 400d9b4:	400d9c81 	jmpi	400d9c8 <altera_avalon_jtag_uart_read>

0400d9b8 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400d9b8:	20800017 	ldw	r2,0(r4)
 400d9bc:	21c00217 	ldw	r7,8(r4)
 400d9c0:	11000a04 	addi	r4,r2,40
 400d9c4:	400da3c1 	jmpi	400da3c <altera_avalon_jtag_uart_write>

0400d9c8 <altera_avalon_jtag_uart_read>:
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;
 400d9c8:	298d883a 	add	r6,r5,r6

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 400d9cc:	22400017 	ldw	r9,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 400d9d0:	2980162e 	bgeu	r5,r6,400da2c <altera_avalon_jtag_uart_read+0x64>
 400d9d4:	2807883a 	mov	r3,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 400d9d8:	3a90000c 	andi	r10,r7,16384
 400d9dc:	00000306 	br	400d9ec <altera_avalon_jtag_uart_read+0x24>
  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400d9e0:	19000005 	stb	r4,0(r3)
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 400d9e4:	1180092e 	bgeu	r2,r6,400da0c <altera_avalon_jtag_uart_read+0x44>
 400d9e8:	1007883a 	mov	r3,r2
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400d9ec:	49000037 	ldwio	r4,0(r9)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 400d9f0:	2220000c 	andi	r8,r4,32768
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400d9f4:	18800044 	addi	r2,r3,1

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 400d9f8:	403ff91e 	bne	r8,zero,400d9e0 <__ram_exceptions_end+0xfac09854>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
 400d9fc:	28c0061e 	bne	r5,r3,400da18 <altera_avalon_jtag_uart_read+0x50>
      break;
    else if(flags & O_NONBLOCK)
 400da00:	5000081e 	bne	r10,zero,400da24 <altera_avalon_jtag_uart_read+0x5c>
 400da04:	2805883a 	mov	r2,r5
 400da08:	003ff706 	br	400d9e8 <__ram_exceptions_end+0xfac0985c>
      break;   
    
  }

  if (ptr != buffer)
 400da0c:	28800726 	beq	r5,r2,400da2c <altera_avalon_jtag_uart_read+0x64>
    return ptr - buffer;
 400da10:	1145c83a 	sub	r2,r2,r5
 400da14:	f800283a 	ret
 400da18:	1805883a 	mov	r2,r3
 400da1c:	1145c83a 	sub	r2,r2,r5
 400da20:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 400da24:	00bffd44 	movi	r2,-11
 400da28:	f800283a 	ret
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 400da2c:	39d0000c 	andi	r7,r7,16384
 400da30:	383ffc1e 	bne	r7,zero,400da24 <__ram_exceptions_end+0xfac09898>
    return -EWOULDBLOCK;
  else
    return -EIO;
 400da34:	00bffec4 	movi	r2,-5
}
 400da38:	f800283a 	ret

0400da3c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 400da3c:	21c00017 	ldw	r7,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400da40:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 400da44:	298d883a 	add	r6,r5,r6
 400da48:	39000104 	addi	r4,r7,4

  while (ptr < end)
 400da4c:	2980072e 	bgeu	r5,r6,400da6c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 400da50:	20c00037 	ldwio	r3,0(r4)
 400da54:	18ffffec 	andhi	r3,r3,65535
 400da58:	183ffd26 	beq	r3,zero,400da50 <__ram_exceptions_end+0xfac098c4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 400da5c:	28c00007 	ldb	r3,0(r5)
 400da60:	38c00035 	stwio	r3,0(r7)
 400da64:	29400044 	addi	r5,r5,1
 400da68:	003ff806 	br	400da4c <__ram_exceptions_end+0xfac098c0>

  return count;
}
 400da6c:	f800283a 	ret

0400da70 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400da70:	defffe04 	addi	sp,sp,-8
 400da74:	dfc00115 	stw	ra,4(sp)
 400da78:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 400da7c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 400da80:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400da84:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400da88:	00bfff84 	movi	r2,-2
 400da8c:	8084703a 	and	r2,r16,r2
 400da90:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 400da94:	400d7600 	call	400d760 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400da98:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 400da9c:	dfc00117 	ldw	ra,4(sp)
 400daa0:	dc000017 	ldw	r16,0(sp)
 400daa4:	dec00204 	addi	sp,sp,8
 400daa8:	f800283a 	ret

0400daac <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 400daac:	d0a33e17 	ldw	r2,-29448(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 400dab0:	200b883a 	mov	r5,r4
 400dab4:	3009883a 	mov	r4,r6
 400dab8:	1000011e 	bne	r2,zero,400dac0 <alt_avalon_timer_sc_init+0x14>
  {
    _alt_tick_rate = nticks;
 400dabc:	d1e33e15 	stw	r7,-29448(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 400dac0:	008001c4 	movi	r2,7
 400dac4:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 400dac8:	01810074 	movhi	r6,1025
 400dacc:	31b69c04 	addi	r6,r6,-9616
 400dad0:	400ebd81 	jmpi	400ebd8 <alt_irq_register>

0400dad4 <alt_adc_irq>:
static void alt_adc_irq(void *context)
{
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
    alt_irq_context cpu_sr = 0;

	if(NULL != dev)
 400dad4:	20001726 	beq	r4,zero,400db34 <alt_adc_irq+0x60>
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
 400dad8:	defffd04 	addi	sp,sp,-12
 400dadc:	dc000015 	stw	r16,0(sp)
 400dae0:	2021883a 	mov	r16,r4
 400dae4:	dfc00215 	stw	ra,8(sp)
 400dae8:	dc400115 	stw	r17,4(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400daec:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400daf0:	00bfff84 	movi	r2,-2
 400daf4:	8884703a 	and	r2,r17,r2
 400daf8:	1001703a 	wrctl	status,r2
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
 400dafc:	20800a17 	ldw	r2,40(r4)
 400db00:	10000226 	beq	r2,zero,400db0c <alt_adc_irq+0x38>
		{
			dev->callback (dev->callback_context);
 400db04:	21000b17 	ldw	r4,44(r4)
 400db08:	103ee83a 	callr	r2
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 400db0c:	80800c17 	ldw	r2,48(r16)
 400db10:	10804104 	addi	r2,r2,260
 400db14:	10c00037 	ldwio	r3,0(r2)
 400db18:	18c00054 	ori	r3,r3,1
 400db1c:	10c00035 	stwio	r3,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400db20:	8801703a 	wrctl	status,r17
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
}
 400db24:	dfc00217 	ldw	ra,8(sp)
 400db28:	dc400117 	ldw	r17,4(sp)
 400db2c:	dc000017 	ldw	r16,0(sp)
 400db30:	dec00304 	addi	sp,sp,12
 400db34:	f800283a 	ret

0400db38 <alt_adc_word_read>:
    alt_u32 word_length = len;
    alt_u32* dest_buf = dest_ptr;
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
 400db38:	28000b26 	beq	r5,zero,400db68 <alt_adc_word_read+0x30>
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 400db3c:	30000826 	beq	r6,zero,400db60 <alt_adc_word_read+0x28>
 400db40:	0005883a 	mov	r2,zero
 400db44:	2149c83a 	sub	r4,r4,r5
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
 400db48:	2907883a 	add	r3,r5,r4
 400db4c:	18c00037 	ldwio	r3,0(r3)
 400db50:	28c00015 	stw	r3,0(r5)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 400db54:	10800044 	addi	r2,r2,1
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
 400db58:	29400104 	addi	r5,r5,4
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 400db5c:	30bffa1e 	bne	r6,r2,400db48 <__ram_exceptions_end+0xfac099bc>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
 400db60:	0005883a 	mov	r2,zero
 400db64:	f800283a 	ret
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
    {
    	return -EINVAL;
 400db68:	00bffa84 	movi	r2,-22
       dest_buf++;
    }

    return 0;

}
 400db6c:	f800283a 	ret

0400db70 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 400db70:	defffc04 	addi	sp,sp,-16
 400db74:	dc400115 	stw	r17,4(sp)
 400db78:	2823883a 	mov	r17,r5
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 400db7c:	d1601004 	addi	r5,gp,-32704

}


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 400db80:	dc800215 	stw	r18,8(sp)
 400db84:	dc000015 	stw	r16,0(sp)
 400db88:	dfc00315 	stw	ra,12(sp)
 400db8c:	2025883a 	mov	r18,r4
 400db90:	3021883a 	mov	r16,r6
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 400db94:	400e99c0 	call	400e99c <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
 400db98:	88000b16 	blt	r17,zero,400dbc8 <altera_modular_adc_init+0x58>
 400db9c:	80000a16 	blt	r16,zero,400dbc8 <altera_modular_adc_init+0x58>
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
 400dba0:	01810074 	movhi	r6,1025
 400dba4:	31b6b504 	addi	r6,r6,-9516
 400dba8:	900b883a 	mov	r5,r18
 400dbac:	8009883a 	mov	r4,r16
          #endif 
	}
}
 400dbb0:	dfc00317 	ldw	ra,12(sp)
 400dbb4:	dc800217 	ldw	r18,8(sp)
 400dbb8:	dc400117 	ldw	r17,4(sp)
 400dbbc:	dc000017 	ldw	r16,0(sp)
 400dbc0:	dec00404 	addi	sp,sp,16
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
 400dbc4:	400ebd81 	jmpi	400ebd8 <alt_irq_register>
          #endif 
	}
}
 400dbc8:	dfc00317 	ldw	ra,12(sp)
 400dbcc:	dc800217 	ldw	r18,8(sp)
 400dbd0:	dc400117 	ldw	r17,4(sp)
 400dbd4:	dc000017 	ldw	r16,0(sp)
 400dbd8:	dec00404 	addi	sp,sp,16
 400dbdc:	f800283a 	ret

0400dbe0 <alt_adc_register_callback>:
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
    dev->callback         = callback;
 400dbe0:	21400a15 	stw	r5,40(r4)
    dev->callback_context = context;
 400dbe4:	21800b15 	stw	r6,44(r4)
    dev->sample_store_base = sample_store_base;
 400dbe8:	21c00c15 	stw	r7,48(r4)
	
	if(NULL != callback)
 400dbec:	28000926 	beq	r5,zero,400dc14 <alt_adc_register_callback+0x34>
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 400dbf0:	38c04104 	addi	r3,r7,260
 400dbf4:	18800037 	ldwio	r2,0(r3)
 400dbf8:	10800054 	ori	r2,r2,1
 400dbfc:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
}

void adc_interrupt_enable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 400dc00:	39c04004 	addi	r7,r7,256
 400dc04:	38800037 	ldwio	r2,0(r7)
 400dc08:	10800054 	ori	r2,r2,1
 400dc0c:	38800035 	stwio	r2,0(r7)
 400dc10:	f800283a 	ret
}

void adc_interrupt_disable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 400dc14:	38c04004 	addi	r3,r7,256
 400dc18:	19000037 	ldwio	r4,0(r3)
 400dc1c:	00bfff84 	movi	r2,-2
 400dc20:	2084703a 	and	r2,r4,r2
 400dc24:	18800035 	stwio	r2,0(r3)
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 400dc28:	39c04104 	addi	r7,r7,260
 400dc2c:	38800037 	ldwio	r2,0(r7)
 400dc30:	10800054 	ori	r2,r2,1
 400dc34:	38800035 	stwio	r2,0(r7)
 400dc38:	f800283a 	ret

0400dc3c <altera_modular_adc_open>:
alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
    alt_modular_adc_dev *dev = NULL;

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
 400dc3c:	d1601004 	addi	r5,gp,-32704
 400dc40:	400ea081 	jmpi	400ea08 <alt_find_dev>

0400dc44 <adc_stop>:
    return dev;
}

void adc_stop(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 400dc44:	20c00037 	ldwio	r3,0(r4)
 400dc48:	00bfff84 	movi	r2,-2
 400dc4c:	1884703a 	and	r2,r3,r2
 400dc50:	20800035 	stwio	r2,0(r4)
 400dc54:	20800037 	ldwio	r2,0(r4)
 400dc58:	1080004c 	andi	r2,r2,1
 400dc5c:	103ffd1e 	bne	r2,zero,400dc54 <__ram_exceptions_end+0xfac09ac8>
}
 400dc60:	f800283a 	ret

0400dc64 <adc_start>:

void adc_start(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 400dc64:	20800037 	ldwio	r2,0(r4)
 400dc68:	10800054 	ori	r2,r2,1
 400dc6c:	20800035 	stwio	r2,0(r4)
 400dc70:	f800283a 	ret

0400dc74 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
 400dc74:	20c00037 	ldwio	r3,0(r4)
 400dc78:	00bffc44 	movi	r2,-15
 400dc7c:	1884703a 	and	r2,r3,r2
 400dc80:	10800094 	ori	r2,r2,2
 400dc84:	20800035 	stwio	r2,0(r4)
 400dc88:	f800283a 	ret

0400dc8c <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
 400dc8c:	20c00037 	ldwio	r3,0(r4)
 400dc90:	00bffc44 	movi	r2,-15
 400dc94:	1884703a 	and	r2,r3,r2
 400dc98:	20800035 	stwio	r2,0(r4)
 400dc9c:	f800283a 	ret

0400dca0 <adc_recalibrate>:
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
 400dca0:	20c00037 	ldwio	r3,0(r4)
    return dev;
}

void adc_stop(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 400dca4:	21400037 	ldwio	r5,0(r4)
 400dca8:	00bfff84 	movi	r2,-2
 400dcac:	2884703a 	and	r2,r5,r2
 400dcb0:	20800035 	stwio	r2,0(r4)
 400dcb4:	20800037 	ldwio	r2,0(r4)
 400dcb8:	1080004c 	andi	r2,r2,1
 400dcbc:	103ffd1e 	bne	r2,zero,400dcb4 <__ram_exceptions_end+0xfac09b28>
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
 400dcc0:	20800037 	ldwio	r2,0(r4)
 400dcc4:	10800394 	ori	r2,r2,14
 400dcc8:	20800035 	stwio	r2,0(r4)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
}

void adc_start(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 400dccc:	20800037 	ldwio	r2,0(r4)
 400dcd0:	10800054 	ori	r2,r2,1
 400dcd4:	20800035 	stwio	r2,0(r4)
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 400dcd8:	20800037 	ldwio	r2,0(r4)
 400dcdc:	1080004c 	andi	r2,r2,1
 400dce0:	103ffd1e 	bne	r2,zero,400dcd8 <__ram_exceptions_end+0xfac09b4c>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
 400dce4:	20c00035 	stwio	r3,0(r4)
 400dce8:	f800283a 	ret

0400dcec <adc_interrupt_enable>:
}

void adc_interrupt_enable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 400dcec:	21004004 	addi	r4,r4,256
 400dcf0:	20800037 	ldwio	r2,0(r4)
 400dcf4:	10800054 	ori	r2,r2,1
 400dcf8:	20800035 	stwio	r2,0(r4)
 400dcfc:	f800283a 	ret

0400dd00 <adc_interrupt_disable>:
}

void adc_interrupt_disable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 400dd00:	21004004 	addi	r4,r4,256
 400dd04:	20c00037 	ldwio	r3,0(r4)
 400dd08:	00bfff84 	movi	r2,-2
 400dd0c:	1884703a 	and	r2,r3,r2
 400dd10:	20800035 	stwio	r2,0(r4)
 400dd14:	f800283a 	ret

0400dd18 <adc_clear_interrupt_status>:
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 400dd18:	21004104 	addi	r4,r4,260
 400dd1c:	20800037 	ldwio	r2,0(r4)
 400dd20:	10800054 	ori	r2,r2,1
 400dd24:	20800035 	stwio	r2,0(r4)
 400dd28:	f800283a 	ret

0400dd2c <adc_interrupt_asserted>:
}

int adc_interrupt_asserted(int sample_store_base)
{
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
 400dd2c:	20804137 	ldwio	r2,260(r4)
 400dd30:	1080004c 	andi	r2,r2,1
}
 400dd34:	0085c83a 	sub	r2,zero,r2
 400dd38:	f800283a 	ret

0400dd3c <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
 400dd3c:	21004104 	addi	r4,r4,260
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
 400dd40:	20800037 	ldwio	r2,0(r4)
 400dd44:	1080004c 	andi	r2,r2,1
 400dd48:	103ffd26 	beq	r2,zero,400dd40 <__ram_exceptions_end+0xfac09bb4>
}
 400dd4c:	f800283a 	ret

0400dd50 <alt_onchip_flash_read>:
{
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
 400dd50:	20c00b17 	ldw	r3,44(r4)
 400dd54:	28c0160e 	bge	r5,r3,400ddb0 <alt_onchip_flash_read+0x60>
 400dd58:	2005883a 	mov	r2,r4
 400dd5c:	29c9883a 	add	r4,r5,r7
 400dd60:	19001316 	blt	r3,r4,400ddb0 <alt_onchip_flash_read+0x60>
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
 400dd64:	defffe04 	addi	sp,sp,-8
 400dd68:	dc000015 	stw	r16,0(sp)
 400dd6c:	1021883a 	mov	r16,r2
    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
 400dd70:	10800a17 	ldw	r2,40(r2)
 400dd74:	3009883a 	mov	r4,r6
 400dd78:	380d883a 	mov	r6,r7
 400dd7c:	114b883a 	add	r5,r2,r5
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
 400dd80:	dfc00115 	stw	ra,4(sp)
    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
 400dd84:	4005e440 	call	4005e44 <memcpy>

    if (NULL != flash->csr_base) {
 400dd88:	80802f17 	ldw	r2,188(r16)
 400dd8c:	10000326 	beq	r2,zero,400dd9c <alt_onchip_flash_read+0x4c>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
 400dd90:	10800037 	ldwio	r2,0(r2)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
 400dd94:	1080010c 	andi	r2,r2,4
 400dd98:	10000726 	beq	r2,zero,400ddb8 <alt_onchip_flash_read+0x68>
    int           offset,
    void          *dest_addr,
    int           length
)
{
    int ret_code = 0;
 400dd9c:	0005883a 	mov	r2,zero
            /* Read failed.  Return error.*/
            ret_code = -EIO;
        }
    }
    return ret_code;
}
 400dda0:	dfc00117 	ldw	ra,4(sp)
 400dda4:	dc000017 	ldw	r16,0(sp)
 400dda8:	dec00204 	addi	sp,sp,8
 400ddac:	f800283a 	ret
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
 400ddb0:	00bffc84 	movi	r2,-14
 400ddb4:	f800283a 	ret

    if (NULL != flash->csr_base) {
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
            /* Read failed.  Return error.*/
            ret_code = -EIO;
 400ddb8:	00bffec4 	movi	r2,-5
 400ddbc:	003ff806 	br	400dda0 <__ram_exceptions_end+0xfac09c14>

0400ddc0 <alt_onchip_flash_get_info>:
{
    int ret_code = 0;

    alt_flash_dev* flash = (alt_flash_dev*)fd;

    if (NULL != number_of_regions)
 400ddc0:	30000226 	beq	r6,zero,400ddcc <alt_onchip_flash_get_info+0xc>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
 400ddc4:	20800c17 	ldw	r2,48(r4)
 400ddc8:	30800015 	stw	r2,0(r6)
    }

    if (!flash->number_of_regions)
 400ddcc:	20800c17 	ldw	r2,48(r4)
 400ddd0:	10000926 	beq	r2,zero,400ddf8 <alt_onchip_flash_get_info+0x38>
    {
        ret_code = -ENOMEM;
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 400ddd4:	00c00204 	movi	r3,8
 400ddd8:	18800916 	blt	r3,r2,400de00 <alt_onchip_flash_get_info+0x40>
    {
        ret_code = -EFAULT;
    }
    else
    {
        if (NULL != info)
 400dddc:	28000426 	beq	r5,zero,400ddf0 <alt_onchip_flash_get_info+0x30>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
 400dde0:	21000d04 	addi	r4,r4,52
 400dde4:	29000015 	stw	r4,0(r5)
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
    int ret_code = 0;
 400dde8:	0005883a 	mov	r2,zero
 400ddec:	f800283a 	ret
 400ddf0:	0005883a 	mov	r2,zero
            *info = &flash->region_info[0];
        }
    }

    return ret_code;
}
 400ddf4:	f800283a 	ret
        *number_of_regions = flash->number_of_regions;
    }

    if (!flash->number_of_regions)
    {
        ret_code = -ENOMEM;
 400ddf8:	00bffd04 	movi	r2,-12
 400ddfc:	f800283a 	ret
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    {
        ret_code = -EFAULT;
 400de00:	00bffc84 	movi	r2,-14
 400de04:	f800283a 	ret

0400de08 <alt_onchip_flash_erase_block>:
    int ret_code = 0;
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
 400de08:	20800b17 	ldw	r2,44(r4)
 400de0c:	2880580e 	bge	r5,r2,400df70 <alt_onchip_flash_erase_block+0x168>
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
 400de10:	20c02f17 	ldw	r3,188(r4)
 400de14:	18005426 	beq	r3,zero,400df68 <alt_onchip_flash_erase_block+0x160>
 400de18:	20802e17 	ldw	r2,184(r4)
 400de1c:	1000521e 	bne	r2,zero,400df68 <alt_onchip_flash_erase_block+0x160>
        return -ENODEV;
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
 400de20:	20803f17 	ldw	r2,252(r4)
 400de24:	10bfffc4 	addi	r2,r2,-1
 400de28:	1144703a 	and	r2,r2,r5
 400de2c:	1000521e 	bne	r2,zero,400df78 <alt_onchip_flash_erase_block+0x170>
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
 400de30:	defffc04 	addi	sp,sp,-16
 400de34:	dc000015 	stw	r16,0(sp)
 400de38:	040002f4 	movhi	r16,11
 400de3c:	dc800215 	stw	r18,8(sp)
 400de40:	dc400115 	stw	r17,4(sp)
 400de44:	dfc00315 	stw	ra,12(sp)
 400de48:	2825883a 	mov	r18,r5
 400de4c:	2023883a 	mov	r17,r4
 400de50:	842b9804 	addi	r16,r16,-20896
 400de54:	00000306 	br	400de64 <alt_onchip_flash_erase_block+0x5c>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400de58:	400e8cc0 	call	400e8cc <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400de5c:	80003a26 	beq	r16,zero,400df48 <alt_onchip_flash_erase_block+0x140>
 400de60:	88c02f17 	ldw	r3,188(r17)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400de64:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400de68:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400de6c:	108000cc 	andi	r2,r2,3
 400de70:	843fffc4 	addi	r16,r16,-1
 400de74:	103ff81e 	bne	r2,zero,400de58 <__ram_exceptions_end+0xfac09ccc>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 400de78:	18c00104 	addi	r3,r3,4
 400de7c:	18800037 	ldwio	r2,0(r3)
 400de80:	113c002c 	andhi	r4,r2,61440
 400de84:	00802034 	movhi	r2,128
 400de88:	10bfffc4 	addi	r2,r2,-1
 400de8c:	2084b03a 	or	r2,r4,r2
 400de90:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 400de94:	88c02f17 	ldw	r3,188(r17)
 400de98:	18c00104 	addi	r3,r3,4
 400de9c:	18800037 	ldwio	r2,0(r3)
 400dea0:	900b883a 	mov	r5,r18
 400dea4:	90002a16 	blt	r18,zero,400df50 <alt_onchip_flash_erase_block+0x148>
 400dea8:	280bd0ba 	srai	r5,r5,2
 400deac:	10bc002c 	andhi	r2,r2,61440
 400deb0:	29401c34 	orhi	r5,r5,112
 400deb4:	288ab03a 	or	r5,r5,r2
 400deb8:	19400035 	stwio	r5,0(r3)
 400debc:	040002f4 	movhi	r16,11
 400dec0:	842b9804 	addi	r16,r16,-20896
 400dec4:	00000206 	br	400ded0 <alt_onchip_flash_erase_block+0xc8>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400dec8:	400e8cc0 	call	400e8cc <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400decc:	80002226 	beq	r16,zero,400df58 <alt_onchip_flash_erase_block+0x150>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400ded0:	88c02f17 	ldw	r3,188(r17)
 400ded4:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400ded8:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400dedc:	108000cc 	andi	r2,r2,3
 400dee0:	843fffc4 	addi	r16,r16,-1
 400dee4:	103ff81e 	bne	r2,zero,400dec8 <__ram_exceptions_end+0xfac09d3c>

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 400dee8:	040002f4 	movhi	r16,11
 400deec:	842b9804 	addi	r16,r16,-20896
 400def0:	00000306 	br	400df00 <alt_onchip_flash_erase_block+0xf8>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 400def4:	400e8cc0 	call	400e8cc <alt_busy_sleep>
 400def8:	88c02f17 	ldw	r3,188(r17)

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400defc:	80001826 	beq	r16,zero,400df60 <alt_onchip_flash_erase_block+0x158>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400df00:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 400df04:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400df08:	1080040c 	andi	r2,r2,16
 400df0c:	843fffc4 	addi	r16,r16,-1
 400df10:	103ff826 	beq	r2,zero,400def4 <__ram_exceptions_end+0xfac09d68>
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
 400df14:	0005883a 	mov	r2,zero

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 400df18:	18c00104 	addi	r3,r3,4
 400df1c:	19400037 	ldwio	r5,0(r3)
 400df20:	01040034 	movhi	r4,4096
 400df24:	213fffc4 	addi	r4,r4,-1
 400df28:	2908b03a 	or	r4,r5,r4
 400df2c:	19000035 	stwio	r4,0(r3)

    return ret_code;
}
 400df30:	dfc00317 	ldw	ra,12(sp)
 400df34:	dc800217 	ldw	r18,8(sp)
 400df38:	dc400117 	ldw	r17,4(sp)
 400df3c:	dc000017 	ldw	r16,0(sp)
 400df40:	dec00404 	addi	sp,sp,16
 400df44:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400df48:	00bfe304 	movi	r2,-116
 400df4c:	003ff806 	br	400df30 <__ram_exceptions_end+0xfac09da4>

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 400df50:	914000c4 	addi	r5,r18,3
 400df54:	003fd406 	br	400dea8 <__ram_exceptions_end+0xfac09d1c>
 400df58:	88c02f17 	ldw	r3,188(r17)
 400df5c:	003fe206 	br	400dee8 <__ram_exceptions_end+0xfac09d5c>
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400df60:	00bfe304 	movi	r2,-116
 400df64:	003fec06 	br	400df18 <__ram_exceptions_end+0xfac09d8c>
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
        return -ENODEV;
 400df68:	00bffb44 	movi	r2,-19
 400df6c:	f800283a 	ret
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
        return -EFAULT;
 400df70:	00bffc84 	movi	r2,-14
 400df74:	f800283a 	ret

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
    {
        /* The address is not aligned */
        return -EINVAL;
 400df78:	00bffa84 	movi	r2,-22

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    return ret_code;
}
 400df7c:	f800283a 	ret

0400df80 <alt_onchip_flash_write_block>:
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
 400df80:	20800b17 	ldw	r2,44(r4)
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
 400df84:	defff404 	addi	sp,sp,-48
 400df88:	dc800415 	stw	r18,16(sp)
 400df8c:	dfc00b15 	stw	ra,44(sp)
 400df90:	df000a15 	stw	fp,40(sp)
 400df94:	ddc00915 	stw	r23,36(sp)
 400df98:	dd800815 	stw	r22,32(sp)
 400df9c:	dd400715 	stw	r21,28(sp)
 400dfa0:	dd000615 	stw	r20,24(sp)
 400dfa4:	dcc00515 	stw	r19,20(sp)
 400dfa8:	dc400315 	stw	r17,12(sp)
 400dfac:	dc000215 	stw	r16,8(sp)
 400dfb0:	dc800c17 	ldw	r18,48(sp)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
 400dfb4:	2880740e 	bge	r5,r2,400e188 <alt_onchip_flash_write_block+0x208>
 400dfb8:	3023883a 	mov	r17,r6
        (block_offset >= flash->dev.length) ||
 400dfbc:	3080720e 	bge	r6,r2,400e188 <alt_onchip_flash_write_block+0x208>
        (data_offset >= flash->dev.length) ||
 400dfc0:	1185c83a 	sub	r2,r2,r6
 400dfc4:	14807016 	blt	r2,r18,400e188 <alt_onchip_flash_write_block+0x208>
    ) {
        return -EFAULT;
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
 400dfc8:	20c02f17 	ldw	r3,188(r4)
 400dfcc:	2021883a 	mov	r16,r4
 400dfd0:	18006f26 	beq	r3,zero,400e190 <alt_onchip_flash_write_block+0x210>
 400dfd4:	20802e17 	ldw	r2,184(r4)
 400dfd8:	10006d1e 	bne	r2,zero,400e190 <alt_onchip_flash_write_block+0x210>
 400dfdc:	04c002f4 	movhi	r19,11
 400dfe0:	3829883a 	mov	r20,r7
 400dfe4:	9ceb9804 	addi	r19,r19,-20896
 400dfe8:	00000306 	br	400dff8 <alt_onchip_flash_write_block+0x78>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400dfec:	400e8cc0 	call	400e8cc <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400dff0:	98006326 	beq	r19,zero,400e180 <alt_onchip_flash_write_block+0x200>
 400dff4:	80c02f17 	ldw	r3,188(r16)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400dff8:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400dffc:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e000:	108000cc 	andi	r2,r2,3
 400e004:	9cffffc4 	addi	r19,r19,-1
 400e008:	103ff81e 	bne	r2,zero,400dfec <__ram_exceptions_end+0xfac09e60>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 400e00c:	18c00104 	addi	r3,r3,4
 400e010:	18800037 	ldwio	r2,0(r3)
 400e014:	113c002c 	andhi	r4,r2,61440
 400e018:	00802034 	movhi	r2,128
 400e01c:	10bfffc4 	addi	r2,r2,-1
 400e020:	2084b03a 	or	r2,r4,r2
 400e024:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
 400e028:	0027883a 	mov	r19,zero
 400e02c:	90005a26 	beq	r18,zero,400e198 <alt_onchip_flash_write_block+0x218>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
 400e030:	05bfffc4 	movi	r22,-1

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 400e034:	057fff04 	movi	r21,-4

    /* Check data length */
    while (length)
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
 400e038:	dd800015 	stw	r22,0(sp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
 400e03c:	890000cc 	andi	r4,r17,3
 400e040:	20002c1e 	bne	r4,zero,400e0f4 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 400e044:	88c00104 	addi	r3,r17,4
 400e048:	1d46703a 	and	r3,r3,r21
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
 400e04c:	1c79c83a 	sub	fp,r3,r17
 400e050:	9700010e 	bge	r18,fp,400e058 <alt_onchip_flash_write_block+0xd8>
 400e054:	9039883a 	mov	fp,r18
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
 400e058:	a4cb883a 	add	r5,r20,r19
 400e05c:	e00d883a 	mov	r6,fp
 400e060:	d809883a 	mov	r4,sp
 400e064:	d8c00115 	stw	r3,4(sp)
 400e068:	4005e440 	call	4005e44 <memcpy>

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 400e06c:	d8c00117 	ldw	r3,4(sp)
 400e070:	882f883a 	mov	r23,r17
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
            buffer_offset += length_of_current_write;
 400e074:	9f27883a 	add	r19,r19,fp
            length -= length_of_current_write;
 400e078:	9725c83a 	sub	r18,r18,fp

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 400e07c:	1823883a 	mov	r17,r3
            buffer_offset += length_of_current_write - padding;
            length -= length_of_current_write - padding;
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
 400e080:	80800a17 	ldw	r2,40(r16)
 400e084:	15ef883a 	add	r23,r2,r23
 400e088:	d8800017 	ldw	r2,0(sp)
 400e08c:	b8800035 	stwio	r2,0(r23)
 400e090:	05c002f4 	movhi	r23,11
 400e094:	bdeb9804 	addi	r23,r23,-20896
 400e098:	00000206 	br	400e0a4 <alt_onchip_flash_write_block+0x124>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400e09c:	400e8cc0 	call	400e8cc <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400e0a0:	b8002326 	beq	r23,zero,400e130 <alt_onchip_flash_write_block+0x1b0>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400e0a4:	80c02f17 	ldw	r3,188(r16)
 400e0a8:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400e0ac:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e0b0:	108000cc 	andi	r2,r2,3
 400e0b4:	bdffffc4 	addi	r23,r23,-1
 400e0b8:	103ff81e 	bne	r2,zero,400e09c <__ram_exceptions_end+0xfac09f10>
 400e0bc:	05c002f4 	movhi	r23,11
 400e0c0:	bdeb9804 	addi	r23,r23,-20896
 400e0c4:	00000306 	br	400e0d4 <alt_onchip_flash_write_block+0x154>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 400e0c8:	400e8cc0 	call	400e8cc <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400e0cc:	b8001826 	beq	r23,zero,400e130 <alt_onchip_flash_write_block+0x1b0>
 400e0d0:	80c02f17 	ldw	r3,188(r16)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400e0d4:	18800037 	ldwio	r2,0(r3)
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 400e0d8:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e0dc:	1080020c 	andi	r2,r2,8
 400e0e0:	bdffffc4 	addi	r23,r23,-1
 400e0e4:	103ff826 	beq	r2,zero,400e0c8 <__ram_exceptions_end+0xfac09f3c>

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
 400e0e8:	903fd31e 	bne	r18,zero,400e038 <__ram_exceptions_end+0xfac09eac>
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400e0ec:	0005883a 	mov	r2,zero
 400e0f0:	00001106 	br	400e138 <alt_onchip_flash_write_block+0x1b8>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
 400e0f4:	892fc83a 	sub	r23,r17,r4
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 400e0f8:	bc400104 	addi	r17,r23,4
 400e0fc:	8d62703a 	and	r17,r17,r21
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
 400e100:	2485883a 	add	r2,r4,r18
 400e104:	8df9c83a 	sub	fp,r17,r23
 400e108:	1700010e 	bge	r2,fp,400e110 <alt_onchip_flash_write_block+0x190>
 400e10c:	1039883a 	mov	fp,r2
 400e110:	e139c83a 	sub	fp,fp,r4
 400e114:	a4cb883a 	add	r5,r20,r19
 400e118:	e00d883a 	mov	r6,fp
 400e11c:	d909883a 	add	r4,sp,r4
 400e120:	4005e440 	call	4005e44 <memcpy>
            buffer_offset += length_of_current_write - padding;
 400e124:	9f27883a 	add	r19,r19,fp
            length -= length_of_current_write - padding;
 400e128:	9725c83a 	sub	r18,r18,fp
 400e12c:	003fd406 	br	400e080 <__ram_exceptions_end+0xfac09ef4>
 400e130:	80c02f17 	ldw	r3,188(r16)
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400e134:	00bfe304 	movi	r2,-116
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 400e138:	18c00104 	addi	r3,r3,4
 400e13c:	19400037 	ldwio	r5,0(r3)
 400e140:	01040034 	movhi	r4,4096
 400e144:	213fffc4 	addi	r4,r4,-1
 400e148:	2908b03a 	or	r4,r5,r4
 400e14c:	19000035 	stwio	r4,0(r3)

    return ret_code;
}
 400e150:	dfc00b17 	ldw	ra,44(sp)
 400e154:	df000a17 	ldw	fp,40(sp)
 400e158:	ddc00917 	ldw	r23,36(sp)
 400e15c:	dd800817 	ldw	r22,32(sp)
 400e160:	dd400717 	ldw	r21,28(sp)
 400e164:	dd000617 	ldw	r20,24(sp)
 400e168:	dcc00517 	ldw	r19,20(sp)
 400e16c:	dc800417 	ldw	r18,16(sp)
 400e170:	dc400317 	ldw	r17,12(sp)
 400e174:	dc000217 	ldw	r16,8(sp)
 400e178:	dec00c04 	addi	sp,sp,48
 400e17c:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400e180:	00bfe304 	movi	r2,-116
 400e184:	003ff206 	br	400e150 <__ram_exceptions_end+0xfac09fc4>
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
 400e188:	00bffc84 	movi	r2,-14
 400e18c:	003ff006 	br	400e150 <__ram_exceptions_end+0xfac09fc4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
        return -ENODEV;
 400e190:	00bffb44 	movi	r2,-19
 400e194:	003fee06 	br	400e150 <__ram_exceptions_end+0xfac09fc4>
 400e198:	80c02f17 	ldw	r3,188(r16)
 400e19c:	003fd306 	br	400e0ec <__ram_exceptions_end+0xfac09f60>

0400e1a0 <alt_onchip_flash_write>:
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
 400e1a0:	20800b17 	ldw	r2,44(r4)
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
 400e1a4:	deffee04 	addi	sp,sp,-72
 400e1a8:	dfc01115 	stw	ra,68(sp)
 400e1ac:	df001015 	stw	fp,64(sp)
 400e1b0:	ddc00f15 	stw	r23,60(sp)
 400e1b4:	dd800e15 	stw	r22,56(sp)
 400e1b8:	dd400d15 	stw	r21,52(sp)
 400e1bc:	dd000c15 	stw	r20,48(sp)
 400e1c0:	dcc00b15 	stw	r19,44(sp)
 400e1c4:	dc800a15 	stw	r18,40(sp)
 400e1c8:	dc400915 	stw	r17,36(sp)
 400e1cc:	dc000815 	stw	r16,32(sp)
 400e1d0:	d9000215 	stw	r4,8(sp)
 400e1d4:	d9400415 	stw	r5,16(sp)
 400e1d8:	d9c00515 	stw	r7,20(sp)
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
 400e1dc:	28806b0e 	bge	r5,r2,400e38c <alt_onchip_flash_write+0x1ec>
 400e1e0:	1145c83a 	sub	r2,r2,r5
 400e1e4:	11c06916 	blt	r2,r7,400e38c <alt_onchip_flash_write+0x1ec>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 400e1e8:	20c00c17 	ldw	r3,48(r4)
 400e1ec:	00c0690e 	bge	zero,r3,400e394 <alt_onchip_flash_write+0x1f4>
 400e1f0:	302d883a 	mov	r22,r6
 400e1f4:	d9800217 	ldw	r6,8(sp)
 400e1f8:	d8800217 	ldw	r2,8(sp)
 400e1fc:	df000517 	ldw	fp,20(sp)
 400e200:	31800a17 	ldw	r6,40(r6)
 400e204:	dc800417 	ldw	r18,16(sp)
 400e208:	15c00f04 	addi	r23,r2,60
 400e20c:	d9800315 	stw	r6,12(sp)
 400e210:	11801004 	addi	r6,r2,64
 400e214:	d9800115 	stw	r6,4(sp)
 400e218:	0027883a 	mov	r19,zero
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
 400e21c:	bc3ffe17 	ldw	r16,-8(r23)
 400e220:	94000e16 	blt	r18,r16,400e25c <alt_onchip_flash_write+0xbc>
 400e224:	b8bfff17 	ldw	r2,-4(r23)
 400e228:	8085883a 	add	r2,r16,r2
 400e22c:	90800b0e 	bge	r18,r2,400e25c <alt_onchip_flash_write+0xbc>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 400e230:	ba400017 	ldw	r9,0(r23)
 400e234:	0240090e 	bge	zero,r9,400e25c <alt_onchip_flash_write+0xbc>
 400e238:	d8c00117 	ldw	r3,4(sp)
 400e23c:	0023883a 	mov	r17,zero
 400e240:	1d000017 	ldw	r20,0(r3)
            {
                if ((offset >= current_offset ) &&
 400e244:	94000d0e 	bge	r18,r16,400e27c <alt_onchip_flash_write+0xdc>
 400e248:	8521883a 	add	r16,r16,r20
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 400e24c:	8c400044 	addi	r17,r17,1
 400e250:	8a7ffc16 	blt	r17,r9,400e244 <__ram_exceptions_end+0xfac0a0b8>
 400e254:	d9800217 	ldw	r6,8(sp)
 400e258:	30c00c17 	ldw	r3,48(r6)
 400e25c:	d8800117 	ldw	r2,4(sp)
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 400e260:	9cc00044 	addi	r19,r19,1
 400e264:	bdc00404 	addi	r23,r23,16
 400e268:	10800404 	addi	r2,r2,16
 400e26c:	d8800115 	stw	r2,4(sp)
 400e270:	98ffea16 	blt	r19,r3,400e21c <__ram_exceptions_end+0xfac0a090>
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 400e274:	0005883a 	mov	r2,zero
 400e278:	00002006 	br	400e2fc <alt_onchip_flash_write+0x15c>
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
 400e27c:	8507883a 	add	r3,r16,r20
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
 400e280:	90c0130e 	bge	r18,r3,400e2d0 <alt_onchip_flash_write+0x130>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
 400e284:	1cabc83a 	sub	r21,r3,r18
                    data_to_write = MIN(data_to_write, length);
 400e288:	e540010e 	bge	fp,r21,400e290 <alt_onchip_flash_write+0xf0>
 400e28c:	e02b883a 	mov	r21,fp
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
 400e290:	d8800317 	ldw	r2,12(sp)
 400e294:	a80d883a 	mov	r6,r21
 400e298:	b009883a 	mov	r4,r22
 400e29c:	148b883a 	add	r5,r2,r18
 400e2a0:	d8c00615 	stw	r3,24(sp)
 400e2a4:	da400715 	stw	r9,28(sp)
 400e2a8:	400f0f40 	call	400f0f4 <memcmp>
 400e2ac:	d8c00617 	ldw	r3,24(sp)
 400e2b0:	da400717 	ldw	r9,28(sp)
 400e2b4:	1000081e 	bne	r2,zero,400e2d8 <alt_onchip_flash_write+0x138>
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 400e2b8:	af3fee26 	beq	r21,fp,400e274 <__ram_exceptions_end+0xfac0a0e8>
 400e2bc:	1825883a 	mov	r18,r3
                    {
                        goto finished;
                    }

                    length -= data_to_write;
 400e2c0:	e579c83a 	sub	fp,fp,r21
                    offset = current_offset + flash->dev.region_info[i].block_size;
                    src_addr = (alt_u8*)src_addr + data_to_write;
 400e2c4:	b56d883a 	add	r22,r22,r21
 400e2c8:	9021883a 	mov	r16,r18
 400e2cc:	003fdf06 	br	400e24c <__ram_exceptions_end+0xfac0a0c0>
 400e2d0:	1821883a 	mov	r16,r3
 400e2d4:	003fdd06 	br	400e24c <__ram_exceptions_end+0xfac0a0c0>
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
                    data_to_write = MIN(data_to_write, length);
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
 400e2d8:	d8c00217 	ldw	r3,8(sp)
 400e2dc:	800b883a 	mov	r5,r16
 400e2e0:	18800817 	ldw	r2,32(r3)
 400e2e4:	1809883a 	mov	r4,r3
 400e2e8:	103ee83a 	callr	r2

                        if (!ret_code)
                        {
                            ret_code = (*flash->dev.write_block)(
 400e2ec:	d8c00217 	ldw	r3,8(sp)
                    data_to_write = MIN(data_to_write, length);
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);

                        if (!ret_code)
 400e2f0:	10001526 	beq	r2,zero,400e348 <alt_onchip_flash_write+0x1a8>
 400e2f4:	18c00a17 	ldw	r3,40(r3)
 400e2f8:	d8c00315 	stw	r3,12(sp)
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
 400e2fc:	d8c00317 	ldw	r3,12(sp)
 400e300:	d9800417 	ldw	r6,16(sp)
 400e304:	d9400517 	ldw	r5,20(sp)
 400e308:	d8800615 	stw	r2,24(sp)
 400e30c:	1989883a 	add	r4,r3,r6
 400e310:	400e9440 	call	400e944 <alt_dcache_flush>
    return ret_code;
 400e314:	d8800617 	ldw	r2,24(sp)
}
 400e318:	dfc01117 	ldw	ra,68(sp)
 400e31c:	df001017 	ldw	fp,64(sp)
 400e320:	ddc00f17 	ldw	r23,60(sp)
 400e324:	dd800e17 	ldw	r22,56(sp)
 400e328:	dd400d17 	ldw	r21,52(sp)
 400e32c:	dd000c17 	ldw	r20,48(sp)
 400e330:	dcc00b17 	ldw	r19,44(sp)
 400e334:	dc800a17 	ldw	r18,40(sp)
 400e338:	dc400917 	ldw	r17,36(sp)
 400e33c:	dc000817 	ldw	r16,32(sp)
 400e340:	dec01204 	addi	sp,sp,72
 400e344:	f800283a 	ret
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);

                        if (!ret_code)
                        {
                            ret_code = (*flash->dev.write_block)(
 400e348:	18800917 	ldw	r2,36(r3)
 400e34c:	b00f883a 	mov	r7,r22
 400e350:	dd400015 	stw	r21,0(sp)
 400e354:	900d883a 	mov	r6,r18
 400e358:	800b883a 	mov	r5,r16
 400e35c:	1809883a 	mov	r4,r3
 400e360:	103ee83a 	callr	r2
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 400e364:	af000f26 	beq	r21,fp,400e3a4 <alt_onchip_flash_write+0x204>
 400e368:	10000e1e 	bne	r2,zero,400e3a4 <alt_onchip_flash_write+0x204>
 400e36c:	d8c00117 	ldw	r3,4(sp)
 400e370:	ba400017 	ldw	r9,0(r23)
 400e374:	1d000017 	ldw	r20,0(r3)
 400e378:	d8c00217 	ldw	r3,8(sp)
 400e37c:	8525883a 	add	r18,r16,r20
 400e380:	18c00a17 	ldw	r3,40(r3)
 400e384:	d8c00315 	stw	r3,12(sp)
 400e388:	003fcd06 	br	400e2c0 <__ram_exceptions_end+0xfac0a134>
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
    {
        return -EFAULT;
 400e38c:	00bffc84 	movi	r2,-14
 400e390:	003fe106 	br	400e318 <__ram_exceptions_end+0xfac0a18c>
 400e394:	20c00a17 	ldw	r3,40(r4)
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 400e398:	0005883a 	mov	r2,zero
 400e39c:	d8c00315 	stw	r3,12(sp)
 400e3a0:	003fd606 	br	400e2fc <__ram_exceptions_end+0xfac0a170>
 400e3a4:	d8c00217 	ldw	r3,8(sp)
 400e3a8:	003fd206 	br	400e2f4 <__ram_exceptions_end+0xfac0a168>

0400e3ac <altera_onchip_flash_init>:

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];

    if (flash->csr_base != NULL) {
 400e3ac:	20802f17 	ldw	r2,188(r4)
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
 400e3b0:	defff704 	addi	sp,sp,-36
 400e3b4:	dc800215 	stw	r18,8(sp)
 400e3b8:	dc000015 	stw	r16,0(sp)
 400e3bc:	dfc00815 	stw	ra,32(sp)
 400e3c0:	ddc00715 	stw	r23,28(sp)
 400e3c4:	dd800615 	stw	r22,24(sp)
 400e3c8:	dd400515 	stw	r21,20(sp)
 400e3cc:	dd000415 	stw	r20,16(sp)
 400e3d0:	dcc00315 	stw	r19,12(sp)
 400e3d4:	dc400115 	stw	r17,4(sp)
 400e3d8:	2021883a 	mov	r16,r4
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];
 400e3dc:	24800d04 	addi	r18,r4,52

    if (flash->csr_base != NULL) {
 400e3e0:	10003926 	beq	r2,zero,400e4c8 <altera_onchip_flash_init+0x11c>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
 400e3e4:	11000037 	ldwio	r4,0(r2)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
 400e3e8:	10c00037 	ldwio	r3,0(r2)
 400e3ec:	1d40100c 	andi	r21,r3,64
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
 400e3f0:	10c00037 	ldwio	r3,0(r2)
 400e3f4:	1d80200c 	andi	r22,r3,128
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
 400e3f8:	15000037 	ldwio	r20,0(r2)
 400e3fc:	a500400c 	andi	r20,r20,256
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
 400e400:	14c00037 	ldwio	r19,0(r2)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 400e404:	00800044 	movi	r2,1
 400e408:	80c03017 	ldw	r3,192(r16)
    if (flash->csr_base != NULL) {
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
 400e40c:	9cc0800c 	andi	r19,r19,512
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 400e410:	18807726 	beq	r3,r2,400e5f0 <altera_onchip_flash_init+0x244>
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 400e414:	0023883a 	mov	r17,zero
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 400e418:	80c03317 	ldw	r3,204(r16)
 400e41c:	00800044 	movi	r2,1
 400e420:	18805926 	beq	r3,r2,400e588 <altera_onchip_flash_init+0x1dc>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 400e424:	80c03617 	ldw	r3,216(r16)
 400e428:	00800044 	movi	r2,1
 400e42c:	18804426 	beq	r3,r2,400e540 <altera_onchip_flash_init+0x194>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 400e430:	80c03917 	ldw	r3,228(r16)
 400e434:	00800044 	movi	r2,1
 400e438:	18803f26 	beq	r3,r2,400e538 <altera_onchip_flash_init+0x18c>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
 400e43c:	80c03c17 	ldw	r3,240(r16)
 400e440:	00800044 	movi	r2,1
 400e444:	18800e26 	beq	r3,r2,400e480 <altera_onchip_flash_init+0xd4>

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 400e448:	d1601404 	addi	r5,gp,-32688
 400e44c:	8009883a 	mov	r4,r16

        number_of_regions++;
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
 400e450:	84400c15 	stw	r17,48(r16)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
}
 400e454:	dfc00817 	ldw	ra,32(sp)
 400e458:	ddc00717 	ldw	r23,28(sp)
 400e45c:	dd800617 	ldw	r22,24(sp)
 400e460:	dd400517 	ldw	r21,20(sp)
 400e464:	dd000417 	ldw	r20,16(sp)
 400e468:	dcc00317 	ldw	r19,12(sp)
 400e46c:	dc800217 	ldw	r18,8(sp)
 400e470:	dc400117 	ldw	r17,4(sp)
 400e474:	dc000017 	ldw	r16,0(sp)
 400e478:	dec00904 	addi	sp,sp,36
 400e47c:	400e99c1 	jmpi	400e99c <alt_dev_llist_insert>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
 400e480:	983ff11e 	bne	r19,zero,400e448 <__ram_exceptions_end+0xfac0a2bc>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 400e484:	81403d17 	ldw	r5,244(r16)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 400e488:	80803e17 	ldw	r2,248(r16)
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 400e48c:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e490:	84c03f17 	ldw	r19,252(r16)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 400e494:	1145c83a 	sub	r2,r2,r5
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 400e498:	90e5883a 	add	r18,r18,r3
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 400e49c:	10800044 	addi	r2,r2,1
 400e4a0:	90800115 	stw	r2,4(r18)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e4a4:	80c7883a 	add	r3,r16,r3
 400e4a8:	19000e17 	ldw	r4,56(r3)
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 400e4ac:	91400015 	stw	r5,0(r18)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e4b0:	980b883a 	mov	r5,r19
 400e4b4:	40007ec0 	call	40007ec <__divsi3>
 400e4b8:	90800215 	stw	r2,8(r18)
        region_info[number_of_regions].block_size = flash->page_size;
 400e4bc:	94c00315 	stw	r19,12(r18)

        number_of_regions++;
 400e4c0:	8c400044 	addi	r17,r17,1
 400e4c4:	003fe006 	br	400e448 <__ram_exceptions_end+0xfac0a2bc>
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 400e4c8:	20c03017 	ldw	r3,192(r4)
 400e4cc:	00800044 	movi	r2,1
 400e4d0:	18805626 	beq	r3,r2,400e62c <altera_onchip_flash_init+0x280>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 400e4d4:	24403317 	ldw	r17,204(r4)
 400e4d8:	88803f26 	beq	r17,r2,400e5d8 <altera_onchip_flash_init+0x22c>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 400e4dc:	20c03617 	ldw	r3,216(r4)
 400e4e0:	18805726 	beq	r3,r2,400e640 <altera_onchip_flash_init+0x294>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 400e4e4:	20c03917 	ldw	r3,228(r4)
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 400e4e8:	0027883a 	mov	r19,zero

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 400e4ec:	0023883a 	mov	r17,zero
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 400e4f0:	18bfd21e 	bne	r3,r2,400e43c <__ram_exceptions_end+0xfac0a2b0>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 400e4f4:	81403a17 	ldw	r5,232(r16)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 400e4f8:	80803b17 	ldw	r2,236(r16)
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 400e4fc:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e500:	85403f17 	ldw	r21,252(r16)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 400e504:	1145c83a 	sub	r2,r2,r5
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 400e508:	90e9883a 	add	r20,r18,r3
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 400e50c:	10800044 	addi	r2,r2,1
 400e510:	a0800115 	stw	r2,4(r20)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e514:	80c7883a 	add	r3,r16,r3
 400e518:	19000e17 	ldw	r4,56(r3)
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 400e51c:	a1400015 	stw	r5,0(r20)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e520:	a80b883a 	mov	r5,r21
 400e524:	40007ec0 	call	40007ec <__divsi3>
 400e528:	a0800215 	stw	r2,8(r20)
        region_info[number_of_regions].block_size = flash->page_size;
 400e52c:	a5400315 	stw	r21,12(r20)

        number_of_regions++;
 400e530:	8c400044 	addi	r17,r17,1
 400e534:	003fc106 	br	400e43c <__ram_exceptions_end+0xfac0a2b0>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 400e538:	a03fee26 	beq	r20,zero,400e4f4 <__ram_exceptions_end+0xfac0a368>
 400e53c:	003fbf06 	br	400e43c <__ram_exceptions_end+0xfac0a2b0>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 400e540:	b03fbb1e 	bne	r22,zero,400e430 <__ram_exceptions_end+0xfac0a2a4>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 400e544:	81403717 	ldw	r5,220(r16)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 400e548:	80803817 	ldw	r2,224(r16)
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 400e54c:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e550:	85803f17 	ldw	r22,252(r16)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 400e554:	1145c83a 	sub	r2,r2,r5
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 400e558:	90eb883a 	add	r21,r18,r3
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 400e55c:	10800044 	addi	r2,r2,1
 400e560:	a8800115 	stw	r2,4(r21)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e564:	80c7883a 	add	r3,r16,r3
 400e568:	19000e17 	ldw	r4,56(r3)
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 400e56c:	a9400015 	stw	r5,0(r21)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e570:	b00b883a 	mov	r5,r22
 400e574:	40007ec0 	call	40007ec <__divsi3>
 400e578:	a8800215 	stw	r2,8(r21)
        region_info[number_of_regions].block_size = flash->page_size;
 400e57c:	ad800315 	stw	r22,12(r21)

        number_of_regions++;
 400e580:	8c400044 	addi	r17,r17,1
 400e584:	003faa06 	br	400e430 <__ram_exceptions_end+0xfac0a2a4>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 400e588:	a83fa61e 	bne	r21,zero,400e424 <__ram_exceptions_end+0xfac0a298>
 400e58c:	882a913a 	slli	r21,r17,4
 400e590:	8807883a 	mov	r3,r17
 400e594:	88a3883a 	add	r17,r17,r2

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 400e598:	81403417 	ldw	r5,208(r16)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 400e59c:	80803517 	ldw	r2,212(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e5a0:	1806913a 	slli	r3,r3,4
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 400e5a4:	956b883a 	add	r21,r18,r21
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 400e5a8:	1145c83a 	sub	r2,r2,r5
 400e5ac:	10800044 	addi	r2,r2,1
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e5b0:	85c03f17 	ldw	r23,252(r16)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 400e5b4:	a8800115 	stw	r2,4(r21)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e5b8:	80c5883a 	add	r2,r16,r3
 400e5bc:	11000e17 	ldw	r4,56(r2)
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 400e5c0:	a9400015 	stw	r5,0(r21)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e5c4:	b80b883a 	mov	r5,r23
 400e5c8:	40007ec0 	call	40007ec <__divsi3>
 400e5cc:	a8800215 	stw	r2,8(r21)
        region_info[number_of_regions].block_size = flash->page_size;
 400e5d0:	adc00315 	stw	r23,12(r21)
 400e5d4:	003f9306 	br	400e424 <__ram_exceptions_end+0xfac0a298>
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 400e5d8:	002b883a 	mov	r21,zero
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 400e5dc:	0027883a 	mov	r19,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 400e5e0:	0029883a 	mov	r20,zero
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
 400e5e4:	002d883a 	mov	r22,zero
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 400e5e8:	0007883a 	mov	r3,zero
 400e5ec:	003fea06 	br	400e598 <__ram_exceptions_end+0xfac0a40c>
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 400e5f0:	2100080c 	andi	r4,r4,32
 400e5f4:	203f871e 	bne	r4,zero,400e414 <__ram_exceptions_end+0xfac0a288>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
 400e5f8:	81003117 	ldw	r4,196(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 400e5fc:	80803217 	ldw	r2,200(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e600:	84403f17 	ldw	r17,252(r16)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector1_start_addr;
 400e604:	81000d15 	stw	r4,52(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 400e608:	1109c83a 	sub	r4,r2,r4
 400e60c:	21000044 	addi	r4,r4,1
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e610:	880b883a 	mov	r5,r17
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector1_start_addr;
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 400e614:	81000e15 	stw	r4,56(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 400e618:	40007ec0 	call	40007ec <__divsi3>
 400e61c:	80800f15 	stw	r2,60(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 400e620:	84401015 	stw	r17,64(r16)

        number_of_regions++;
 400e624:	04400044 	movi	r17,1
 400e628:	003f7b06 	br	400e418 <__ram_exceptions_end+0xfac0a28c>
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 400e62c:	0027883a 	mov	r19,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 400e630:	0029883a 	mov	r20,zero
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
 400e634:	002d883a 	mov	r22,zero
{
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
 400e638:	002b883a 	mov	r21,zero
 400e63c:	003fee06 	br	400e5f8 <__ram_exceptions_end+0xfac0a46c>
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 400e640:	0027883a 	mov	r19,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 400e644:	0029883a 	mov	r20,zero
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 400e648:	0023883a 	mov	r17,zero
 400e64c:	003fbd06 	br	400e544 <__ram_exceptions_end+0xfac0a3b8>

0400e650 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
 400e650:	defffd04 	addi	sp,sp,-12
 400e654:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e658:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
 400e65c:	dc400115 	stw	r17,4(sp)
 400e660:	dfc00215 	stw	ra,8(sp)
 400e664:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e668:	842b9804 	addi	r16,r16,-20896
 400e66c:	00000206 	br	400e678 <alt_onchip_flash_poll_for_status_to_go_idle+0x28>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400e670:	400e8cc0 	call	400e8cc <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400e674:	80000b26 	beq	r16,zero,400e6a4 <alt_onchip_flash_poll_for_status_to_go_idle+0x54>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400e678:	88802f17 	ldw	r2,188(r17)
 400e67c:	10800037 	ldwio	r2,0(r2)
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 400e680:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e684:	108000cc 	andi	r2,r2,3
 400e688:	843fffc4 	addi	r16,r16,-1
 400e68c:	103ff81e 	bne	r2,zero,400e670 <__ram_exceptions_end+0xfac0a4e4>
            }
        }
    }

    return ret_code;
}
 400e690:	dfc00217 	ldw	ra,8(sp)
 400e694:	dc400117 	ldw	r17,4(sp)
 400e698:	dc000017 	ldw	r16,0(sp)
 400e69c:	dec00304 	addi	sp,sp,12
 400e6a0:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400e6a4:	00bfe304 	movi	r2,-116
 400e6a8:	003ff906 	br	400e690 <__ram_exceptions_end+0xfac0a504>

0400e6ac <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
 400e6ac:	defffd04 	addi	sp,sp,-12
 400e6b0:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e6b4:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
 400e6b8:	dc400115 	stw	r17,4(sp)
 400e6bc:	dfc00215 	stw	ra,8(sp)
 400e6c0:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e6c4:	842b9804 	addi	r16,r16,-20896
 400e6c8:	00000206 	br	400e6d4 <alt_onchip_flash_poll_for_status_erase_passed+0x28>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 400e6cc:	400e8cc0 	call	400e8cc <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400e6d0:	80000c26 	beq	r16,zero,400e704 <alt_onchip_flash_poll_for_status_erase_passed+0x58>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400e6d4:	88802f17 	ldw	r2,188(r17)
 400e6d8:	10800037 	ldwio	r2,0(r2)
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 400e6dc:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e6e0:	1080040c 	andi	r2,r2,16
 400e6e4:	843fffc4 	addi	r16,r16,-1
 400e6e8:	103ff826 	beq	r2,zero,400e6cc <__ram_exceptions_end+0xfac0a540>
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
 400e6ec:	0005883a 	mov	r2,zero
            }
        }
    }

    return ret_code;
}
 400e6f0:	dfc00217 	ldw	ra,8(sp)
 400e6f4:	dc400117 	ldw	r17,4(sp)
 400e6f8:	dc000017 	ldw	r16,0(sp)
 400e6fc:	dec00304 	addi	sp,sp,12
 400e700:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400e704:	00bfe304 	movi	r2,-116
 400e708:	003ff906 	br	400e6f0 <__ram_exceptions_end+0xfac0a564>

0400e70c <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
 400e70c:	defffd04 	addi	sp,sp,-12
 400e710:	dc000015 	stw	r16,0(sp)
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e714:	040002f4 	movhi	r16,11
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
 400e718:	dc400115 	stw	r17,4(sp)
 400e71c:	dfc00215 	stw	ra,8(sp)
 400e720:	2023883a 	mov	r17,r4
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e724:	842b9804 	addi	r16,r16,-20896
 400e728:	00000206 	br	400e734 <alt_onchip_flash_poll_for_status_write_passed+0x28>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 400e72c:	400e8cc0 	call	400e8cc <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
 400e730:	80000c26 	beq	r16,zero,400e764 <alt_onchip_flash_poll_for_status_write_passed+0x58>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 400e734:	88802f17 	ldw	r2,188(r17)
 400e738:	10800037 	ldwio	r2,0(r2)
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 400e73c:	01000044 	movi	r4,1
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 400e740:	1080020c 	andi	r2,r2,8
 400e744:	843fffc4 	addi	r16,r16,-1
 400e748:	103ff826 	beq	r2,zero,400e72c <__ram_exceptions_end+0xfac0a5a0>
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
 400e74c:	0005883a 	mov	r2,zero
            }
        }
    }

    return ret_code;
}
 400e750:	dfc00217 	ldw	ra,8(sp)
 400e754:	dc400117 	ldw	r17,4(sp)
 400e758:	dc000017 	ldw	r16,0(sp)
 400e75c:	dec00304 	addi	sp,sp,12
 400e760:	f800283a 	ret
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
                /* Timeout */
                ret_code = -ETIMEDOUT;
 400e764:	00bfe304 	movi	r2,-116
 400e768:	003ff906 	br	400e750 <__ram_exceptions_end+0xfac0a5c4>

0400e76c <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 400e76c:	d1600804 	addi	r5,gp,-32736
 400e770:	400ea081 	jmpi	400ea08 <alt_find_dev>

0400e774 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 400e774:	20800a17 	ldw	r2,40(r4)
 400e778:	10c00023 	ldbuio	r3,0(r2)

	return 0;
}
 400e77c:	0005883a 	mov	r2,zero
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 400e780:	28c00005 	stb	r3,0(r5)

	return 0;
}
 400e784:	f800283a 	ret

0400e788 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e788:	20800a17 	ldw	r2,40(r4)
 400e78c:	29400fcc 	andi	r5,r5,63
 400e790:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400e794:	20800a17 	ldw	r2,40(r4)
 400e798:	10c00063 	ldbuio	r3,1(r2)

	return 0;
}
 400e79c:	0005883a 	mov	r2,zero
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400e7a0:	30c00005 	stb	r3,0(r6)

	return 0;
}
 400e7a4:	f800283a 	ret

0400e7a8 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e7a8:	20800a17 	ldw	r2,40(r4)
 400e7ac:	29400fcc 	andi	r5,r5,63
 400e7b0:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 400e7b4:	20800a17 	ldw	r2,40(r4)
 400e7b8:	11800065 	stbio	r6,1(r2)

	return 0;
}
 400e7bc:	0005883a 	mov	r2,zero
 400e7c0:	f800283a 	ret

0400e7c4 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e7c4:	20800a17 	ldw	r2,40(r4)
 400e7c8:	00c00c84 	movi	r3,50
 400e7cc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400e7d0:	20800a17 	ldw	r2,40(r4)
 400e7d4:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e7d8:	20c00a17 	ldw	r3,40(r4)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400e7dc:	10803fcc 	andi	r2,r2,255
 400e7e0:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e7e4:	00800cc4 	movi	r2,51
 400e7e8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 400e7ec:	20800a17 	ldw	r2,40(r4)
 400e7f0:	10800063 	ldbuio	r2,1(r2)
 400e7f4:	10803fcc 	andi	r2,r2,255
 400e7f8:	1006923a 	slli	r3,r2,8
 400e7fc:	28800017 	ldw	r2,0(r5)
 400e800:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
 400e804:	10e0000c 	andi	r3,r2,32768
 400e808:	18000126 	beq	r3,zero,400e810 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
 400e80c:	10bffff4 	orhi	r2,r2,65535
 400e810:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
 400e814:	0005883a 	mov	r2,zero
 400e818:	f800283a 	ret

0400e81c <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e81c:	20800a17 	ldw	r2,40(r4)
 400e820:	00c00d04 	movi	r3,52
 400e824:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400e828:	20800a17 	ldw	r2,40(r4)
 400e82c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e830:	20c00a17 	ldw	r3,40(r4)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400e834:	10803fcc 	andi	r2,r2,255
 400e838:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e83c:	00800d44 	movi	r2,53
 400e840:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 400e844:	20800a17 	ldw	r2,40(r4)
 400e848:	10800063 	ldbuio	r2,1(r2)
 400e84c:	10803fcc 	andi	r2,r2,255
 400e850:	1006923a 	slli	r3,r2,8
 400e854:	28800017 	ldw	r2,0(r5)
 400e858:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
 400e85c:	10e0000c 	andi	r3,r2,32768
 400e860:	18000126 	beq	r3,zero,400e868 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
 400e864:	10bffff4 	orhi	r2,r2,65535
 400e868:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
 400e86c:	0005883a 	mov	r2,zero
 400e870:	f800283a 	ret

0400e874 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e874:	20800a17 	ldw	r2,40(r4)
 400e878:	00c00d84 	movi	r3,54
 400e87c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400e880:	20800a17 	ldw	r2,40(r4)
 400e884:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e888:	20c00a17 	ldw	r3,40(r4)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 400e88c:	10803fcc 	andi	r2,r2,255
 400e890:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 400e894:	00800dc4 	movi	r2,55
 400e898:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 400e89c:	20800a17 	ldw	r2,40(r4)
 400e8a0:	10800063 	ldbuio	r2,1(r2)
 400e8a4:	10803fcc 	andi	r2,r2,255
 400e8a8:	1006923a 	slli	r3,r2,8
 400e8ac:	28800017 	ldw	r2,0(r5)
 400e8b0:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
 400e8b4:	10e0000c 	andi	r3,r2,32768
 400e8b8:	18000126 	beq	r3,zero,400e8c0 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
 400e8bc:	10bffff4 	orhi	r2,r2,65535
 400e8c0:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
 400e8c4:	0005883a 	mov	r2,zero
 400e8c8:	f800283a 	ret

0400e8cc <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 400e8cc:	01413b34 	movhi	r5,1260
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400e8d0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 400e8d4:	2953b104 	addi	r5,r5,20164
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400e8d8:	dc000015 	stw	r16,0(sp)
 400e8dc:	dfc00115 	stw	ra,4(sp)
 400e8e0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 400e8e4:	40008e40 	call	40008e4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 400e8e8:	10001226 	beq	r2,zero,400e934 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400e8ec:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400e8f0:	013ec534 	movhi	r4,64276
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400e8f4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400e8f8:	212c4f04 	addi	r4,r4,-20164
 400e8fc:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400e900:	297fffc4 	addi	r5,r5,-1
 400e904:	283ffe1e 	bne	r5,zero,400e900 <__ram_exceptions_end+0xfac0a774>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 400e908:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400e90c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 400e910:	18bffb16 	blt	r3,r2,400e900 <__ram_exceptions_end+0xfac0a774>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400e914:	840006a4 	muli	r16,r16,26
 400e918:	843fffc4 	addi	r16,r16,-1
 400e91c:	803ffe1e 	bne	r16,zero,400e918 <__ram_exceptions_end+0xfac0a78c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 400e920:	0005883a 	mov	r2,zero
 400e924:	dfc00117 	ldw	ra,4(sp)
 400e928:	dc000017 	ldw	r16,0(sp)
 400e92c:	dec00204 	addi	sp,sp,8
 400e930:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400e934:	840006a4 	muli	r16,r16,26
 400e938:	843fffc4 	addi	r16,r16,-1
 400e93c:	043ffe16 	blt	zero,r16,400e938 <__ram_exceptions_end+0xfac0a7ac>
 400e940:	003ff706 	br	400e920 <__ram_exceptions_end+0xfac0a794>

0400e944 <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
 400e944:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 400e948:	2005883a 	mov	r2,r4
 400e94c:	2140092e 	bgeu	r4,r5,400e974 <alt_dcache_flush+0x30>
  { 
    ALT_FLUSH_DATA(i); 
 400e950:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 400e954:	10800804 	addi	r2,r2,32
 400e958:	117ffd36 	bltu	r2,r5,400e950 <__ram_exceptions_end+0xfac0a7c4>
 400e95c:	0104303a 	nor	r2,zero,r4
 400e960:	1145883a 	add	r2,r2,r5
 400e964:	1004d17a 	srli	r2,r2,5
 400e968:	10800044 	addi	r2,r2,1
 400e96c:	1004917a 	slli	r2,r2,5
 400e970:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 400e974:	210007cc 	andi	r4,r4,31
 400e978:	20000126 	beq	r4,zero,400e980 <alt_dcache_flush+0x3c>
  {
    ALT_FLUSH_DATA(i);
 400e97c:	1000001b 	flushda	0(r2)
 400e980:	f800283a 	ret

0400e984 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400e984:	0005883a 	mov	r2,zero
 400e988:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400e98c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 400e990:	10800804 	addi	r2,r2,32
 400e994:	10fffd1e 	bne	r2,r3,400e98c <__ram_exceptions_end+0xfac0a800>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400e998:	f800283a 	ret

0400e99c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400e99c:	20000a26 	beq	r4,zero,400e9c8 <alt_dev_llist_insert+0x2c>
 400e9a0:	20800217 	ldw	r2,8(r4)
 400e9a4:	10000826 	beq	r2,zero,400e9c8 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 400e9a8:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400e9ac:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 400e9b0:	0005883a 	mov	r2,zero
  entry->next     = list->next;
 400e9b4:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
 400e9b8:	28c00017 	ldw	r3,0(r5)
 400e9bc:	19000115 	stw	r4,4(r3)
  list->next           = entry;
 400e9c0:	29000015 	stw	r4,0(r5)
 400e9c4:	f800283a 	ret
 400e9c8:	d0a00c17 	ldw	r2,-32720(gp)
 400e9cc:	10000926 	beq	r2,zero,400e9f4 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400e9d0:	deffff04 	addi	sp,sp,-4
 400e9d4:	dfc00015 	stw	ra,0(sp)
 400e9d8:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 400e9dc:	00c00584 	movi	r3,22
 400e9e0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 400e9e4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 400e9e8:	dfc00017 	ldw	ra,0(sp)
 400e9ec:	dec00104 	addi	sp,sp,4
 400e9f0:	f800283a 	ret
 400e9f4:	d0a33904 	addi	r2,gp,-29468
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 400e9f8:	00c00584 	movi	r3,22
 400e9fc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 400ea00:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 400ea04:	f800283a 	ret

0400ea08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400ea08:	defffb04 	addi	sp,sp,-20
 400ea0c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
 400ea10:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400ea14:	dc400115 	stw	r17,4(sp)
 400ea18:	2823883a 	mov	r17,r5
 400ea1c:	dcc00315 	stw	r19,12(sp)
 400ea20:	dfc00415 	stw	ra,16(sp)
 400ea24:	dc800215 	stw	r18,8(sp)
 400ea28:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
 400ea2c:	40073900 	call	4007390 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400ea30:	8c000b26 	beq	r17,r16,400ea60 <alt_find_dev+0x58>
 400ea34:	14800044 	addi	r18,r2,1
 400ea38:	00000206 	br	400ea44 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 400ea3c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400ea40:	8c000726 	beq	r17,r16,400ea60 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400ea44:	81000217 	ldw	r4,8(r16)
 400ea48:	900d883a 	mov	r6,r18
 400ea4c:	980b883a 	mov	r5,r19
 400ea50:	400f0f40 	call	400f0f4 <memcmp>
 400ea54:	103ff91e 	bne	r2,zero,400ea3c <__ram_exceptions_end+0xfac0a8b0>
 400ea58:	8005883a 	mov	r2,r16
 400ea5c:	00000106 	br	400ea64 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400ea60:	0005883a 	mov	r2,zero
}
 400ea64:	dfc00417 	ldw	ra,16(sp)
 400ea68:	dcc00317 	ldw	r19,12(sp)
 400ea6c:	dc800217 	ldw	r18,8(sp)
 400ea70:	dc400117 	ldw	r17,4(sp)
 400ea74:	dc000017 	ldw	r16,0(sp)
 400ea78:	dec00504 	addi	sp,sp,20
 400ea7c:	f800283a 	ret

0400ea80 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 400ea80:	defffe04 	addi	sp,sp,-8
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 400ea84:	d1601404 	addi	r5,gp,-32688
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 400ea88:	dc000015 	stw	r16,0(sp)
 400ea8c:	dfc00115 	stw	ra,4(sp)
 400ea90:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 400ea94:	400ea080 	call	400ea08 <alt_find_dev>

  if ((dev) && dev->open)
 400ea98:	10000826 	beq	r2,zero,400eabc <alt_flash_open_dev+0x3c>
 400ea9c:	10c00317 	ldw	r3,12(r2)
 400eaa0:	18000726 	beq	r3,zero,400eac0 <alt_flash_open_dev+0x40>
  {
    return dev->open(dev, name);
 400eaa4:	800b883a 	mov	r5,r16
 400eaa8:	1009883a 	mov	r4,r2
  }

  return dev;
}
 400eaac:	dfc00117 	ldw	ra,4(sp)
 400eab0:	dc000017 	ldw	r16,0(sp)
 400eab4:	dec00204 	addi	sp,sp,8
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
  {
    return dev->open(dev, name);
 400eab8:	1800683a 	jmp	r3
 400eabc:	0005883a 	mov	r2,zero
  }

  return dev;
}
 400eac0:	dfc00117 	ldw	ra,4(sp)
 400eac4:	dc000017 	ldw	r16,0(sp)
 400eac8:	dec00204 	addi	sp,sp,8
 400eacc:	f800283a 	ret

0400ead0 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  if (fd && fd->close)
 400ead0:	20000326 	beq	r4,zero,400eae0 <alt_flash_close_dev+0x10>
 400ead4:	20800417 	ldw	r2,16(r4)
 400ead8:	10000126 	beq	r2,zero,400eae0 <alt_flash_close_dev+0x10>
  {
    fd->close(fd);
 400eadc:	1000683a 	jmp	r2
 400eae0:	f800283a 	ret

0400eae4 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400eae4:	01420004 	movi	r5,2048
 400eae8:	0009883a 	mov	r4,zero
 400eaec:	400ef001 	jmpi	400ef00 <alt_icache_flush>

0400eaf0 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
 400eaf0:	defffe04 	addi	sp,sp,-8
 400eaf4:	2805883a 	mov	r2,r5
 400eaf8:	dc000015 	stw	r16,0(sp)
 400eafc:	300b883a 	mov	r5,r6
 400eb00:	2021883a 	mov	r16,r4
{
  int old;

  old = open (name, flags, mode);
 400eb04:	01807fc4 	movi	r6,511
 400eb08:	1009883a 	mov	r4,r2
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
 400eb0c:	dfc00115 	stw	ra,4(sp)
{
  int old;

  old = open (name, flags, mode);
 400eb10:	400ec840 	call	400ec84 <open>

  if (old >= 0)
 400eb14:	10000f16 	blt	r2,zero,400eb54 <alt_open_fd.constprop.0+0x64>
  {
    fd->dev      = alt_fd_list[old].dev;
 400eb18:	10c00324 	muli	r3,r2,12
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 400eb1c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 400eb20:	00810074 	movhi	r2,1025
 400eb24:	10819404 	addi	r2,r2,1616
 400eb28:	10c5883a 	add	r2,r2,r3
 400eb2c:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400eb30:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 400eb34:	81400015 	stw	r5,0(r16)
    fd->priv     = alt_fd_list[old].priv;
 400eb38:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400eb3c:	80c00215 	stw	r3,8(r16)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
 400eb40:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
 400eb44:	dfc00117 	ldw	ra,4(sp)
 400eb48:	dc000017 	ldw	r16,0(sp)
 400eb4c:	dec00204 	addi	sp,sp,8
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 400eb50:	400d6bc1 	jmpi	400d6bc <alt_release_fd>
  }
} 
 400eb54:	dfc00117 	ldw	ra,4(sp)
 400eb58:	dc000017 	ldw	r16,0(sp)
 400eb5c:	dec00204 	addi	sp,sp,8
 400eb60:	f800283a 	ret

0400eb64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400eb64:	defffb04 	addi	sp,sp,-20
 400eb68:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400eb6c:	04010074 	movhi	r16,1025
 400eb70:	84019704 	addi	r16,r16,1628
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400eb74:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400eb78:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400eb7c:	dcc00315 	stw	r19,12(sp)
 400eb80:	dc800215 	stw	r18,8(sp)
 400eb84:	2827883a 	mov	r19,r5
 400eb88:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400eb8c:	200b883a 	mov	r5,r4
 400eb90:	880d883a 	mov	r6,r17
 400eb94:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400eb98:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400eb9c:	400eaf00 	call	400eaf0 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400eba0:	813ffd04 	addi	r4,r16,-12
 400eba4:	980b883a 	mov	r5,r19
 400eba8:	000d883a 	mov	r6,zero
 400ebac:	400eaf00 	call	400eaf0 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400ebb0:	880d883a 	mov	r6,r17
 400ebb4:	900b883a 	mov	r5,r18
 400ebb8:	81000304 	addi	r4,r16,12
}  
 400ebbc:	dfc00417 	ldw	ra,16(sp)
 400ebc0:	dcc00317 	ldw	r19,12(sp)
 400ebc4:	dc800217 	ldw	r18,8(sp)
 400ebc8:	dc400117 	ldw	r17,4(sp)
 400ebcc:	dc000017 	ldw	r16,0(sp)
 400ebd0:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400ebd4:	400eaf01 	jmpi	400eaf0 <alt_open_fd.constprop.0>

0400ebd8 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400ebd8:	008007c4 	movi	r2,31
 400ebdc:	11002736 	bltu	r2,r4,400ec7c <alt_irq_register+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ebe0:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ebe4:	00bfff84 	movi	r2,-2
 400ebe8:	3886703a 	and	r3,r7,r2
 400ebec:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
 400ebf0:	200690fa 	slli	r3,r4,3
 400ebf4:	02010074 	movhi	r8,1025
 400ebf8:	4205c604 	addi	r8,r8,5912
 400ebfc:	40c7883a 	add	r3,r8,r3
 400ec00:	19800015 	stw	r6,0(r3)
    alt_irq[id].context = context;
 400ec04:	19400115 	stw	r5,4(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 400ec08:	30000e26 	beq	r6,zero,400ec44 <alt_irq_register+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ec0c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ec10:	2884703a 	and	r2,r5,r2
 400ec14:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 400ec18:	00c00044 	movi	r3,1
 400ec1c:	d0a33f17 	ldw	r2,-29444(gp)
 400ec20:	1908983a 	sll	r4,r3,r4
 400ec24:	2088b03a 	or	r4,r4,r2
 400ec28:	d1233f15 	stw	r4,-29444(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400ec2c:	d0a33f17 	ldw	r2,-29444(gp)
 400ec30:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ec34:	2801703a 	wrctl	status,r5
 400ec38:	3801703a 	wrctl	status,r7
 400ec3c:	0005883a 	mov	r2,zero
 400ec40:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ec44:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ec48:	2884703a 	and	r2,r5,r2
 400ec4c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 400ec50:	00ffff84 	movi	r3,-2
 400ec54:	d0a33f17 	ldw	r2,-29444(gp)
 400ec58:	1908183a 	rol	r4,r3,r4
 400ec5c:	2088703a 	and	r4,r4,r2
 400ec60:	d1233f15 	stw	r4,-29444(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400ec64:	d0a33f17 	ldw	r2,-29444(gp)
 400ec68:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ec6c:	2801703a 	wrctl	status,r5
 400ec70:	3801703a 	wrctl	status,r7
 400ec74:	0005883a 	mov	r2,zero
 400ec78:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
 400ec7c:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
 400ec80:	f800283a 	ret

0400ec84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400ec84:	defffa04 	addi	sp,sp,-24
 400ec88:	dc000015 	stw	r16,0(sp)
 400ec8c:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400ec90:	d1600804 	addi	r5,gp,-32736
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400ec94:	dc800215 	stw	r18,8(sp)
 400ec98:	dc400115 	stw	r17,4(sp)
 400ec9c:	dfc00515 	stw	ra,20(sp)
 400eca0:	dd000415 	stw	r20,16(sp)
 400eca4:	dcc00315 	stw	r19,12(sp)
 400eca8:	2023883a 	mov	r17,r4
 400ecac:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400ecb0:	400ea080 	call	400ea08 <alt_find_dev>
 400ecb4:	10004626 	beq	r2,zero,400edd0 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 400ecb8:	1009883a 	mov	r4,r2
 400ecbc:	1029883a 	mov	r20,r2
 400ecc0:	400eeb00 	call	400eeb0 <alt_get_fd>
 400ecc4:	1027883a 	mov	r19,r2
 400ecc8:	1000090e 	bge	r2,zero,400ecf0 <open+0x6c>
 400eccc:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
 400ecd0:	9809883a 	mov	r4,r19
 400ecd4:	400d6bc0 	call	400d6bc <alt_release_fd>
 400ecd8:	d0a00c17 	ldw	r2,-32720(gp)
 400ecdc:	10004326 	beq	r2,zero,400edec <open+0x168>
 400ece0:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
 400ece4:	14000015 	stw	r16,0(r2)
    return -1;
 400ece8:	00bfffc4 	movi	r2,-1
 400ecec:	00002e06 	br	400eda8 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 400ecf0:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400ecf4:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 400ecf8:	00810074 	movhi	r2,1025

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400ecfc:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 400ed00:	10819404 	addi	r2,r2,1616

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400ed04:	80c6703a 	and	r3,r16,r3
 400ed08:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 400ed0c:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400ed10:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400ed14:	d2200717 	ldw	r8,-32740(gp)
 400ed18:	21c00017 	ldw	r7,0(r4)
 400ed1c:	11400204 	addi	r5,r2,8
 400ed20:	0007883a 	mov	r3,zero
 400ed24:	00000306 	br	400ed34 <open+0xb0>
 400ed28:	10800304 	addi	r2,r2,12
 400ed2c:	29400304 	addi	r5,r5,12
 400ed30:	40c01436 	bltu	r8,r3,400ed84 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400ed34:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400ed38:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400ed3c:	31fffa1e 	bne	r6,r7,400ed28 <__ram_exceptions_end+0xfac0ab9c>
 400ed40:	29800017 	ldw	r6,0(r5)
 400ed44:	303ff80e 	bge	r6,zero,400ed28 <__ram_exceptions_end+0xfac0ab9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400ed48:	20bff726 	beq	r4,r2,400ed28 <__ram_exceptions_end+0xfac0ab9c>
 400ed4c:	04000344 	movi	r16,13
 400ed50:	003fdf06 	br	400ecd0 <__ram_exceptions_end+0xfac0ab44>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 400ed54:	1009883a 	mov	r4,r2
 400ed58:	400eeb00 	call	400eeb0 <alt_get_fd>
 400ed5c:	1027883a 	mov	r19,r2
 400ed60:	103fda16 	blt	r2,zero,400eccc <__ram_exceptions_end+0xfac0ab40>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 400ed64:	99000324 	muli	r4,r19,12
 400ed68:	00810074 	movhi	r2,1025
 400ed6c:	10819404 	addi	r2,r2,1616
 400ed70:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400ed74:	00900034 	movhi	r2,16384
 400ed78:	10bfffc4 	addi	r2,r2,-1
 400ed7c:	8084703a 	and	r2,r16,r2
 400ed80:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400ed84:	a0800317 	ldw	r2,12(r20)
 400ed88:	10000f26 	beq	r2,zero,400edc8 <open+0x144>
 400ed8c:	900f883a 	mov	r7,r18
 400ed90:	800d883a 	mov	r6,r16
 400ed94:	880b883a 	mov	r5,r17
 400ed98:	103ee83a 	callr	r2
 400ed9c:	1007883a 	mov	r3,r2
 400eda0:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400eda4:	18001316 	blt	r3,zero,400edf4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
 400eda8:	dfc00517 	ldw	ra,20(sp)
 400edac:	dd000417 	ldw	r20,16(sp)
 400edb0:	dcc00317 	ldw	r19,12(sp)
 400edb4:	dc800217 	ldw	r18,8(sp)
 400edb8:	dc400117 	ldw	r17,4(sp)
 400edbc:	dc000017 	ldw	r16,0(sp)
 400edc0:	dec00604 	addi	sp,sp,24
 400edc4:	f800283a 	ret
 400edc8:	9805883a 	mov	r2,r19
 400edcc:	003ff606 	br	400eda8 <__ram_exceptions_end+0xfac0ac1c>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400edd0:	8809883a 	mov	r4,r17
 400edd4:	400ee040 	call	400ee04 <alt_find_file>
 400edd8:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400eddc:	103fdd1e 	bne	r2,zero,400ed54 <__ram_exceptions_end+0xfac0abc8>
 400ede0:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400ede4:	04ffffc4 	movi	r19,-1
 400ede8:	003fb906 	br	400ecd0 <__ram_exceptions_end+0xfac0ab44>
 400edec:	d0a33904 	addi	r2,gp,-29468
 400edf0:	003fbc06 	br	400ece4 <__ram_exceptions_end+0xfac0ab58>
 400edf4:	00e1c83a 	sub	r16,zero,r3
 400edf8:	003fb506 	br	400ecd0 <__ram_exceptions_end+0xfac0ab44>

0400edfc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 400edfc:	000170fa 	wrctl	ienable,zero
 400ee00:	f800283a 	ret

0400ee04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400ee04:	defffa04 	addi	sp,sp,-24
 400ee08:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400ee0c:	d4200a17 	ldw	r16,-32728(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400ee10:	dd000415 	stw	r20,16(sp)
 400ee14:	dfc00515 	stw	ra,20(sp)
 400ee18:	dcc00315 	stw	r19,12(sp)
 400ee1c:	dc800215 	stw	r18,8(sp)
 400ee20:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400ee24:	d5200a04 	addi	r20,gp,-32728
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400ee28:	85001626 	beq	r16,r20,400ee84 <alt_find_file+0x80>
 400ee2c:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 400ee30:	04c00bc4 	movi	r19,47
 400ee34:	00000806 	br	400ee58 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400ee38:	9185883a 	add	r2,r18,r6
 400ee3c:	10800007 	ldb	r2,0(r2)
 400ee40:	14c00126 	beq	r2,r19,400ee48 <alt_find_file+0x44>
 400ee44:	1000021e 	bne	r2,zero,400ee50 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
 400ee48:	400f0f40 	call	400f0f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400ee4c:	10001626 	beq	r2,zero,400eea8 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 400ee50:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400ee54:	85000b26 	beq	r16,r20,400ee84 <alt_find_file+0x80>
  {
    len = strlen(next->name);
 400ee58:	84400217 	ldw	r17,8(r16)
 400ee5c:	8809883a 	mov	r4,r17
 400ee60:	40073900 	call	4007390 <strlen>
 400ee64:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
 400ee68:	8885883a 	add	r2,r17,r2
 400ee6c:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
 400ee70:	900b883a 	mov	r5,r18
 400ee74:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 400ee78:	14ffef1e 	bne	r2,r19,400ee38 <__ram_exceptions_end+0xfac0acac>
    {
      len -= 1;
 400ee7c:	31bfffc4 	addi	r6,r6,-1
 400ee80:	003fed06 	br	400ee38 <__ram_exceptions_end+0xfac0acac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400ee84:	0005883a 	mov	r2,zero
}
 400ee88:	dfc00517 	ldw	ra,20(sp)
 400ee8c:	dd000417 	ldw	r20,16(sp)
 400ee90:	dcc00317 	ldw	r19,12(sp)
 400ee94:	dc800217 	ldw	r18,8(sp)
 400ee98:	dc400117 	ldw	r17,4(sp)
 400ee9c:	dc000017 	ldw	r16,0(sp)
 400eea0:	dec00604 	addi	sp,sp,24
 400eea4:	f800283a 	ret
 400eea8:	8005883a 	mov	r2,r16
 400eeac:	003ff606 	br	400ee88 <__ram_exceptions_end+0xfac0acfc>

0400eeb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400eeb0:	01c10074 	movhi	r7,1025
 400eeb4:	39c19404 	addi	r7,r7,1616
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400eeb8:	0005883a 	mov	r2,zero
 400eebc:	3807883a 	mov	r3,r7
 400eec0:	01800804 	movi	r6,32
 400eec4:	00000206 	br	400eed0 <alt_get_fd+0x20>
 400eec8:	10800044 	addi	r2,r2,1
 400eecc:	11800a26 	beq	r2,r6,400eef8 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
 400eed0:	19400017 	ldw	r5,0(r3)
 400eed4:	18c00304 	addi	r3,r3,12
 400eed8:	283ffb1e 	bne	r5,zero,400eec8 <__ram_exceptions_end+0xfac0ad3c>
    {
      alt_fd_list[i].dev = dev;
 400eedc:	10c00324 	muli	r3,r2,12
 400eee0:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
 400eee4:	d0e00717 	ldw	r3,-32740(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
 400eee8:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
 400eeec:	1880030e 	bge	r3,r2,400eefc <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
 400eef0:	d0a00715 	stw	r2,-32740(gp)
 400eef4:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
 400eef8:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
 400eefc:	f800283a 	ret

0400ef00 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 400ef00:	00820004 	movi	r2,2048
 400ef04:	1140012e 	bgeu	r2,r5,400ef0c <alt_icache_flush+0xc>
 400ef08:	100b883a 	mov	r5,r2
 400ef0c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400ef10:	2005883a 	mov	r2,r4
 400ef14:	2140092e 	bgeu	r4,r5,400ef3c <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400ef18:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400ef1c:	10800804 	addi	r2,r2,32
 400ef20:	117ffd36 	bltu	r2,r5,400ef18 <__ram_exceptions_end+0xfac0ad8c>
 400ef24:	0104303a 	nor	r2,zero,r4
 400ef28:	2885883a 	add	r2,r5,r2
 400ef2c:	1004d17a 	srli	r2,r2,5
 400ef30:	10800044 	addi	r2,r2,1
 400ef34:	1004917a 	slli	r2,r2,5
 400ef38:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400ef3c:	210007cc 	andi	r4,r4,31
 400ef40:	20000126 	beq	r4,zero,400ef48 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400ef44:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400ef48:	0000203a 	flushp
 400ef4c:	f800283a 	ret

0400ef50 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 400ef50:	213ffe84 	addi	r4,r4,-6
 400ef54:	008003c4 	movi	r2,15
 400ef58:	11001636 	bltu	r2,r4,400efb4 <alt_exception_cause_generated_bad_addr+0x64>
 400ef5c:	200890ba 	slli	r4,r4,2
 400ef60:	00810074 	movhi	r2,1025
 400ef64:	10bbdd04 	addi	r2,r2,-4236
 400ef68:	2089883a 	add	r4,r4,r2
 400ef6c:	20800017 	ldw	r2,0(r4)
 400ef70:	1000683a 	jmp	r2
 400ef74:	0400efbc 	xorhi	r16,zero,958
 400ef78:	0400efbc 	xorhi	r16,zero,958
 400ef7c:	0400efb4 	movhi	r16,958
 400ef80:	0400efb4 	movhi	r16,958
 400ef84:	0400efb4 	movhi	r16,958
 400ef88:	0400efbc 	xorhi	r16,zero,958
 400ef8c:	0400efb4 	movhi	r16,958
 400ef90:	0400efb4 	movhi	r16,958
 400ef94:	0400efbc 	xorhi	r16,zero,958
 400ef98:	0400efbc 	xorhi	r16,zero,958
 400ef9c:	0400efb4 	movhi	r16,958
 400efa0:	0400efbc 	xorhi	r16,zero,958
 400efa4:	0400efb4 	movhi	r16,958
 400efa8:	0400efb4 	movhi	r16,958
 400efac:	0400efb4 	movhi	r16,958
 400efb0:	0400efbc 	xorhi	r16,zero,958
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400efb4:	0005883a 	mov	r2,zero
 400efb8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400efbc:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 400efc0:	f800283a 	ret

0400efc4 <exit>:
 400efc4:	defffe04 	addi	sp,sp,-8
 400efc8:	000b883a 	mov	r5,zero
 400efcc:	dc000015 	stw	r16,0(sp)
 400efd0:	dfc00115 	stw	ra,4(sp)
 400efd4:	2021883a 	mov	r16,r4
 400efd8:	400f3600 	call	400f360 <__call_exitprocs>
 400efdc:	00810074 	movhi	r2,1025
 400efe0:	10826404 	addi	r2,r2,2448
 400efe4:	11000017 	ldw	r4,0(r2)
 400efe8:	20800f17 	ldw	r2,60(r4)
 400efec:	10000126 	beq	r2,zero,400eff4 <exit+0x30>
 400eff0:	103ee83a 	callr	r2
 400eff4:	8009883a 	mov	r4,r16
 400eff8:	400f6d00 	call	400f6d0 <_exit>

0400effc <_getc_r>:
 400effc:	defffd04 	addi	sp,sp,-12
 400f000:	dc000115 	stw	r16,4(sp)
 400f004:	dfc00215 	stw	ra,8(sp)
 400f008:	2021883a 	mov	r16,r4
 400f00c:	20000226 	beq	r4,zero,400f018 <_getc_r+0x1c>
 400f010:	20800e17 	ldw	r2,56(r4)
 400f014:	10000c26 	beq	r2,zero,400f048 <_getc_r+0x4c>
 400f018:	28800117 	ldw	r2,4(r5)
 400f01c:	10bfffc4 	addi	r2,r2,-1
 400f020:	28800115 	stw	r2,4(r5)
 400f024:	10000c16 	blt	r2,zero,400f058 <_getc_r+0x5c>
 400f028:	28800017 	ldw	r2,0(r5)
 400f02c:	10c00044 	addi	r3,r2,1
 400f030:	28c00015 	stw	r3,0(r5)
 400f034:	10800003 	ldbu	r2,0(r2)
 400f038:	dfc00217 	ldw	ra,8(sp)
 400f03c:	dc000117 	ldw	r16,4(sp)
 400f040:	dec00304 	addi	sp,sp,12
 400f044:	f800283a 	ret
 400f048:	d9400015 	stw	r5,0(sp)
 400f04c:	4004cb00 	call	4004cb0 <__sinit>
 400f050:	d9400017 	ldw	r5,0(sp)
 400f054:	003ff006 	br	400f018 <__ram_exceptions_end+0xfac0ae8c>
 400f058:	8009883a 	mov	r4,r16
 400f05c:	dfc00217 	ldw	ra,8(sp)
 400f060:	dc000117 	ldw	r16,4(sp)
 400f064:	dec00304 	addi	sp,sp,12
 400f068:	400f2d81 	jmpi	400f2d8 <__srget_r>

0400f06c <getc>:
 400f06c:	00810074 	movhi	r2,1025
 400f070:	defffd04 	addi	sp,sp,-12
 400f074:	10826504 	addi	r2,r2,2452
 400f078:	dc400115 	stw	r17,4(sp)
 400f07c:	14400017 	ldw	r17,0(r2)
 400f080:	dc000015 	stw	r16,0(sp)
 400f084:	dfc00215 	stw	ra,8(sp)
 400f088:	2021883a 	mov	r16,r4
 400f08c:	88000226 	beq	r17,zero,400f098 <getc+0x2c>
 400f090:	88800e17 	ldw	r2,56(r17)
 400f094:	10000d26 	beq	r2,zero,400f0cc <getc+0x60>
 400f098:	80800117 	ldw	r2,4(r16)
 400f09c:	10bfffc4 	addi	r2,r2,-1
 400f0a0:	80800115 	stw	r2,4(r16)
 400f0a4:	10000c16 	blt	r2,zero,400f0d8 <getc+0x6c>
 400f0a8:	80800017 	ldw	r2,0(r16)
 400f0ac:	10c00044 	addi	r3,r2,1
 400f0b0:	80c00015 	stw	r3,0(r16)
 400f0b4:	10800003 	ldbu	r2,0(r2)
 400f0b8:	dfc00217 	ldw	ra,8(sp)
 400f0bc:	dc400117 	ldw	r17,4(sp)
 400f0c0:	dc000017 	ldw	r16,0(sp)
 400f0c4:	dec00304 	addi	sp,sp,12
 400f0c8:	f800283a 	ret
 400f0cc:	8809883a 	mov	r4,r17
 400f0d0:	4004cb00 	call	4004cb0 <__sinit>
 400f0d4:	003ff006 	br	400f098 <__ram_exceptions_end+0xfac0af0c>
 400f0d8:	800b883a 	mov	r5,r16
 400f0dc:	8809883a 	mov	r4,r17
 400f0e0:	dfc00217 	ldw	ra,8(sp)
 400f0e4:	dc400117 	ldw	r17,4(sp)
 400f0e8:	dc000017 	ldw	r16,0(sp)
 400f0ec:	dec00304 	addi	sp,sp,12
 400f0f0:	400f2d81 	jmpi	400f2d8 <__srget_r>

0400f0f4 <memcmp>:
 400f0f4:	01c000c4 	movi	r7,3
 400f0f8:	3980192e 	bgeu	r7,r6,400f160 <memcmp+0x6c>
 400f0fc:	2144b03a 	or	r2,r4,r5
 400f100:	11c4703a 	and	r2,r2,r7
 400f104:	10000f26 	beq	r2,zero,400f144 <memcmp+0x50>
 400f108:	20800003 	ldbu	r2,0(r4)
 400f10c:	28c00003 	ldbu	r3,0(r5)
 400f110:	10c0151e 	bne	r2,r3,400f168 <memcmp+0x74>
 400f114:	31bfff84 	addi	r6,r6,-2
 400f118:	01ffffc4 	movi	r7,-1
 400f11c:	00000406 	br	400f130 <memcmp+0x3c>
 400f120:	20800003 	ldbu	r2,0(r4)
 400f124:	28c00003 	ldbu	r3,0(r5)
 400f128:	31bfffc4 	addi	r6,r6,-1
 400f12c:	10c00e1e 	bne	r2,r3,400f168 <memcmp+0x74>
 400f130:	21000044 	addi	r4,r4,1
 400f134:	29400044 	addi	r5,r5,1
 400f138:	31fff91e 	bne	r6,r7,400f120 <__ram_exceptions_end+0xfac0af94>
 400f13c:	0005883a 	mov	r2,zero
 400f140:	f800283a 	ret
 400f144:	20c00017 	ldw	r3,0(r4)
 400f148:	28800017 	ldw	r2,0(r5)
 400f14c:	18bfee1e 	bne	r3,r2,400f108 <__ram_exceptions_end+0xfac0af7c>
 400f150:	31bfff04 	addi	r6,r6,-4
 400f154:	21000104 	addi	r4,r4,4
 400f158:	29400104 	addi	r5,r5,4
 400f15c:	39bff936 	bltu	r7,r6,400f144 <__ram_exceptions_end+0xfac0afb8>
 400f160:	303fe91e 	bne	r6,zero,400f108 <__ram_exceptions_end+0xfac0af7c>
 400f164:	003ff506 	br	400f13c <__ram_exceptions_end+0xfac0afb0>
 400f168:	10c5c83a 	sub	r2,r2,r3
 400f16c:	f800283a 	ret

0400f170 <_putc_r>:
 400f170:	defffc04 	addi	sp,sp,-16
 400f174:	dc000215 	stw	r16,8(sp)
 400f178:	dfc00315 	stw	ra,12(sp)
 400f17c:	2021883a 	mov	r16,r4
 400f180:	20000226 	beq	r4,zero,400f18c <_putc_r+0x1c>
 400f184:	20800e17 	ldw	r2,56(r4)
 400f188:	10001b26 	beq	r2,zero,400f1f8 <_putc_r+0x88>
 400f18c:	30800217 	ldw	r2,8(r6)
 400f190:	10bfffc4 	addi	r2,r2,-1
 400f194:	30800215 	stw	r2,8(r6)
 400f198:	10000a16 	blt	r2,zero,400f1c4 <_putc_r+0x54>
 400f19c:	30800017 	ldw	r2,0(r6)
 400f1a0:	11400005 	stb	r5,0(r2)
 400f1a4:	30800017 	ldw	r2,0(r6)
 400f1a8:	10c00044 	addi	r3,r2,1
 400f1ac:	30c00015 	stw	r3,0(r6)
 400f1b0:	10800003 	ldbu	r2,0(r2)
 400f1b4:	dfc00317 	ldw	ra,12(sp)
 400f1b8:	dc000217 	ldw	r16,8(sp)
 400f1bc:	dec00404 	addi	sp,sp,16
 400f1c0:	f800283a 	ret
 400f1c4:	30c00617 	ldw	r3,24(r6)
 400f1c8:	10c00616 	blt	r2,r3,400f1e4 <_putc_r+0x74>
 400f1cc:	30800017 	ldw	r2,0(r6)
 400f1d0:	00c00284 	movi	r3,10
 400f1d4:	11400005 	stb	r5,0(r2)
 400f1d8:	30800017 	ldw	r2,0(r6)
 400f1dc:	11400003 	ldbu	r5,0(r2)
 400f1e0:	28fff11e 	bne	r5,r3,400f1a8 <__ram_exceptions_end+0xfac0b01c>
 400f1e4:	8009883a 	mov	r4,r16
 400f1e8:	dfc00317 	ldw	ra,12(sp)
 400f1ec:	dc000217 	ldw	r16,8(sp)
 400f1f0:	dec00404 	addi	sp,sp,16
 400f1f4:	4009be01 	jmpi	4009be0 <__swbuf_r>
 400f1f8:	d9400015 	stw	r5,0(sp)
 400f1fc:	d9800115 	stw	r6,4(sp)
 400f200:	4004cb00 	call	4004cb0 <__sinit>
 400f204:	d9800117 	ldw	r6,4(sp)
 400f208:	d9400017 	ldw	r5,0(sp)
 400f20c:	003fdf06 	br	400f18c <__ram_exceptions_end+0xfac0b000>

0400f210 <putc>:
 400f210:	00810074 	movhi	r2,1025
 400f214:	defffc04 	addi	sp,sp,-16
 400f218:	10826504 	addi	r2,r2,2452
 400f21c:	dc000115 	stw	r16,4(sp)
 400f220:	14000017 	ldw	r16,0(r2)
 400f224:	dc400215 	stw	r17,8(sp)
 400f228:	dfc00315 	stw	ra,12(sp)
 400f22c:	2023883a 	mov	r17,r4
 400f230:	80000226 	beq	r16,zero,400f23c <putc+0x2c>
 400f234:	80800e17 	ldw	r2,56(r16)
 400f238:	10001a26 	beq	r2,zero,400f2a4 <putc+0x94>
 400f23c:	28800217 	ldw	r2,8(r5)
 400f240:	10bfffc4 	addi	r2,r2,-1
 400f244:	28800215 	stw	r2,8(r5)
 400f248:	10000b16 	blt	r2,zero,400f278 <putc+0x68>
 400f24c:	28800017 	ldw	r2,0(r5)
 400f250:	14400005 	stb	r17,0(r2)
 400f254:	28800017 	ldw	r2,0(r5)
 400f258:	10c00044 	addi	r3,r2,1
 400f25c:	28c00015 	stw	r3,0(r5)
 400f260:	10800003 	ldbu	r2,0(r2)
 400f264:	dfc00317 	ldw	ra,12(sp)
 400f268:	dc400217 	ldw	r17,8(sp)
 400f26c:	dc000117 	ldw	r16,4(sp)
 400f270:	dec00404 	addi	sp,sp,16
 400f274:	f800283a 	ret
 400f278:	28c00617 	ldw	r3,24(r5)
 400f27c:	10c00e16 	blt	r2,r3,400f2b8 <putc+0xa8>
 400f280:	28800017 	ldw	r2,0(r5)
 400f284:	01000284 	movi	r4,10
 400f288:	14400005 	stb	r17,0(r2)
 400f28c:	28800017 	ldw	r2,0(r5)
 400f290:	10c00003 	ldbu	r3,0(r2)
 400f294:	193ff01e 	bne	r3,r4,400f258 <__ram_exceptions_end+0xfac0b0cc>
 400f298:	280d883a 	mov	r6,r5
 400f29c:	180b883a 	mov	r5,r3
 400f2a0:	00000706 	br	400f2c0 <putc+0xb0>
 400f2a4:	8009883a 	mov	r4,r16
 400f2a8:	d9400015 	stw	r5,0(sp)
 400f2ac:	4004cb00 	call	4004cb0 <__sinit>
 400f2b0:	d9400017 	ldw	r5,0(sp)
 400f2b4:	003fe106 	br	400f23c <__ram_exceptions_end+0xfac0b0b0>
 400f2b8:	280d883a 	mov	r6,r5
 400f2bc:	880b883a 	mov	r5,r17
 400f2c0:	8009883a 	mov	r4,r16
 400f2c4:	dfc00317 	ldw	ra,12(sp)
 400f2c8:	dc400217 	ldw	r17,8(sp)
 400f2cc:	dc000117 	ldw	r16,4(sp)
 400f2d0:	dec00404 	addi	sp,sp,16
 400f2d4:	4009be01 	jmpi	4009be0 <__swbuf_r>

0400f2d8 <__srget_r>:
 400f2d8:	defffd04 	addi	sp,sp,-12
 400f2dc:	dc400115 	stw	r17,4(sp)
 400f2e0:	dc000015 	stw	r16,0(sp)
 400f2e4:	dfc00215 	stw	ra,8(sp)
 400f2e8:	2023883a 	mov	r17,r4
 400f2ec:	2821883a 	mov	r16,r5
 400f2f0:	20000226 	beq	r4,zero,400f2fc <__srget_r+0x24>
 400f2f4:	20800e17 	ldw	r2,56(r4)
 400f2f8:	10001026 	beq	r2,zero,400f33c <__srget_r+0x64>
 400f2fc:	800b883a 	mov	r5,r16
 400f300:	8809883a 	mov	r4,r17
 400f304:	400f4fc0 	call	400f4fc <__srefill_r>
 400f308:	10000e1e 	bne	r2,zero,400f344 <__srget_r+0x6c>
 400f30c:	80c00017 	ldw	r3,0(r16)
 400f310:	80800117 	ldw	r2,4(r16)
 400f314:	19000044 	addi	r4,r3,1
 400f318:	10bfffc4 	addi	r2,r2,-1
 400f31c:	80800115 	stw	r2,4(r16)
 400f320:	81000015 	stw	r4,0(r16)
 400f324:	18800003 	ldbu	r2,0(r3)
 400f328:	dfc00217 	ldw	ra,8(sp)
 400f32c:	dc400117 	ldw	r17,4(sp)
 400f330:	dc000017 	ldw	r16,0(sp)
 400f334:	dec00304 	addi	sp,sp,12
 400f338:	f800283a 	ret
 400f33c:	4004cb00 	call	4004cb0 <__sinit>
 400f340:	003fee06 	br	400f2fc <__ram_exceptions_end+0xfac0b170>
 400f344:	00bfffc4 	movi	r2,-1
 400f348:	003ff706 	br	400f328 <__ram_exceptions_end+0xfac0b19c>

0400f34c <__srget>:
 400f34c:	00810074 	movhi	r2,1025
 400f350:	10826504 	addi	r2,r2,2452
 400f354:	200b883a 	mov	r5,r4
 400f358:	11000017 	ldw	r4,0(r2)
 400f35c:	400f2d81 	jmpi	400f2d8 <__srget_r>

0400f360 <__call_exitprocs>:
 400f360:	defff504 	addi	sp,sp,-44
 400f364:	df000915 	stw	fp,36(sp)
 400f368:	dd400615 	stw	r21,24(sp)
 400f36c:	dc800315 	stw	r18,12(sp)
 400f370:	dfc00a15 	stw	ra,40(sp)
 400f374:	ddc00815 	stw	r23,32(sp)
 400f378:	dd800715 	stw	r22,28(sp)
 400f37c:	dd000515 	stw	r20,20(sp)
 400f380:	dcc00415 	stw	r19,16(sp)
 400f384:	dc400215 	stw	r17,8(sp)
 400f388:	dc000115 	stw	r16,4(sp)
 400f38c:	d9000015 	stw	r4,0(sp)
 400f390:	2839883a 	mov	fp,r5
 400f394:	04800044 	movi	r18,1
 400f398:	057fffc4 	movi	r21,-1
 400f39c:	00810074 	movhi	r2,1025
 400f3a0:	10826404 	addi	r2,r2,2448
 400f3a4:	12000017 	ldw	r8,0(r2)
 400f3a8:	45005217 	ldw	r20,328(r8)
 400f3ac:	44c05204 	addi	r19,r8,328
 400f3b0:	a0001c26 	beq	r20,zero,400f424 <__call_exitprocs+0xc4>
 400f3b4:	a0800117 	ldw	r2,4(r20)
 400f3b8:	15ffffc4 	addi	r23,r2,-1
 400f3bc:	b8000d16 	blt	r23,zero,400f3f4 <__call_exitprocs+0x94>
 400f3c0:	14000044 	addi	r16,r2,1
 400f3c4:	8421883a 	add	r16,r16,r16
 400f3c8:	8421883a 	add	r16,r16,r16
 400f3cc:	84402004 	addi	r17,r16,128
 400f3d0:	a463883a 	add	r17,r20,r17
 400f3d4:	a421883a 	add	r16,r20,r16
 400f3d8:	e0001e26 	beq	fp,zero,400f454 <__call_exitprocs+0xf4>
 400f3dc:	80804017 	ldw	r2,256(r16)
 400f3e0:	e0801c26 	beq	fp,r2,400f454 <__call_exitprocs+0xf4>
 400f3e4:	bdffffc4 	addi	r23,r23,-1
 400f3e8:	843fff04 	addi	r16,r16,-4
 400f3ec:	8c7fff04 	addi	r17,r17,-4
 400f3f0:	bd7ff91e 	bne	r23,r21,400f3d8 <__ram_exceptions_end+0xfac0b24c>
 400f3f4:	00800034 	movhi	r2,0
 400f3f8:	10800004 	addi	r2,r2,0
 400f3fc:	10000926 	beq	r2,zero,400f424 <__call_exitprocs+0xc4>
 400f400:	a0800117 	ldw	r2,4(r20)
 400f404:	1000301e 	bne	r2,zero,400f4c8 <__call_exitprocs+0x168>
 400f408:	a0800017 	ldw	r2,0(r20)
 400f40c:	10003226 	beq	r2,zero,400f4d8 <__call_exitprocs+0x178>
 400f410:	a009883a 	mov	r4,r20
 400f414:	98800015 	stw	r2,0(r19)
 400f418:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 400f41c:	9d000017 	ldw	r20,0(r19)
 400f420:	a03fe41e 	bne	r20,zero,400f3b4 <__ram_exceptions_end+0xfac0b228>
 400f424:	dfc00a17 	ldw	ra,40(sp)
 400f428:	df000917 	ldw	fp,36(sp)
 400f42c:	ddc00817 	ldw	r23,32(sp)
 400f430:	dd800717 	ldw	r22,28(sp)
 400f434:	dd400617 	ldw	r21,24(sp)
 400f438:	dd000517 	ldw	r20,20(sp)
 400f43c:	dcc00417 	ldw	r19,16(sp)
 400f440:	dc800317 	ldw	r18,12(sp)
 400f444:	dc400217 	ldw	r17,8(sp)
 400f448:	dc000117 	ldw	r16,4(sp)
 400f44c:	dec00b04 	addi	sp,sp,44
 400f450:	f800283a 	ret
 400f454:	a0800117 	ldw	r2,4(r20)
 400f458:	80c00017 	ldw	r3,0(r16)
 400f45c:	10bfffc4 	addi	r2,r2,-1
 400f460:	15c01426 	beq	r2,r23,400f4b4 <__call_exitprocs+0x154>
 400f464:	80000015 	stw	zero,0(r16)
 400f468:	183fde26 	beq	r3,zero,400f3e4 <__ram_exceptions_end+0xfac0b258>
 400f46c:	95c8983a 	sll	r4,r18,r23
 400f470:	a0806217 	ldw	r2,392(r20)
 400f474:	a5800117 	ldw	r22,4(r20)
 400f478:	2084703a 	and	r2,r4,r2
 400f47c:	10000b26 	beq	r2,zero,400f4ac <__call_exitprocs+0x14c>
 400f480:	a0806317 	ldw	r2,396(r20)
 400f484:	2088703a 	and	r4,r4,r2
 400f488:	20000c1e 	bne	r4,zero,400f4bc <__call_exitprocs+0x15c>
 400f48c:	89400017 	ldw	r5,0(r17)
 400f490:	d9000017 	ldw	r4,0(sp)
 400f494:	183ee83a 	callr	r3
 400f498:	a0800117 	ldw	r2,4(r20)
 400f49c:	15bfbf1e 	bne	r2,r22,400f39c <__ram_exceptions_end+0xfac0b210>
 400f4a0:	98800017 	ldw	r2,0(r19)
 400f4a4:	153fcf26 	beq	r2,r20,400f3e4 <__ram_exceptions_end+0xfac0b258>
 400f4a8:	003fbc06 	br	400f39c <__ram_exceptions_end+0xfac0b210>
 400f4ac:	183ee83a 	callr	r3
 400f4b0:	003ff906 	br	400f498 <__ram_exceptions_end+0xfac0b30c>
 400f4b4:	a5c00115 	stw	r23,4(r20)
 400f4b8:	003feb06 	br	400f468 <__ram_exceptions_end+0xfac0b2dc>
 400f4bc:	89000017 	ldw	r4,0(r17)
 400f4c0:	183ee83a 	callr	r3
 400f4c4:	003ff406 	br	400f498 <__ram_exceptions_end+0xfac0b30c>
 400f4c8:	a0800017 	ldw	r2,0(r20)
 400f4cc:	a027883a 	mov	r19,r20
 400f4d0:	1029883a 	mov	r20,r2
 400f4d4:	003fb606 	br	400f3b0 <__ram_exceptions_end+0xfac0b224>
 400f4d8:	0005883a 	mov	r2,zero
 400f4dc:	003ffb06 	br	400f4cc <__ram_exceptions_end+0xfac0b340>

0400f4e0 <lflush>:
 400f4e0:	2080030b 	ldhu	r2,12(r4)
 400f4e4:	00c00244 	movi	r3,9
 400f4e8:	1080024c 	andi	r2,r2,9
 400f4ec:	10c00226 	beq	r2,r3,400f4f8 <lflush+0x18>
 400f4f0:	0005883a 	mov	r2,zero
 400f4f4:	f800283a 	ret
 400f4f8:	40049301 	jmpi	4004930 <fflush>

0400f4fc <__srefill_r>:
 400f4fc:	defffc04 	addi	sp,sp,-16
 400f500:	dc400115 	stw	r17,4(sp)
 400f504:	dc000015 	stw	r16,0(sp)
 400f508:	dfc00315 	stw	ra,12(sp)
 400f50c:	dc800215 	stw	r18,8(sp)
 400f510:	2023883a 	mov	r17,r4
 400f514:	2821883a 	mov	r16,r5
 400f518:	20000226 	beq	r4,zero,400f524 <__srefill_r+0x28>
 400f51c:	20800e17 	ldw	r2,56(r4)
 400f520:	10003c26 	beq	r2,zero,400f614 <__srefill_r+0x118>
 400f524:	80c0030b 	ldhu	r3,12(r16)
 400f528:	1908000c 	andi	r4,r3,8192
 400f52c:	1805883a 	mov	r2,r3
 400f530:	2000071e 	bne	r4,zero,400f550 <__srefill_r+0x54>
 400f534:	81001917 	ldw	r4,100(r16)
 400f538:	18880014 	ori	r2,r3,8192
 400f53c:	00f7ffc4 	movi	r3,-8193
 400f540:	20c8703a 	and	r4,r4,r3
 400f544:	8080030d 	sth	r2,12(r16)
 400f548:	1007883a 	mov	r3,r2
 400f54c:	81001915 	stw	r4,100(r16)
 400f550:	80000115 	stw	zero,4(r16)
 400f554:	1100080c 	andi	r4,r2,32
 400f558:	2000571e 	bne	r4,zero,400f6b8 <__srefill_r+0x1bc>
 400f55c:	1100010c 	andi	r4,r2,4
 400f560:	20001f26 	beq	r4,zero,400f5e0 <__srefill_r+0xe4>
 400f564:	81400c17 	ldw	r5,48(r16)
 400f568:	28000826 	beq	r5,zero,400f58c <__srefill_r+0x90>
 400f56c:	80801004 	addi	r2,r16,64
 400f570:	28800226 	beq	r5,r2,400f57c <__srefill_r+0x80>
 400f574:	8809883a 	mov	r4,r17
 400f578:	4004e240 	call	4004e24 <_free_r>
 400f57c:	80800f17 	ldw	r2,60(r16)
 400f580:	80000c15 	stw	zero,48(r16)
 400f584:	80800115 	stw	r2,4(r16)
 400f588:	1000391e 	bne	r2,zero,400f670 <__srefill_r+0x174>
 400f58c:	80800417 	ldw	r2,16(r16)
 400f590:	10004b26 	beq	r2,zero,400f6c0 <__srefill_r+0x1c4>
 400f594:	8480030b 	ldhu	r18,12(r16)
 400f598:	908000cc 	andi	r2,r18,3
 400f59c:	10001f1e 	bne	r2,zero,400f61c <__srefill_r+0x120>
 400f5a0:	81800417 	ldw	r6,16(r16)
 400f5a4:	80800817 	ldw	r2,32(r16)
 400f5a8:	81c00517 	ldw	r7,20(r16)
 400f5ac:	81400717 	ldw	r5,28(r16)
 400f5b0:	81800015 	stw	r6,0(r16)
 400f5b4:	8809883a 	mov	r4,r17
 400f5b8:	103ee83a 	callr	r2
 400f5bc:	80800115 	stw	r2,4(r16)
 400f5c0:	00800e0e 	bge	zero,r2,400f5fc <__srefill_r+0x100>
 400f5c4:	0005883a 	mov	r2,zero
 400f5c8:	dfc00317 	ldw	ra,12(sp)
 400f5cc:	dc800217 	ldw	r18,8(sp)
 400f5d0:	dc400117 	ldw	r17,4(sp)
 400f5d4:	dc000017 	ldw	r16,0(sp)
 400f5d8:	dec00404 	addi	sp,sp,16
 400f5dc:	f800283a 	ret
 400f5e0:	1100040c 	andi	r4,r2,16
 400f5e4:	20003026 	beq	r4,zero,400f6a8 <__srefill_r+0x1ac>
 400f5e8:	1080020c 	andi	r2,r2,8
 400f5ec:	1000241e 	bne	r2,zero,400f680 <__srefill_r+0x184>
 400f5f0:	18c00114 	ori	r3,r3,4
 400f5f4:	80c0030d 	sth	r3,12(r16)
 400f5f8:	003fe406 	br	400f58c <__ram_exceptions_end+0xfac0b400>
 400f5fc:	80c0030b 	ldhu	r3,12(r16)
 400f600:	1000161e 	bne	r2,zero,400f65c <__srefill_r+0x160>
 400f604:	18c00814 	ori	r3,r3,32
 400f608:	00bfffc4 	movi	r2,-1
 400f60c:	80c0030d 	sth	r3,12(r16)
 400f610:	003fed06 	br	400f5c8 <__ram_exceptions_end+0xfac0b43c>
 400f614:	4004cb00 	call	4004cb0 <__sinit>
 400f618:	003fc206 	br	400f524 <__ram_exceptions_end+0xfac0b398>
 400f61c:	00810074 	movhi	r2,1025
 400f620:	10826404 	addi	r2,r2,2448
 400f624:	11000017 	ldw	r4,0(r2)
 400f628:	01410074 	movhi	r5,1025
 400f62c:	00800044 	movi	r2,1
 400f630:	297d3804 	addi	r5,r5,-2848
 400f634:	8080030d 	sth	r2,12(r16)
 400f638:	40051340 	call	4005134 <_fwalk>
 400f63c:	00800244 	movi	r2,9
 400f640:	8480030d 	sth	r18,12(r16)
 400f644:	9480024c 	andi	r18,r18,9
 400f648:	90bfd51e 	bne	r18,r2,400f5a0 <__ram_exceptions_end+0xfac0b414>
 400f64c:	800b883a 	mov	r5,r16
 400f650:	8809883a 	mov	r4,r17
 400f654:	40046b80 	call	40046b8 <__sflush_r>
 400f658:	003fd106 	br	400f5a0 <__ram_exceptions_end+0xfac0b414>
 400f65c:	18c01014 	ori	r3,r3,64
 400f660:	80000115 	stw	zero,4(r16)
 400f664:	00bfffc4 	movi	r2,-1
 400f668:	80c0030d 	sth	r3,12(r16)
 400f66c:	003fd606 	br	400f5c8 <__ram_exceptions_end+0xfac0b43c>
 400f670:	80c00e17 	ldw	r3,56(r16)
 400f674:	0005883a 	mov	r2,zero
 400f678:	80c00015 	stw	r3,0(r16)
 400f67c:	003fd206 	br	400f5c8 <__ram_exceptions_end+0xfac0b43c>
 400f680:	800b883a 	mov	r5,r16
 400f684:	8809883a 	mov	r4,r17
 400f688:	40048d40 	call	40048d4 <_fflush_r>
 400f68c:	10000a1e 	bne	r2,zero,400f6b8 <__srefill_r+0x1bc>
 400f690:	8080030b 	ldhu	r2,12(r16)
 400f694:	00fffdc4 	movi	r3,-9
 400f698:	80000215 	stw	zero,8(r16)
 400f69c:	1886703a 	and	r3,r3,r2
 400f6a0:	80000615 	stw	zero,24(r16)
 400f6a4:	003fd206 	br	400f5f0 <__ram_exceptions_end+0xfac0b464>
 400f6a8:	00800244 	movi	r2,9
 400f6ac:	88800015 	stw	r2,0(r17)
 400f6b0:	18c01014 	ori	r3,r3,64
 400f6b4:	80c0030d 	sth	r3,12(r16)
 400f6b8:	00bfffc4 	movi	r2,-1
 400f6bc:	003fc206 	br	400f5c8 <__ram_exceptions_end+0xfac0b43c>
 400f6c0:	800b883a 	mov	r5,r16
 400f6c4:	8809883a 	mov	r4,r17
 400f6c8:	40053980 	call	4005398 <__smakebuf_r>
 400f6cc:	003fb106 	br	400f594 <__ram_exceptions_end+0xfac0b408>

0400f6d0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400f6d0:	20000226 	beq	r4,zero,400f6dc <_exit+0xc>
    ALT_SIM_FAIL();
 400f6d4:	002af070 	cmpltui	zero,zero,43969
 400f6d8:	003fff06 	br	400f6d8 <__ram_exceptions_end+0xfac0b54c>
  } else {
    ALT_SIM_PASS();
 400f6dc:	002af0b0 	cmpltui	zero,zero,43970
 400f6e0:	003ffd06 	br	400f6d8 <__ram_exceptions_end+0xfac0b54c>
